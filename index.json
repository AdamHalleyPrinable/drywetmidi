{
  "api/Melanchall.DryWetMidi.Core.ChannelAftertouchEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChannelAftertouchEvent.html",
    "title": "Class ChannelAftertouchEvent | DryWetMIDI",
    "keywords": "Class ChannelAftertouchEvent Represents a Channel Pressure (Aftertouch) message. Inheritance Object MidiEvent ChannelEvent ChannelAftertouchEvent Inherited Members ChannelEvent.Channel ChannelEvent.Item[Int32] ChannelEvent.CloneEvent() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChannelAftertouchEvent : ChannelEvent Remarks This message is most often sent by pressing down on the key after it \"bottoms out\". This message is different from polyphonic after-touch. Use this message to send the single greatest pressure value (of all the current depressed keys). Constructors ChannelAftertouchEvent() Initializes a new instance of the ChannelAftertouchEvent . Declaration public ChannelAftertouchEvent() ChannelAftertouchEvent(SevenBitNumber) Initializes a new instance of the ChannelAftertouchEvent with the specified aftertouch (pressure) value. Declaration public ChannelAftertouchEvent(SevenBitNumber aftertouchValue) Parameters Type Name Description SevenBitNumber aftertouchValue Aftertouch (pressure) value. Properties AftertouchValue Gets or sets aftertouch (pressure) value. Declaration public SevenBitNumber AftertouchValue { get; set; } Property Value Type Description SevenBitNumber Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.BytesToMidiEventConverter.html": {
    "href": "api/Melanchall.DryWetMidi.Core.BytesToMidiEventConverter.html",
    "title": "Class BytesToMidiEventConverter | DryWetMIDI",
    "keywords": "Class BytesToMidiEventConverter Inheritance Object BytesToMidiEventConverter Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class BytesToMidiEventConverter : IDisposable Constructors BytesToMidiEventConverter() Declaration public BytesToMidiEventConverter() BytesToMidiEventConverter(Int32) Declaration public BytesToMidiEventConverter(int capacity) Parameters Type Name Description Int32 capacity Properties ReadingSettings Declaration public ReadingSettings ReadingSettings { get; } Property Value Type Description ReadingSettings Methods Convert(Byte, Byte[]) Declaration public MidiEvent Convert(byte statusByte, byte[] dataBytes) Parameters Type Name Description Byte statusByte Byte [] dataBytes Returns Type Description MidiEvent Convert(Byte[]) Declaration public MidiEvent Convert(byte[] bytes) Parameters Type Name Description Byte [] bytes Returns Type Description MidiEvent Convert(Byte[], Int32, Int32) Declaration public MidiEvent Convert(byte[] bytes, int offset, int length) Parameters Type Name Description Byte [] bytes Int32 offset Int32 length Returns Type Description MidiEvent Dispose() Releases all resources used by the current instance of the BytesToMidiEventConverter class. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Core.ActiveSensingEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ActiveSensingEvent.html",
    "title": "Class ActiveSensingEvent | DryWetMIDI",
    "keywords": "Class ActiveSensingEvent Represents Active Sensing event. Inheritance Object MidiEvent SystemRealTimeEvent ActiveSensingEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ActiveSensingEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI active sense message tells a MIDI device that the MIDI connection is still active. Constructors ActiveSensingEvent() Initializes a new instance of the ActiveSensingEvent . Declaration public ActiveSensingEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Composing.PatternUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.PatternUtilities.html",
    "title": "Class PatternUtilities | DryWetMIDI",
    "keywords": "Class PatternUtilities Utilities to process an instance of the Pattern . Inheritance Object PatternUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public static class PatternUtilities Methods CombineInParallel(IEnumerable<Pattern>) Combines the specified patterns into single one starting all them at the same time (i.e. stacking patterns). Declaration public static Pattern CombineInParallel(this IEnumerable<Pattern> patterns) Parameters Type Name Description IEnumerable < Pattern > patterns Patterns to combine. Returns Type Description Pattern Pattern that made up from patterns arranged into stack. Exceptions Type Condition ArgumentNullException patterns is null. CombineInSequence(IEnumerable<Pattern>) Combines the specified patterns into single one placing them after each other. Declaration public static Pattern CombineInSequence(this IEnumerable<Pattern> patterns) Parameters Type Name Description IEnumerable < Pattern > patterns Patterns to combine. Returns Type Description Pattern Pattern that made up from patterns following each other. Exceptions Type Condition ArgumentNullException patterns is null. SplitAtAllAnchors(Pattern, Boolean) Splits a pattern into subpatterns in points where anchors inserted. Declaration public static IEnumerable<Pattern> SplitAtAllAnchors(this Pattern pattern, bool removeEmptyPatterns = true) Parameters Type Name Description Pattern pattern Pattern to split. Boolean removeEmptyPatterns A value indicating whether empty patterns should be automatically removed or not. The default value is true. Returns Type Description IEnumerable < Pattern > A collection whose elements are the subpatterns from the pattern that is splitted at anchors. Exceptions Type Condition ArgumentNullException pattern is null. SplitAtAllMarkers(Pattern, Boolean) Splits a pattern into subpatterns in points where markers inserted. Declaration public static IEnumerable<Pattern> SplitAtAllMarkers(this Pattern pattern, bool removeEmptyPatterns = true) Parameters Type Name Description Pattern pattern Pattern to split. Boolean removeEmptyPatterns A value indicating whether empty patterns should be automatically removed or not. The default value is true. Returns Type Description IEnumerable < Pattern > A collection whose elements are the subpatterns from the pattern that is splitted at markers. Exceptions Type Condition ArgumentNullException pattern is null. SplitAtAnchor(Pattern, Object, Boolean) Splits a pattern into subpatterns in points where the specified anchor inserted. Declaration public static IEnumerable<Pattern> SplitAtAnchor(this Pattern pattern, object anchor, bool removeEmptyPatterns = true) Parameters Type Name Description Pattern pattern Pattern to split. Object anchor Anchor to split pattern at. Boolean removeEmptyPatterns A value indicating whether empty patterns should be automatically removed or not. The default value is true. Returns Type Description IEnumerable < Pattern > A collection whose elements are the subpatterns from the pattern that is splitted at anchor . Exceptions Type Condition ArgumentNullException pattern is null. -or- anchor is null. SplitAtMarker(Pattern, String, Boolean, StringComparison) Splits a pattern into subpatterns in points where the specified marker inserted. Declaration public static IEnumerable<Pattern> SplitAtMarker(this Pattern pattern, string marker, bool removeEmptyPatterns = true, StringComparison stringComparison = StringComparison.CurrentCulture) Parameters Type Name Description Pattern pattern Pattern to split. String marker Marker to split pattern at. Boolean removeEmptyPatterns A value indicating whether empty patterns should be automatically removed or not. The default value is true. StringComparison stringComparison Value that specifies how the marker strings will be compared. Returns Type Description IEnumerable < Pattern > A collection whose elements are the subpatterns from the pattern that is splitted at marker . Exceptions Type Condition ArgumentNullException pattern is null. -or- marker is null. InvalidEnumArgumentException stringComparison specified an invalid value. TransformChords(Pattern, ChordTransformation, Boolean) Creates new Pattern by transforming chords in the specified pattern. Declaration public static Pattern TransformChords(this Pattern pattern, ChordTransformation chordTransformation, bool recursive = true) Parameters Type Name Description Pattern pattern Pattern to transform notes of. ChordTransformation chordTransformation Transformation to apply to chords of the pattern . Boolean recursive A value indicating whether nested patterns should be processed or not. The default value is true. Returns Type Description Pattern Pattern that created by transforming chords of the pattern . Exceptions Type Condition ArgumentNullException pattern is null. -or- chordTransformation is null. TransformNotes(Pattern, NoteTransformation, Boolean) Creates new Pattern by transforming notes in the specified pattern. Declaration public static Pattern TransformNotes(this Pattern pattern, NoteTransformation noteTransformation, bool recursive = true) Parameters Type Name Description Pattern pattern Pattern to transform notes of. NoteTransformation noteTransformation Transformation to apply to notes of the pattern . Boolean recursive A value indicating whether nested patterns should be processed or not. The default value is true. Returns Type Description Pattern Pattern that created by transforming notes of the pattern . Exceptions Type Condition ArgumentNullException pattern is null. -or- noteTransformation is null."
  },
  "api/Melanchall.DryWetMidi.Common.FourBitNumber.html": {
    "href": "api/Melanchall.DryWetMidi.Common.FourBitNumber.html",
    "title": "Struct FourBitNumber | DryWetMIDI",
    "keywords": "Struct FourBitNumber Type that is used to represent a four-bit number (0-15). Implements IComparable < FourBitNumber > IConvertible Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Common Assembly : Melanchall.DryWetMidi.dll Syntax public struct FourBitNumber : IComparable<FourBitNumber>, IConvertible Remarks Four-bit numbers widely used by MIDI protocol as parameters of MIDI events. So instead of manipulating built-in C# numeric types (like byte or int) and checking for out-of-range errors all validation of numbers in the [0; 15] range happens on data type level via casting C# integer values to the FourBitNumber . Constructors FourBitNumber(Byte) Initializes a new instance of the FourBitNumber with the specified value. Declaration public FourBitNumber(byte value) Parameters Type Name Description Byte value Value representing four-bit number. Exceptions Type Condition ArgumentOutOfRangeException value is out of [ MinValue ; MaxValue ] range. Fields MaxValue The largest possible value of a FourBitNumber . Declaration public static readonly FourBitNumber MaxValue Field Value Type Description FourBitNumber MinValue The smallest possible value of a FourBitNumber . Declaration public static readonly FourBitNumber MinValue Field Value Type Description FourBitNumber Values All possible values of FourBitNumber . Declaration public static readonly FourBitNumber[] Values Field Value Type Description FourBitNumber [] Methods CompareTo(FourBitNumber) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(FourBitNumber other) Parameters Type Name Description FourBitNumber other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: - Less than zero: This instance precedes other in the sort order. - Zero: This instance occurs in the same position in the sort order as other. - Greater than zero: This instance follows other in the sort order. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides ValueType.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() GetTypeCode() Returns the TypeCode for value type FourBitNumber . Declaration public TypeCode GetTypeCode() Returns Type Description TypeCode The enumerated constant, Byte . Parse(String) Converts the string representation of a four-bit number to its FourBitNumber equivalent. Declaration public static FourBitNumber Parse(string input) Parameters Type Name Description String input A string containing a number to convert. Returns Type Description FourBitNumber A FourBitNumber equivalent to the four-bit number contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() TryParse(String, out FourBitNumber) Converts the string representation of a four-bit number to its FourBitNumber equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out FourBitNumber fourBitNumber) Parameters Type Name Description String input A string containing a number to convert. FourBitNumber fourBitNumber When this method returns, contains the FourBitNumber equivalent of the four-bit number contained in input , if the conversion succeeded, or zero if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Operators Explicit(Byte to FourBitNumber) Converts the value of a Byte to a FourBitNumber . Declaration public static explicit operator FourBitNumber(byte number) Parameters Type Name Description Byte number Byte value to convert to a FourBitNumber object. Returns Type Description FourBitNumber Implicit(FourBitNumber to Byte) Converts the value of a FourBitNumber to a Byte . Declaration public static implicit operator byte (FourBitNumber number) Parameters Type Name Description FourBitNumber number FourBitNumber object to convert to a byte value. Returns Type Description Byte Explicit Interface Implementations IConvertible.ToBoolean(IFormatProvider) Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information. Declaration bool IConvertible.ToBoolean(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Boolean A Boolean value equivalent to the value of this instance. IConvertible.ToByte(IFormatProvider) Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information. Declaration byte IConvertible.ToByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Byte An 8-bit unsigned integer equivalent to the value of this instance. IConvertible.ToChar(IFormatProvider) Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information. Declaration char IConvertible.ToChar(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Char A Unicode character equivalent to the value of this instance. IConvertible.ToDateTime(IFormatProvider) Converts the value of this instance to an equivalent DateTime using the specified culture-specific formatting information. Declaration DateTime IConvertible.ToDateTime(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description DateTime A DateTime instance equivalent to the value of this instance. IConvertible.ToDecimal(IFormatProvider) Converts the value of this instance to an equivalent Decimal number using the specified culture-specific formatting information. Declaration decimal IConvertible.ToDecimal(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Decimal A Decimal number equivalent to the value of this instance. IConvertible.ToDouble(IFormatProvider) Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information. Declaration double IConvertible.ToDouble(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Double A double-precision floating-point number equivalent to the value of this instance. IConvertible.ToInt16(IFormatProvider) Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information. Declaration short IConvertible.ToInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int16 An 16-bit signed integer equivalent to the value of this instance. IConvertible.ToInt32(IFormatProvider) Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information. Declaration int IConvertible.ToInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int32 An 32-bit signed integer equivalent to the value of this instance. IConvertible.ToInt64(IFormatProvider) Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information. Declaration long IConvertible.ToInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int64 An 64-bit signed integer equivalent to the value of this instance. IConvertible.ToSByte(IFormatProvider) Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information. Declaration sbyte IConvertible.ToSByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description SByte An 8-bit signed integer equivalent to the value of this instance. IConvertible.ToSingle(IFormatProvider) Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information. Declaration float IConvertible.ToSingle(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Single A single-precision floating-point number equivalent to the value of this instance. IConvertible.ToString(IFormatProvider) Converts the value of this instance to an equivalent String using the specified culture-specific formatting information. Declaration string IConvertible.ToString(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description String A String instance equivalent to the value of this instance. IConvertible.ToType(Type, IFormatProvider) Converts the value of this instance to an System.Object of the specified Type that has an equivalent value, using the specified culture-specific formatting information. Declaration object IConvertible.ToType(Type conversionType, IFormatProvider provider) Parameters Type Name Description Type conversionType The Type to which the value of this instance is converted. IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Object An Object instance of type conversionType whose value is equivalent to the value of this instance. IConvertible.ToUInt16(IFormatProvider) Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information. Declaration ushort IConvertible.ToUInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt16 An 16-bit unsigned integer equivalent to the value of this instance. IConvertible.ToUInt32(IFormatProvider) Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information. Declaration uint IConvertible.ToUInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt32 An 32-bit unsigned integer equivalent to the value of this instance. IConvertible.ToUInt64(IFormatProvider) Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information. Declaration ulong IConvertible.ToUInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt64 An 64-bit unsigned integer equivalent to the value of this instance. Implements System.IComparable<T> System.IConvertible"
  },
  "api/Melanchall.DryWetMidi.Core.MidiFile.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiFile.html",
    "title": "Class MidiFile | DryWetMIDI",
    "keywords": "Class MidiFile Class that represents a MIDI file. Inheritance Object MidiFile Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiFile Constructors MidiFile() Initializes a new instance of the MidiFile . Declaration public MidiFile() MidiFile(MidiChunk[]) Initializes a new instance of the MidiFile with the specified chunks. Declaration public MidiFile(params MidiChunk[] chunks) Parameters Type Name Description MidiChunk [] chunks Chunks to add to the file. Remarks Note that header chunks cannot be added into the collection since it may cause inconsistence in the file structure. Header chunk with appropriate information will be written to a file automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException chunks is null. MidiFile(IEnumerable<MidiChunk>) Initializes a new instance of the MidiFile with the specified chunks. Declaration public MidiFile(IEnumerable<MidiChunk> chunks) Parameters Type Name Description IEnumerable < MidiChunk > chunks Chunks to add to the file. Remarks Note that header chunks cannot be added into the collection since it may cause inconsistence in the file structure. Header chunk with appropriate information will be written to a file automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException chunks is null. Properties Chunks Gets collection of chunks of a MIDI file. Declaration public ChunksCollection Chunks { get; } Property Value Type Description ChunksCollection Remarks MIDI Files are made up of chunks. Сollection returned by this property may contain chunks of the following types: TrackChunk , UnknownChunk , and any custom chunk types you've defined. OriginalFormat Gets original format of the file was read. This property returns null for the MidiFile created by constructor. Declaration public MidiFileFormat OriginalFormat { get; } Property Value Type Description MidiFileFormat Exceptions Type Condition UnknownFileFormatException File format is unknown. InvalidOperationException Unable to get original format of the file. TimeDivision Gets or sets a time division of a MIDI file. Declaration public TimeDivision TimeDivision { get; set; } Property Value Type Description TimeDivision Remarks Time division specifies the meaning of the delta-times of events. There are two types of the time division: ticks per quarter note and SMPTE. The first type represented by TicksPerQuarterNoteTimeDivision class and the second one represented by SmpteTimeDivision class. Methods Clone() Clones MIDI file by creating a copy of it. Declaration public MidiFile Clone() Returns Type Description MidiFile Copy of the MIDI file. Read(Stream, ReadingSettings) Reads a MIDI file from the stream. Declaration public static MidiFile Read(Stream stream, ReadingSettings settings = null) Parameters Type Name Description Stream stream Stream to read file from. ReadingSettings settings Settings according to which the file must be read. Returns Type Description MidiFile An instance of the MidiFile representing a MIDI file was read from the stream. Remarks Stream must be readable, seekable and be able to provide its position and length via Position and Length properties. Exceptions Type Condition ArgumentNullException stream is null. ArgumentException stream doesn't support reading. -or stream doesn't support seeking. -or- stream is already read. IOException An I/O error occurred while reading from the stream. ObjectDisposedException stream is disposed. -or- Underlying stream reader is disposed. NotSupportedException Unable to get position of the stream . -or Unable to get length of the stream . NoHeaderChunkException There is no header chunk in a file. InvalidChunkSizeException Actual header or track chunk's size differs from the one declared in its header and that should be treated as error according to the settings . UnknownChunkException Chunk to be read has unknown ID and that should be treated as error accordng to the settings . UnexpectedTrackChunksCountException Actual track chunks count differs from the expected one and that should be treated as error according to the specified settings . UnknownFileFormatException The header chunk contains unknown file format and UnknownFileFormatPolicy property of the settings set to Abort . NotEnoughBytesException MIDI file cannot be read since the reader's underlying stream doesn't have enough bytes. UnexpectedRunningStatusException Unexpected running status is encountered. MissedEndOfTrackEventException Track chunk doesn't end with End Of Track event and that should be treated as error accordng to the specified settings . InvalidChannelEventParameterValueException Value of a channel event's parameter just read is invalid. InvalidMetaEventParameterValueException Value of a meta event's parameter just read is invalid. Read(String, ReadingSettings) Reads a MIDI file specified by its full path. Declaration public static MidiFile Read(string filePath, ReadingSettings settings = null) Parameters Type Name Description String filePath Path to the file to read. ReadingSettings settings Settings according to which the file must be read. Returns Type Description MidiFile An instance of the MidiFile representing a MIDI file. Exceptions Type Condition ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException filePath is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). IOException An I/O error occurred while reading the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException This operation is not supported on the current platform. -or- filePath specified a directory. -or- The caller does not have the required permission. NoHeaderChunkException There is no header chunk in a file. InvalidChunkSizeException Actual header or track chunk's size differs from the one declared in its header and that should be treated as error according to the settings . UnknownChunkException Chunk to be read has unknown ID and that should be treated as error accordng to the settings . UnexpectedTrackChunksCountException Actual track chunks count differs from the expected one and that should be treated as error according to the specified settings . UnknownFileFormatException The header chunk contains unknown file format and UnknownFileFormatPolicy property of the settings set to Abort . InvalidChannelEventParameterValueException Value of a channel event's parameter just read is invalid. InvalidMetaEventParameterValueException Value of a meta event's parameter just read is invalid. UnknownChannelEventException Reader has encountered an unknown channel event. NotEnoughBytesException MIDI file cannot be read since the reader's underlying stream doesn't have enough bytes. UnexpectedRunningStatusException Unexpected running status is encountered. MissedEndOfTrackEventException Track chunk doesn't end with End Of Track event and that should be treated as error accordng to the specified settings . Write(Stream, MidiFileFormat, WritingSettings) Writes current MidiFile to the stream. Declaration public void Write(Stream stream, MidiFileFormat format = MidiFileFormat.MultiTrack, WritingSettings settings = null) Parameters Type Name Description Stream stream Stream to write file's data to. MidiFileFormat format Format of the file to be written. WritingSettings settings Settings according to which the file must be written. Exceptions Type Condition ArgumentNullException stream is null. ArgumentException stream doesn't support writing. InvalidEnumArgumentException format specified an invalid value. InvalidOperationException Time division is null. IOException An I/O error occurred while writing to the stream. ObjectDisposedException stream is disposed. -or- Underlying stream writer is disposed. TooManyTrackChunksException Count of track chunks presented in the file exceeds maximum value allowed for MIDI file. Write(String, Boolean, MidiFileFormat, WritingSettings) Writes the MIDI file to location specified by full path. Declaration public void Write(string filePath, bool overwriteFile = false, MidiFileFormat format = MidiFileFormat.MultiTrack, WritingSettings settings = null) Parameters Type Name Description String filePath Full path of the file to write to. Boolean overwriteFile If true and file specified by filePath already exists it will be overwritten; if false and the file exists exception will be thrown. MidiFileFormat format MIDI file format to write in. WritingSettings settings Settings according to which the file must be written. Exceptions Type Condition ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException filePath is null. InvalidEnumArgumentException format specified an invalid value. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). IOException An I/O error occurred while writing the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException This operation is not supported on the current platform.-or- filePath specified a directory.-or- The caller does not have the required permission. InvalidOperationException Time division is null. TooManyTrackChunksException Count of track chunks presented in the file exceeds maximum value allowed for MIDI file. Extension Methods MidiFileUtilities.GetChannels(MidiFile) TrackChunkUtilities.GetTrackChunks(MidiFile) PlaybackUtilities.GetPlayback(MidiFile, IOutputDevice, MidiClockSettings) PlaybackUtilities.GetPlayback(MidiFile, MidiClockSettings) PlaybackUtilities.Play(MidiFile, IOutputDevice, MidiClockSettings) ChordsManagingUtilities.GetChords(MidiFile, Int64) ChordsManagingUtilities.ProcessChords(MidiFile, Action<Chord>, Predicate<Chord>, Int64) ChordsManagingUtilities.RemoveChords(MidiFile, Predicate<Chord>, Int64) NotesManagingUtilities.GetNotes(MidiFile) NotesManagingUtilities.ProcessNotes(MidiFile, Action<Note>, Predicate<Note>) NotesManagingUtilities.RemoveNotes(MidiFile, Predicate<Note>) GetNotesAndRestsUtilities.GetNotesAndRests(MidiFile, RestSeparationPolicy) GetTimedEventsAndNotesUtilities.GetTimedEventsAndNotes(MidiFile) TempoMapManagingUtilities.ManageTempoMap(MidiFile) TempoMapManagingUtilities.GetTempoMap(MidiFile) TempoMapManagingUtilities.ReplaceTempoMap(MidiFile, TempoMap) TimedEventsManagingUtilities.GetTimedEvents(MidiFile) TimedEventsManagingUtilities.ProcessTimedEvents(MidiFile, Action<TimedEvent>, Predicate<TimedEvent>) TimedEventsManagingUtilities.RemoveTimedEvents(MidiFile, Predicate<TimedEvent>) MidiFileUtilities.GetDuration<TTimeSpan>(MidiFile) MidiFileUtilities.GetDuration(MidiFile, TimeSpanType) MidiFileUtilities.IsEmpty(MidiFile) MidiFileUtilities.ShiftEvents(MidiFile, ITimeSpan) MidiFileUtilities.Resize(MidiFile, ITimeSpan) MidiFileUtilities.Resize(MidiFile, Double) ChordsSplitterUtilities.SplitChordsByStep(MidiFile, ITimeSpan, Int64) ChordsSplitterUtilities.SplitChordsByPartsNumber(MidiFile, Int32, TimeSpanType, Int64) ChordsSplitterUtilities.SplitChordsByGrid(MidiFile, IGrid, Int64) ChordsSplitterUtilities.SplitChordsAtDistance(MidiFile, ITimeSpan, LengthedObjectTarget, Int64) ChordsSplitterUtilities.SplitChordsAtDistance(MidiFile, Double, TimeSpanType, LengthedObjectTarget, Int64) NotesSplitterUtilities.SplitNotesByStep(MidiFile, ITimeSpan) NotesSplitterUtilities.SplitNotesByPartsNumber(MidiFile, Int32, TimeSpanType) NotesSplitterUtilities.SplitNotesByGrid(MidiFile, IGrid) NotesSplitterUtilities.SplitNotesAtDistance(MidiFile, ITimeSpan, LengthedObjectTarget) NotesSplitterUtilities.SplitNotesAtDistance(MidiFile, Double, TimeSpanType, LengthedObjectTarget) MidiFileSplitter.SplitByChannel(MidiFile) MidiFileSplitter.SplitByNotes(MidiFile) MidiFileSplitter.SplitByGrid(MidiFile, IGrid, SliceMidiFileSettings) MidiFileSplitter.SkipPart(MidiFile, ITimeSpan, SliceMidiFileSettings) MidiFileSplitter.TakePart(MidiFile, ITimeSpan, SliceMidiFileSettings) MidiFileSplitter.TakePart(MidiFile, ITimeSpan, ITimeSpan, SliceMidiFileSettings) NotesMergerUtilities.MergeNotes(MidiFile, NotesMergingSettings, Predicate<Note>) ChordsQuantizerUtilities.QuantizeChords(MidiFile, IGrid, Int64, ChordsQuantizingSettings) NotesQuantizerUtilities.QuantizeNotes(MidiFile, IGrid, NotesQuantizingSettings) TimedEventsQuantizerUtilities.QuantizeTimedEvents(MidiFile, IGrid, TimedEventsQuantizingSettings) ChordsRandomizerUtilities.RandomizeChords(MidiFile, IBounds, Int64, ChordsRandomizingSettings) NotesRandomizerUtilities.RandomizeNotes(MidiFile, IBounds, NotesRandomizingSettings) TimedEventsRandomizerUtilities.RandomizeTimedEvents(MidiFile, IBounds, TimedEventsRandomizingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.MidiException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiException.html",
    "title": "Class MidiException | DryWetMIDI",
    "keywords": "Class MidiException Base MIDI exception class. Inheritance Object Exception MidiException InvalidChannelEventParameterValueException InvalidChunkSizeException InvalidMetaEventParameterValueException InvalidMidiTimeCodeComponentException InvalidSystemCommonEventParameterValueException MissedEndOfTrackEventException NoHeaderChunkException NotEnoughBytesException TooManyTrackChunksException UnexpectedRunningStatusException UnexpectedTrackChunksCountException UnknownChannelEventException UnknownChunkException UnknownFileFormatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class MidiException : Exception, ISerializable Constructors MidiException() Initializes a new instance of the MidiException . Declaration public MidiException() MidiException(SerializationInfo, StreamingContext) Initializes a new instance of the MidiException with serialized data. Declaration protected MidiException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. MidiException(String) Initializes a new instance of the MidiException with the specified error message. Declaration public MidiException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. MidiException(String, Exception) Initializes a new instance of the MidiException class with the specified error message and a reference to the inner exception that is the cause of this exception. Declaration public MidiException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.MidiEventType.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiEventType.html",
    "title": "Enum MidiEventType | DryWetMIDI",
    "keywords": "Enum MidiEventType The type of a MIDI event. Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum MidiEventType Fields Name Description ActiveSensing Active Sensing event. ChannelAftertouch Channel Pressure (Aftertouch) event. ChannelPrefix MIDI Channel Prefix meta event. Continue Continue event. ControlChange Control Change event. CopyrightNotice Copyright Notice meta event. CuePoint Cue Point meta event. CustomMeta Custom meta event. DeviceName Device Name meta event. EndOfTrack End of Track meta event. EscapeSysEx \"Escape\" system exclusive event which defines an escape sequence. InstrumentName Instrument Name meta event. KeySignature Key Signature meta event. Lyric Lyric meta event. Marker Marker meta event. MidiTimeCode MIDI Time Code (MIDI Quarter Frame) event. NormalSysEx Normal system exclusive event. NoteAftertouch Polyphonic Key Pressure (Aftertouch) event. NoteOff Note Off event. NoteOn Note On event. PitchBend Pitch Bend Change event. PortPrefix MIDI Port meta event. ProgramChange Program Change event. ProgramName Program Name meta event. Reset Reset event. SequenceNumber Sequence Number meta event. SequencerSpecific Sequencer Specific meta event. SequenceTrackName Sequence/Track Name meta event. SetTempo Set Tempo meta event. SmpteOffset SMPTE Offset meta event. SongPositionPointer Song Position Pointer event. SongSelect Song Select event. Start Start event. Stop Stop event. Text Text meta event. TimeSignature Time Signature meta event. TimingClock Timing Clock event. TuneRequest Tune Request event. UnknownMeta Unknown meta event."
  },
  "api/Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValuePolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValuePolicy.html",
    "title": "Enum InvalidMetaEventParameterValuePolicy | DryWetMIDI",
    "keywords": "Enum InvalidMetaEventParameterValuePolicy Specifies how reading engine should react on invalid value of a meta event's parameter value. For example, 255 is the invalid value for the Scale and will be processed according with this policy. The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum InvalidMetaEventParameterValuePolicy Fields Name Description Abort Abort reading and throw an InvalidMetaEventParameterValueException . SnapToLimits Read value and snap it to limits of the allowable range if it is out of them."
  },
  "api/Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValueException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValueException.html",
    "title": "Class InvalidMetaEventParameterValueException | DryWetMIDI",
    "keywords": "Class InvalidMetaEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a meta event. Inheritance Object Exception MidiException InvalidMetaEventParameterValueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class InvalidMetaEventParameterValueException : MidiException, ISerializable Remarks Note that this exception will be thrown only if InvalidMetaEventParameterValuePolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Constructors InvalidMetaEventParameterValueException() Initializes a new instance of the InvalidMetaEventParameterValueException . Declaration public InvalidMetaEventParameterValueException() InvalidMetaEventParameterValueException(String, Int32) Initializes a new instance of the InvalidMetaEventParameterValueException with the specified error message and invalid meta event's parameter value. Declaration public InvalidMetaEventParameterValueException(string message, int value) Parameters Type Name Description String message The message that describes the error. Int32 value The value of the meta event's parameter that caused this exception. Properties Value Gets the value of the meta event's parameter that caused this exception. Declaration public int Value { get; } Property Value Type Description Int32 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidChunkSizeException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidChunkSizeException.html",
    "title": "Class InvalidChunkSizeException | DryWetMIDI",
    "keywords": "Class InvalidChunkSizeException The exception that is thrown when the actual size of a MIDI file chunk differs from the one declared in its header. Inheritance Object Exception MidiException InvalidChunkSizeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class InvalidChunkSizeException : MidiException, ISerializable Remarks Note that this exception will be thrown only if InvalidChunkSizePolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Constructors InvalidChunkSizeException() Initializes a new instance of the InvalidChunkSizeException . Declaration public InvalidChunkSizeException() InvalidChunkSizeException(Int64, Int64) Initializes a new instance of the InvalidChunkSizeException with the specified expected size of a MIDI chunk and the actual one. Declaration public InvalidChunkSizeException(long expectedSize, long actualSize) Parameters Type Name Description Int64 expectedSize Expected size of a chunk written in its header. Int64 actualSize Actual size of a chunk. Properties ActualSize Gets the actual size of a chunk. Declaration public long ActualSize { get; } Property Value Type Description Int64 ExpectedSize Gets the expected size of a chunk written in its header. Declaration public long ExpectedSize { get; } Property Value Type Description Int64 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValuePolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValuePolicy.html",
    "title": "Enum InvalidChannelEventParameterValuePolicy | DryWetMIDI",
    "keywords": "Enum InvalidChannelEventParameterValuePolicy Specifies how reading engine should react on invalid value of a channel event's parameter value. Valid values are 0-127 so, for example, 128 is the invalid one and will be processed according with this policy. The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum InvalidChannelEventParameterValuePolicy : byte Fields Name Description Abort Abort reading and throw an InvalidChannelEventParameterValueException . ReadValid Read byte and take its lower seven bits as the final value. SnapToLimits Read value and snap it to limits of the allowable range if it is out of them."
  },
  "api/Melanchall.DryWetMidi.Core.EscapeSysExEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.EscapeSysExEvent.html",
    "title": "Class EscapeSysExEvent | DryWetMIDI",
    "keywords": "Class EscapeSysExEvent Reprsents an \"escape\" system exclusive event which defines an escape sequence. Inheritance Object MidiEvent SysExEvent EscapeSysExEvent Inherited Members SysExEvent.EndOfEventByte SysExEvent.Completed SysExEvent.Data SysExEvent.CloneEvent() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class EscapeSysExEvent : SysExEvent Remarks \"Escape\" system exclisive events start with 0xF7 byte and don't have a terminal 0xF7 byte that is required for normal sysex events. When an \"escape\" sysex event is encountered whilst reading a MIDI file, its interpretation (SysEx packet or escape sequence) is determined as follows: - When an event with 0xF0 status but lacking a terminal 0xF7 is encountered, then this is the first of a Casio-style multi-packet message, and a flag (boolean variable) should be set to indicate this. - If an event with 0xF7 status is encountered whilst this flag is set, then this is a continuation event (a system exclusive packet, one of many). If this event has a terminal 0xF7, then it is the last packet and flag should be cleared. - If an event with 0xF7 status is encountered whilst flag is clear, then this event is an escape sequence. Constructors EscapeSysExEvent() Initializes a new instance of the EscapeSysExEvent . Declaration public EscapeSysExEvent() EscapeSysExEvent(Byte[]) Initializes a new instance of the EscapeSysExEvent with the specified data. Declaration public EscapeSysExEvent(byte[] data) Parameters Type Name Description Byte [] data Data of the \"escape\" sysex event. Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.DeviceNameEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.DeviceNameEvent.html",
    "title": "Class DeviceNameEvent | DryWetMIDI",
    "keywords": "Class DeviceNameEvent Represents a Device Name meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent DeviceNameEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class DeviceNameEvent : BaseTextEvent Remarks This optional event is used to identify the hardware device used to produce sounds for this track. Constructors DeviceNameEvent() Initializes a new instance of the DeviceNameEvent . Declaration public DeviceNameEvent() DeviceNameEvent(String) Initializes a new instance of the DeviceNameEvent with the specified device name. Declaration public DeviceNameEvent(string deviceName) Parameters Type Name Description String deviceName Name of the device. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.CompressionPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.CompressionPolicy.html",
    "title": "Enum CompressionPolicy | DryWetMIDI",
    "keywords": "Enum CompressionPolicy Specifies how writing engine should compress MIDI data. The default is NoCompression . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Flags] public enum CompressionPolicy Fields Name Description Default Use default compression on the MIDI data to write. This option turns on all options that don't lead to data losing (for example, unknown meta events). DeleteDefaultKeySignature Don't write default Key Signature event. DeleteDefaultSetTempo Don't write default Set Tempo event. DeleteDefaultTimeSignature Don't write default Time Signature event. DeleteUnknownChunks Don't write instances of the UnknownChunk . DeleteUnknownMetaEvents Don't write instances of the UnknownMetaEvent . NoCompression Don't use any compression on the MIDI data to write. NoteOffAsSilentNoteOn Turn Note Off events into the Note On ones with zero velocity. Note that it helps to compress MIDI data in the case of UseRunningStatus is used only. UseRunningStatus Use 'running status' to turn off writing of the status bytes of consecutive events of the same type."
  },
  "api/Melanchall.DryWetMidi.Core.ChunkTypesCollection.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChunkTypesCollection.html",
    "title": "Class ChunkTypesCollection | DryWetMIDI",
    "keywords": "Class ChunkTypesCollection Collection of ChunkType objects which provide identity information of a chunk. Inheritance Object ChunkTypesCollection Implements IEnumerable < ChunkType > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChunkTypesCollection : IEnumerable<ChunkType>, IEnumerable Methods Add(Type, String) Adds chunk type along with the corresponding ID. Declaration public void Add(Type type, string id) Parameters Type Name Description Type type Type of chunk. String id ID of chunk. Exceptions Type Condition ArgumentNullException type is null. -or- id is null. ArgumentException Chunk type specified by type and id already exists in the ChunksCollection . GetEnumerator() Returns an enumerator that iterates through a collection. Declaration public IEnumerator<ChunkType> GetEnumerator() Returns Type Description IEnumerator < ChunkType > An enumerator that can be used to iterate through the collection. TryGetId(Type, out String) Gets the ID associated with the specified chunk type. Declaration public bool TryGetId(Type type, out string id) Parameters Type Name Description Type type Chunk type to get ID for. String id When this method returns, contains the ID associated with the specified chunk type, if the type is found; otherwise, null. This parameter is passed uninitialized. Returns Type Description Boolean true if the ChunkTypesCollection contains an ID for the specified chunk type; otherwise, false. TryGetType(String, out Type) Gets the chunk type associated with the specified ID. Declaration public bool TryGetType(string id, out Type type) Parameters Type Name Description String id ID of the chunk type to get. Type type When this method returns, contains the chunk type associated with the specified ID, if ID is found; otherwise, null. This parameter is passed uninitialized. Returns Type Description Boolean true if the ChunkTypesCollection contains a chunk type with the specified ID; otherwise, false. Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An enumerator that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Melanchall.DryWetMidi.Composing.Pattern.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.Pattern.html",
    "title": "Class Pattern | DryWetMIDI",
    "keywords": "Class Pattern Represents a musical pattern - set of notes with the specified times and lengths. Inheritance Object Pattern Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Pattern Methods Clone() Clones pattern by creating a copy of it. Declaration public Pattern Clone() Returns Type Description Pattern Copy of the pattern containing all actions from original one. ToFile(TempoMap) Exports the current Pattern to MIDI file using zero channel. Declaration public MidiFile ToFile(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map to process pattern data according with. Returns Type Description MidiFile The MidiFile containing notes events generated by the current Pattern . Exceptions Type Condition ArgumentNullException tempoMap is null. ToFile(TempoMap, FourBitNumber) Exports the current Pattern to MIDI file. Declaration public MidiFile ToFile(TempoMap tempoMap, FourBitNumber channel) Parameters Type Name Description TempoMap tempoMap Tempo map to process pattern data according with. FourBitNumber channel Channel of notes that will be generated by pattern. Returns Type Description MidiFile The MidiFile containing notes events generated by the current Pattern . Exceptions Type Condition ArgumentNullException tempoMap is null. ToTrackChunk(TempoMap) Exports the current Pattern to track chunk using zero channel. Declaration public TrackChunk ToTrackChunk(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map to process pattern data according with. Returns Type Description TrackChunk The TrackChunk containing notes events generated by the current Pattern . Exceptions Type Condition ArgumentNullException tempoMap is null. ToTrackChunk(TempoMap, FourBitNumber) Exports the current Pattern to track chunk. Declaration public TrackChunk ToTrackChunk(TempoMap tempoMap, FourBitNumber channel) Parameters Type Name Description TempoMap tempoMap Tempo map to process pattern data according with. FourBitNumber channel Channel of notes that will be generated by pattern. Returns Type Description TrackChunk The TrackChunk containing notes events generated by the current Pattern . Exceptions Type Condition ArgumentNullException tempoMap is null. Extension Methods PatternUtilities.TransformNotes(Pattern, NoteTransformation, Boolean) PatternUtilities.TransformChords(Pattern, ChordTransformation, Boolean) PatternUtilities.SplitAtAnchor(Pattern, Object, Boolean) PatternUtilities.SplitAtAllAnchors(Pattern, Boolean) PatternUtilities.SplitAtMarker(Pattern, String, Boolean, StringComparison) PatternUtilities.SplitAtAllMarkers(Pattern, Boolean) PlaybackUtilities.GetPlayback(Pattern, TempoMap, FourBitNumber, IOutputDevice, MidiClockSettings) PlaybackUtilities.GetPlayback(Pattern, TempoMap, FourBitNumber, MidiClockSettings) PlaybackUtilities.Play(Pattern, TempoMap, FourBitNumber, IOutputDevice, MidiClockSettings)"
  },
  "api/Melanchall.DryWetMidi.Composing.NoteDescriptor.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.NoteDescriptor.html",
    "title": "Class NoteDescriptor | DryWetMIDI",
    "keywords": "Class NoteDescriptor Represents an object that describes a note. Inheritance Object NoteDescriptor Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteDescriptor Constructors NoteDescriptor(Note, SevenBitNumber, ITimeSpan) Initializes a new instance of the NoteDescriptor with the specified note, velocity and length. Declaration public NoteDescriptor(Note note, SevenBitNumber velocity, ITimeSpan length) Parameters Type Name Description Note note Note. SevenBitNumber velocity Velocity of the note. ITimeSpan length Length of the note. Exceptions Type Condition ArgumentNullException note is null. -or- length is null. Properties Length Gets the length of the note. Declaration public ITimeSpan Length { get; set; } Property Value Type Description ITimeSpan Note Gets the note. Declaration public Note Note { get; } Property Value Type Description Note Velocity Gets the velocity of the note. Declaration public SevenBitNumber Velocity { get; } Property Value Type Description SevenBitNumber Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(NoteDescriptor, NoteDescriptor) Determines if two NoteDescriptor objects are equal. Declaration public static bool operator ==(NoteDescriptor noteDescriptor1, NoteDescriptor noteDescriptor2) Parameters Type Name Description NoteDescriptor noteDescriptor1 The first NoteDescriptor to compare. NoteDescriptor noteDescriptor2 The second NoteDescriptor to compare. Returns Type Description Boolean true if the descriptors are equal, false otherwise. Inequality(NoteDescriptor, NoteDescriptor) Determines if two NoteDescriptor objects are not equal. Declaration public static bool operator !=(NoteDescriptor noteDescriptor1, NoteDescriptor noteDescriptor2) Parameters Type Name Description NoteDescriptor noteDescriptor1 The first NoteDescriptor to compare. NoteDescriptor noteDescriptor2 The second NoteDescriptor to compare. Returns Type Description Boolean false if the descriptors are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.Composing.ChordDescriptor.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.ChordDescriptor.html",
    "title": "Class ChordDescriptor | DryWetMIDI",
    "keywords": "Class ChordDescriptor Represents an object that describes a chord. Inheritance Object ChordDescriptor Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordDescriptor Constructors ChordDescriptor(IEnumerable<Note>, SevenBitNumber, ITimeSpan) Initializes a new instance of the ChordDescriptor with the specified notes, velocity and length. Declaration public ChordDescriptor(IEnumerable<Note> notes, SevenBitNumber velocity, ITimeSpan length) Parameters Type Name Description IEnumerable < Note > notes Notes of the chord. SevenBitNumber velocity Velocity of the chord's notes. ITimeSpan length Length of the chord. Exceptions Type Condition ArgumentNullException notes is null. -or- length is null. Properties Length Gets the length of the chord. Declaration public ITimeSpan Length { get; } Property Value Type Description ITimeSpan Notes Gets the notes of the chord. Declaration public IEnumerable<Note> Notes { get; } Property Value Type Description IEnumerable < Note > Velocity Gets the velocity of the chord. Declaration public SevenBitNumber Velocity { get; } Property Value Type Description SevenBitNumber Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(ChordDescriptor, ChordDescriptor) Determines if two ChordDescriptor objects are equal. Declaration public static bool operator ==(ChordDescriptor chordDescriptor1, ChordDescriptor chordDescriptor2) Parameters Type Name Description ChordDescriptor chordDescriptor1 The first ChordDescriptor to compare. ChordDescriptor chordDescriptor2 The second ChordDescriptor to compare. Returns Type Description Boolean true if the descriptors are equal, false otherwise. Inequality(ChordDescriptor, ChordDescriptor) Determines if two ChordDescriptor objects are not equal. Declaration public static bool operator !=(ChordDescriptor chordDescriptor1, ChordDescriptor chordDescriptor2) Parameters Type Name Description ChordDescriptor chordDescriptor1 The first ChordDescriptor to compare. ChordDescriptor chordDescriptor2 The second ChordDescriptor to compare. Returns Type Description Boolean false if the descriptors are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.Common.SmpteFormat.html": {
    "href": "api/Melanchall.DryWetMidi.Common.SmpteFormat.html",
    "title": "Enum SmpteFormat | DryWetMIDI",
    "keywords": "Enum SmpteFormat SMPTE format which represents the frame rate. Namespace : Melanchall.DryWetMidi.Common Assembly : Melanchall.DryWetMidi.dll Syntax public enum SmpteFormat : byte Fields Name Description Thirty 30 frame/sec. ThirtyDrop 29.97 frame/sec (dropped 30). TwentyFive 25 frame/sec. TwentyFour 24 frame/sec."
  },
  "api/Melanchall.DryWetMidi.Common.DataTypesUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Common.DataTypesUtilities.html",
    "title": "Class DataTypesUtilities | DryWetMIDI",
    "keywords": "Class DataTypesUtilities Internal utilities to manipulate MIDI data types. Inheritance Object DataTypesUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Common Assembly : Melanchall.DryWetMidi.dll Syntax public static class DataTypesUtilities Methods Combine(FourBitNumber, FourBitNumber) Merges two four-bit numbers into one byte. Declaration public static byte Combine(FourBitNumber head, FourBitNumber tail) Parameters Type Name Description FourBitNumber head FourBitNumber representing left part of resulting number. FourBitNumber tail FourBitNumber representing right part of resulting number. Returns Type Description Byte Single byte made of four-bit halfs. Combine(SevenBitNumber, SevenBitNumber) Merges two seven-bit numbers into one 16-bit unsigned integer number. Declaration public static ushort Combine(SevenBitNumber head, SevenBitNumber tail) Parameters Type Name Description SevenBitNumber head SevenBitNumber representing left part of resulting number. SevenBitNumber tail SevenBitNumber representing right part of resulting number. Returns Type Description UInt16 Single unsigned 16-bit integer number made of seven-bit halfs. Combine(SevenBitNumber, SevenBitNumber, SevenBitNumber) Merges three seven-bit numbers into one 32-bit unsigned integer number. Declaration public static uint Combine(SevenBitNumber head, SevenBitNumber middle, SevenBitNumber tail) Parameters Type Name Description SevenBitNumber head SevenBitNumber representing left part of resulting number. SevenBitNumber middle SevenBitNumber representing middle part of resulting number. SevenBitNumber tail SevenBitNumber representing right part of resulting number. Returns Type Description UInt32 Single unsigned 32-bit integer number made of seven-bit halfs. Combine(Byte, Byte) Merges two signed bytes into one 16-bit signed integer number. Declaration public static ushort Combine(byte head, byte tail) Parameters Type Name Description Byte head Byte representing left part of resulting number. Byte tail Byte representing right part of resulting number. Returns Type Description UInt16 Single signed 16-bit integer number made of byte halfs. Combine(UInt16, UInt16) Merges two unsigned 16-bit numbers into one 32-bit unsigned integer number. Declaration public static uint Combine(ushort head, ushort tail) Parameters Type Name Description UInt16 head 16-bit unsigned number representing left part of resulting number. UInt16 tail 16-bit unsigned number representing right part of resulting number. Returns Type Description UInt32 Single 32-bit unsigned integer number made of 16-bit unsigned integer halfs. GetFirstByte(Int32) Extracts first byte (leftmost) of signed 32-bit integer number. Declaration public static byte GetFirstByte(this int number) Parameters Type Name Description Int32 number Number to extract first byte of. Returns Type Description Byte First byte of number . GetFourthByte(Int32) Extracts fourth byte (rightmost) of signed 32-bit integer number. Declaration public static byte GetFourthByte(this int number) Parameters Type Name Description Int32 number Number to extract fourth byte of. Returns Type Description Byte Fourth byte of number . GetHead(Byte) Extracts left four-bit part of a byte. Declaration public static FourBitNumber GetHead(this byte number) Parameters Type Name Description Byte number Byte to extract left part of. Returns Type Description FourBitNumber FourBitNumber representing the left part of number . GetHead(Int16) Extracts left eight-bit part of an signed 16-bit integer number. Declaration public static byte GetHead(this short number) Parameters Type Name Description Int16 number Number to extract left part of. Returns Type Description Byte Byte representing the left part of number . GetHead(UInt16) Extracts left seven-bit part of an unsigned 16-bit integer number. Declaration public static SevenBitNumber GetHead(this ushort number) Parameters Type Name Description UInt16 number Number to extract left part of. Returns Type Description SevenBitNumber SevenBitNumber representing the left part of number . GetHead(UInt32) Extracts left 16-bit part of an unsigned 32-bit integer number. Declaration public static ushort GetHead(this uint number) Parameters Type Name Description UInt32 number Number to extract left part of. Returns Type Description UInt16 16-bit unsigned integer number representing the left part of number . GetSecondByte(Int32) Extracts second byte (starting from left) of signed 32-bit integer number. Declaration public static byte GetSecondByte(this int number) Parameters Type Name Description Int32 number Number to extract second byte of. Returns Type Description Byte Second byte of number . GetTail(Byte) Extracts right four-bit part of a byte. Declaration public static FourBitNumber GetTail(this byte number) Parameters Type Name Description Byte number Byte to extract right part of. Returns Type Description FourBitNumber FourBitNumber representing the right part of number . GetTail(Int16) Extracts right eight-bit part of an unsigned 16-bit integer number. Declaration public static byte GetTail(this short number) Parameters Type Name Description Int16 number Number to extract right part of. Returns Type Description Byte Byte representing the right part of number . GetTail(UInt16) Extracts right seven-bit part of an unsigned 16-bit integer number. Declaration public static SevenBitNumber GetTail(this ushort number) Parameters Type Name Description UInt16 number Number to extract right part of. Returns Type Description SevenBitNumber SevenBitNumber representing the right part of number . GetTail(UInt32) Extracts right 16-bit part of an unsigned 32-bit integer number. Declaration public static ushort GetTail(this uint number) Parameters Type Name Description UInt32 number Number to extract right part of. Returns Type Description UInt16 16-bit unsigned integer number representing the right part of number . GetThirdByte(Int32) Extracts third byte (starting from left) of signed 32-bit integer number. Declaration public static byte GetThirdByte(this int number) Parameters Type Name Description Int32 number Number to extract third byte of. Returns Type Description Byte Third byte of number . GetVlqBytes(Int32) Gets bytes of a number in variable-length quantity (VLQ) format. Declaration public static byte[] GetVlqBytes(this int number) Parameters Type Name Description Int32 number Number to get VLQ bytes for. Returns Type Description Byte [] Bytes representing the number coded in VLQ. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte. GetVlqBytes(Int64) Gets bytes of a number in variable-length quantity (VLQ) format. Declaration public static byte[] GetVlqBytes(this long number) Parameters Type Name Description Int64 number Number to get VLQ bytes for. Returns Type Description Byte [] Bytes representing the number coded in VLQ. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte. GetVlqLength(Int32) Gets length of variable-length quantity (VLQ) representation of an integer number. Declaration public static int GetVlqLength(this int number) Parameters Type Name Description Int32 number Number to calculate VLQ length for. Returns Type Description Int32 Bytes count required to represent the number in VLQ. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte. GetVlqLength(Int64) Gets length of variable-length quantity (VLQ) representation of an integer number. Declaration public static int GetVlqLength(this long number) Parameters Type Name Description Int64 number Number to calculate VLQ length for. Returns Type Description Int32 Bytes count required to represent the number in VLQ. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte."
  },
  "api/Melanchall.DryWetMidi.Tools.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.html",
    "title": "Namespace Melanchall.DryWetMidi.Tools | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Tools Classes ChordsQuantizer Provides methods to quantize chords time. ChordsQuantizerUtilities Provides methods to quantize chords time. ChordsQuantizingSettings Settings according to which chords should be quantized. ChordsRandomizer Provides methods to randomize chords time. ChordsRandomizerUtilities Provides methods to randomize chords time. ChordsRandomizingSettings Settings according to which chords should be randomized. ChordsSplitter Provides methods for splitting chords. ChordsSplitterUtilities Provides methods for splitting chords. ConstantBounds Time range which is constant for each object to be processed. CsvConverter Provides methods to convert MIDI objects to CSV representation and vice versa. LengthedObjectsQuantizer<TObject, TSettings> Provides methods to quantize lengthed objects time. LengthedObjectsQuantizingSettings<TObject> Settings according to which lengthed objects should be quantized. LengthedObjectsRandomizer<TObject, TSettings> Provides methods to randomize lengthed objects time. LengthedObjectsRandomizingSettings<TObject> Settings according to which lengthed objects should be randomized. LengthedObjectsSplitter<TObject> Provides methods for splitting lengthed objects. MidiFileCsvConversionSettings Settings according to which MidiFile must be read from or written to CSV representation. MidiFileSplitter Provides methods to split a MIDI file. NoteCsvConversionSettings Settings according to which instances of the Note must be read from or written to CSV representation. NotesMerger Provides methods to merge nearby notes. NotesMergerUtilities Provides methods to merge nearby notes. NotesMergingSettings Settings according to which nearby notes should be merged. NotesQuantizer Provides methods to quantize notes time. NotesQuantizerUtilities Provides methods to quantize notes time. NotesQuantizingSettings Settings according to which notes should be quantized. NotesRandomizer Provides methods to randomize notes time. NotesRandomizerUtilities Provides methods to randomize notes time. NotesRandomizingSettings Settings according to which notes should be randomized. NotesSplitter Provides methods for splitting notes. NotesSplitterUtilities Provides methods for splitting notes. QuantizedTime Holds information about new time for an object that was calculated during quantizing. Quantizer<TObject, TSettings> Provides methods to quantize objects time. QuantizingSettings<TObject> Settings according to which quantizing should be performed. Randomizer<TObject, TSettings> Provides methods to randomize objects time. RandomizingSettings<TObject> Settings according to which objects should be randomized. SliceMidiFileSettings Settings according to which a MidiFile should be splitted. TimedEventsQuantizer Provides methods to quantize timed events time. TimedEventsQuantizerUtilities Provides methods to quantize timed events time. TimedEventsQuantizingSettings Settings according to which timed events should be quantized. TimedEventsRandomizer Provides methods to randomize timed events time. TimedEventsRandomizerUtilities Provides methods to randomize timed events time. TimedEventsRandomizingSettings Settings according to which timed events should be randomized. TimeProcessingInstruction Holds the new time that will be set to an object is being processed and action indicating whether quantizing should be cancelled or not. Interfaces IBounds Represents time range used in time processing tools. Enums LengthedObjectTarget Target of an object that should be processed by a tool. MidiFileCsvLayout Layout (format) of CSV data representing a MIDI file. The default value is DryWetMidi . NoteFormat The format which should be used to write notes to or read them from CSV. NoteNumberFormat Defines how a note's number is presented in CSV representation: either a number or a letter (for example, A#5). QuantizingBeyondFixedEndPolicy Policy which defines how a quantizer should act in case of object's side is going to be moved beyond an opposite one that is fixed. The default value is CollapseAndFix . QuantizingBeyondZeroPolicy Policy which defines how a quantizer should act in case of an object is going to be moved beyond zero. The default value is FixAtZero . TimeProcessingAction Indicates whether an object is being processed should be skipped or not. The default value is Apply . VelocityMergingPolicy Determines how velocities should be merged during notes merging. The default value is First ."
  },
  "api/Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.html",
    "title": "Enum VelocityMergingPolicy | DryWetMIDI",
    "keywords": "Enum VelocityMergingPolicy Determines how velocities should be merged during notes merging. The default value is First . Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum VelocityMergingPolicy Fields Name Description Average Take average velocity. First Take velocity of first note. Last Take velocity of last note. Max Take maximum velocity. Min Take minimum velocity."
  },
  "api/Melanchall.DryWetMidi.Tools.TimeProcessingInstruction.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimeProcessingInstruction.html",
    "title": "Class TimeProcessingInstruction | DryWetMIDI",
    "keywords": "Class TimeProcessingInstruction Holds the new time that will be set to an object is being processed and action indicating whether quantizing should be cancelled or not. Inheritance Object TimeProcessingInstruction Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimeProcessingInstruction Constructors TimeProcessingInstruction(Int64) Initializes a new instance of the TimeProcessingInstruction with the specified time. This time will be set to an object is being processed. Declaration public TimeProcessingInstruction(long time) Parameters Type Name Description Int64 time The new time of an object. Exceptions Type Condition ArgumentOutOfRangeException time is negative. Fields Skip Indicates that object should be skipped and new time shouldn't be set. Declaration public static readonly TimeProcessingInstruction Skip Field Value Type Description TimeProcessingInstruction Properties Action Gets an action indicating whether processing should be cancelled or not. Declaration public TimeProcessingAction Action { get; } Property Value Type Description TimeProcessingAction Time Gets the new time of an object. Declaration public long Time { get; } Property Value Type Description Int64"
  },
  "api/Melanchall.DryWetMidi.Tools.TimeProcessingAction.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimeProcessingAction.html",
    "title": "Enum TimeProcessingAction | DryWetMIDI",
    "keywords": "Enum TimeProcessingAction Indicates whether an object is being processed should be skipped or not. The default value is Apply . Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum TimeProcessingAction Fields Name Description Apply Set new time to an object. Skip Skip an object and leave its time untouched."
  },
  "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings.html",
    "title": "Class TimedEventsRandomizingSettings | DryWetMIDI",
    "keywords": "Class TimedEventsRandomizingSettings Settings according to which timed events should be randomized. Inheritance Object RandomizingSettings < TimedEvent > TimedEventsRandomizingSettings Inherited Members RandomizingSettings<TimedEvent>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimedEventsRandomizingSettings : RandomizingSettings<TimedEvent>"
  },
  "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizerUtilities.html",
    "title": "Class TimedEventsRandomizerUtilities | DryWetMIDI",
    "keywords": "Class TimedEventsRandomizerUtilities Provides methods to randomize timed events time. Inheritance Object TimedEventsRandomizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class TimedEventsRandomizerUtilities Methods RandomizeTimedEvents(MidiFile, IBounds, TimedEventsRandomizingSettings) Randomizes timed events contained in the specified MidiFile . Declaration public static void RandomizeTimedEvents(this MidiFile midiFile, IBounds bounds, TimedEventsRandomizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to randomize timed events in. IBounds bounds Bounds to randomize time within. TimedEventsRandomizingSettings settings Settings according to which timed events should be randomized. Exceptions Type Condition ArgumentNullException midiFile is null. -or- bounds is null. RandomizeTimedEvents(TrackChunk, IBounds, TempoMap, TimedEventsRandomizingSettings) Randomizes timed events contained in the specified TrackChunk . Declaration public static void RandomizeTimedEvents(this TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to randomize timed events in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. TimedEventsRandomizingSettings settings Settings according to which timed events should be randomized. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- bounds is null. -or- tempoMap is null. RandomizeTimedEvents(IEnumerable<TrackChunk>, IBounds, TempoMap, TimedEventsRandomizingSettings) Randomizes timed events contained in the specified collection of TrackChunk . Declaration public static void RandomizeTimedEvents(this IEnumerable<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to randomize timed events in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. TimedEventsRandomizingSettings settings Settings according to which timed events should be randomized. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- bounds is null. -or- tempoMap is null."
  },
  "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizer.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizer.html",
    "title": "Class TimedEventsRandomizer | DryWetMIDI",
    "keywords": "Class TimedEventsRandomizer Provides methods to randomize timed events time. Inheritance Object Randomizer < TimedEvent , TimedEventsRandomizingSettings > TimedEventsRandomizer Inherited Members Randomizer<TimedEvent, TimedEventsRandomizingSettings>.RandomizeInternal(IEnumerable<TimedEvent>, IBounds, TempoMap, TimedEventsRandomizingSettings) Randomizer<TimedEvent, TimedEventsRandomizingSettings>.GetObjectTime(TimedEvent, TimedEventsRandomizingSettings) Randomizer<TimedEvent, TimedEventsRandomizingSettings>.SetObjectTime(TimedEvent, Int64, TimedEventsRandomizingSettings) Randomizer<TimedEvent, TimedEventsRandomizingSettings>.OnObjectRandomizing(TimedEvent, Int64, TimedEventsRandomizingSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimedEventsRandomizer : Randomizer<TimedEvent, TimedEventsRandomizingSettings> Methods GetObjectTime(TimedEvent, TimedEventsRandomizingSettings) Gets the time of an object that should be randomized. Declaration protected override long GetObjectTime(TimedEvent obj, TimedEventsRandomizingSettings settings) Parameters Type Name Description TimedEvent obj Object to get time of. TimedEventsRandomizingSettings settings Settings according to which the object's time should be gotten. Returns Type Description Int64 The time of obj that should be randomized. Overrides Melanchall.DryWetMidi.Tools.Randomizer<Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings>.GetObjectTime(Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings) OnObjectRandomizing(TimedEvent, Int64, TimedEventsRandomizingSettings) Performs additional actions before the new time will be set to an object. Declaration protected override TimeProcessingInstruction OnObjectRandomizing(TimedEvent obj, long time, TimedEventsRandomizingSettings settings) Parameters Type Name Description TimedEvent obj Object to randomize. Int64 time The new time that is going to be set to the object. Can be changed inside this method. TimedEventsRandomizingSettings settings Settings according to which object should be randomized. Returns Type Description TimeProcessingInstruction An object indicating whether the new time should be set to the object or not. Also returned object contains that new time. Overrides Melanchall.DryWetMidi.Tools.Randomizer<Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings>.OnObjectRandomizing(Melanchall.DryWetMidi.Interaction.TimedEvent, System.Int64, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings) Remarks Inside this method the new time can be changed or randomizing of an object can be cancelled. Randomize(IEnumerable<TimedEvent>, IBounds, TempoMap, TimedEventsRandomizingSettings) Randomizes objects time using the specified bounds and settings. Declaration public void Randomize(IEnumerable<TimedEvent> objects, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings = null) Parameters Type Name Description IEnumerable < TimedEvent > objects Objects to randomize. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. TimedEventsRandomizingSettings settings Settings according to which objects should be randomized. Exceptions Type Condition ArgumentNullException objects is null. -or- bounds is null. -or- tempoMap is null. SetObjectTime(TimedEvent, Int64, TimedEventsRandomizingSettings) Sets the new time of an object. Declaration protected override void SetObjectTime(TimedEvent obj, long time, TimedEventsRandomizingSettings settings) Parameters Type Name Description TimedEvent obj Object to set time for. Int64 time New time after randomizing. TimedEventsRandomizingSettings settings Settings according to which the object's time should be set. Overrides Melanchall.DryWetMidi.Tools.Randomizer<Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings>.SetObjectTime(Melanchall.DryWetMidi.Interaction.TimedEvent, System.Int64, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings)"
  },
  "api/Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings.html",
    "title": "Class TimedEventsQuantizingSettings | DryWetMIDI",
    "keywords": "Class TimedEventsQuantizingSettings Settings according to which timed events should be quantized. Inheritance Object QuantizingSettings < TimedEvent > TimedEventsQuantizingSettings Inherited Members QuantizingSettings<TimedEvent>.DistanceCalculationType QuantizingSettings<TimedEvent>.QuantizingLevel QuantizingSettings<TimedEvent>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public class TimedEventsQuantizingSettings : QuantizingSettings<TimedEvent>"
  },
  "api/Melanchall.DryWetMidi.Tools.TimedEventsQuantizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimedEventsQuantizerUtilities.html",
    "title": "Class TimedEventsQuantizerUtilities | DryWetMIDI",
    "keywords": "Class TimedEventsQuantizerUtilities Provides methods to quantize timed events time. Inheritance Object TimedEventsQuantizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class TimedEventsQuantizerUtilities Methods QuantizeTimedEvents(MidiFile, IGrid, TimedEventsQuantizingSettings) Quantizes timed events contained in the specified MidiFile . Declaration public static void QuantizeTimedEvents(this MidiFile midiFile, IGrid grid, TimedEventsQuantizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to quantize timed events in. IGrid grid Grid to quantize objects by. TimedEventsQuantizingSettings settings Settings according to which timed events should be quantized. Exceptions Type Condition ArgumentNullException midiFile is null. -or- grid is null. QuantizeTimedEvents(TrackChunk, IGrid, TempoMap, TimedEventsQuantizingSettings) Quantizes timed events contained in the specified TrackChunk . Declaration public static void QuantizeTimedEvents(this TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to quantize timed events in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. TimedEventsQuantizingSettings settings Settings according to which timed events should be quantized. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- grid is null. -or- tempoMap is null. QuantizeTimedEvents(IEnumerable<TrackChunk>, IGrid, TempoMap, TimedEventsQuantizingSettings) Quantizes timed events contained in the specified collection of TrackChunk . Declaration public static void QuantizeTimedEvents(this IEnumerable<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to quantize timed events in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. TimedEventsQuantizingSettings settings Settings according to which timed events should be quantized. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- grid is null. -or- tempoMap is null."
  },
  "api/Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.html",
    "title": "Enum MidiFileCsvLayout | DryWetMIDI",
    "keywords": "Enum MidiFileCsvLayout Layout (format) of CSV data representing a MIDI file. The default value is DryWetMidi . Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum MidiFileCsvLayout Fields Name Description DryWetMidi Format used by DryWetMIDI which gives more compact and human readable CSV representation. MidiCsv Format used by midicsv (http://www.fourmilab.ch/webtools/midicsv/) program."
  },
  "api/Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.html",
    "title": "Class MidiFileCsvConversionSettings | DryWetMIDI",
    "keywords": "Class MidiFileCsvConversionSettings Settings according to which MidiFile must be read from or written to CSV representation. Inheritance Object MidiFileCsvConversionSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiFileCsvConversionSettings Properties CsvDelimiter Gets or sets delimiter used to separate values in CSV representation. The default value is comma. Declaration public char CsvDelimiter { get; set; } Property Value Type Description Char CsvLayout Gets or sets layout of CSV representation of MidiFile . The default value is DryWetMidi . Declaration public MidiFileCsvLayout CsvLayout { get; set; } Property Value Type Description MidiFileCsvLayout Remarks At now there are two layouts: DryWetMidi and MidiCsv which produces slightly different CSV representations. The default value is DryWetMidi that gives more compact and more human readable CSV data. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. NoteFormat Gets or sets the format which should be used to write notes to or read them from CSV. The default value is Events . Declaration public NoteFormat NoteFormat { get; set; } Property Value Type Description NoteFormat Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. NoteLengthType Gets or sets the type of a note length (metric, bar/beat and so on) which should be used to write to or read from CSV. The default value is Midi . Declaration public TimeSpanType NoteLengthType { get; set; } Property Value Type Description TimeSpanType Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. NoteNumberFormat Gets or sets the format which should be used to write a note's number to or read it from CSV. The default value is NoteNumber . Declaration public NoteNumberFormat NoteNumberFormat { get; set; } Property Value Type Description NoteNumberFormat Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. TimeType Gets or sets format of timestamps inside CSV representation. The default value is Midi Declaration public TimeSpanType TimeType { get; set; } Property Value Type Description TimeSpanType Remarks Note that it is recommended to use Midi if you use MidiCsv CSV layout to ensure produced CSV data can be read by other readers that supports format used by midicsv (http://www.fourmilab.ch/webtools/midicsv/) program. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Tools.LengthedObjectTarget.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.LengthedObjectTarget.html",
    "title": "Enum LengthedObjectTarget | DryWetMIDI",
    "keywords": "Enum LengthedObjectTarget Target of an object that should be processed by a tool. Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum LengthedObjectTarget Fields Name Description End End time of a lengthed object. Start Start time of a lengthed object."
  },
  "api/Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter-1.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter-1.html",
    "title": "Class LengthedObjectsSplitter<TObject> | DryWetMIDI",
    "keywords": "Class LengthedObjectsSplitter<TObject> Provides methods for splitting lengthed objects. Inheritance Object LengthedObjectsSplitter<TObject> ChordsSplitter NotesSplitter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class LengthedObjectsSplitter<TObject> where TObject : ILengthedObject Type Parameters Name Description TObject The type of objects to split. Methods CloneObject(TObject) Clones an object by creating a copy of it. Declaration protected abstract TObject CloneObject(TObject obj) Parameters Type Name Description TObject obj Object to clone. Returns Type Description TObject Copy of the obj . SplitAtDistance(IEnumerable<TObject>, ITimeSpan, LengthedObjectTarget, TempoMap) Splits objects at the specified distance from an object's start or end. Declaration public IEnumerable<TObject> SplitAtDistance(IEnumerable<TObject> objects, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap) Parameters Type Name Description IEnumerable <TObject> objects Objects to split. ITimeSpan distance Distance to split objects at. LengthedObjectTarget from Point of an object distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Returns Type Description IEnumerable <TObject> Objects that are result of splitting objects going in the same order as elements of objects . Exceptions Type Condition ArgumentNullException objects is null. -or- distance is null. -or- tempoMap is null. InvalidEnumArgumentException from specified an invalid value. SplitAtDistance(IEnumerable<TObject>, Double, TimeSpanType, LengthedObjectTarget, TempoMap) Splits objects by the specified ratio of an object's length measuring it from the object's start or end. For example, 0.5 means splitting at the center of an object. Declaration public IEnumerable<TObject> SplitAtDistance(IEnumerable<TObject> objects, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap) Parameters Type Name Description IEnumerable <TObject> objects Objects to split. Double ratio Ratio of an object's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type an object's length should be processed according to. LengthedObjectTarget from Point of an object distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Returns Type Description IEnumerable <TObject> Objects that are result of splitting objects going in the same order as elements of objects . Exceptions Type Condition ArgumentNullException objects is null. -or- tempoMap is null. ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException lengthType specified an invalid value. -or- from specified an invalid value. SplitByGrid(IEnumerable<TObject>, IGrid, TempoMap) Splits objects by the specified grid. Declaration public IEnumerable<TObject> SplitByGrid(IEnumerable<TObject> objects, IGrid grid, TempoMap tempoMap) Parameters Type Name Description IEnumerable <TObject> objects Objects to split. IGrid grid Grid to split objects by. TempoMap tempoMap Tempo map used to calculate times to split by. Returns Type Description IEnumerable <TObject> Objects that are result of splitting objects going in the same order as elements of objects . Remarks Nulls will not be splitted and will be returned as nulls. Exceptions Type Condition ArgumentNullException objects is null. -or- grid is null. -or- tempoMap is null. SplitByPartsNumber(IEnumerable<TObject>, Int32, TimeSpanType, TempoMap) Splits objects into the specified number of parts of the equal length. Declaration public IEnumerable<TObject> SplitByPartsNumber(IEnumerable<TObject> objects, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap) Parameters Type Name Description IEnumerable <TObject> objects Objects to split. Int32 partsNumber The number of parts to split objects into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. Returns Type Description IEnumerable <TObject> Objects that are result of splitting objects going in the same order as elements of objects . Remarks Nulls will not be splitted and will be returned as nulls. If an object has zero length, it will be splitted into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException objects is null. -or- tempoMap is null. ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitByStep(IEnumerable<TObject>, ITimeSpan, TempoMap) Splits objects by the specified step so every object will be splitted at points equally distanced from each other starting from the object's start time. Declaration public IEnumerable<TObject> SplitByStep(IEnumerable<TObject> objects, ITimeSpan step, TempoMap tempoMap) Parameters Type Name Description IEnumerable <TObject> objects Objects to split. ITimeSpan step Step to split objects by. TempoMap tempoMap Tempo map used to calculate times to split by. Returns Type Description IEnumerable <TObject> Objects that are result of splitting objects going in the same order as elements of objects . Remarks Nulls, objects with zero length and objects with length smaller than step will not be splitted and will be returned as clones of the input objects. Exceptions Type Condition ArgumentNullException objects is null. -or- step is null. -or- tempoMap is null. SplitObject(TObject, Int64) Splits an object by the specified time. Declaration protected abstract SplittedLengthedObject<TObject> SplitObject(TObject obj, long time) Parameters Type Name Description TObject obj Object to split. Int64 time Time to split obj by. Returns Type Description SplittedLengthedObject <TObject> An object containing left and right parts of the splitted object."
  },
  "api/Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizingSettings-1.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizingSettings-1.html",
    "title": "Class LengthedObjectsRandomizingSettings<TObject> | DryWetMIDI",
    "keywords": "Class LengthedObjectsRandomizingSettings<TObject> Settings according to which lengthed objects should be randomized. Inheritance Object RandomizingSettings <TObject> LengthedObjectsRandomizingSettings<TObject> ChordsRandomizingSettings NotesRandomizingSettings Inherited Members RandomizingSettings<TObject>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class LengthedObjectsRandomizingSettings<TObject> : RandomizingSettings<TObject> where TObject : ILengthedObject Type Parameters Name Description TObject Properties FixOppositeEnd Gets or sets a value indicating whether an opposite side of an object should be fixed or not. The default value is false. Declaration public bool FixOppositeEnd { get; set; } Property Value Type Description Boolean Remarks When an object's side is fixed the length can be changed during randomizing. RandomizingTarget Gets or sets the side of an object that should be randomized. The default value is Start . Declaration public LengthedObjectTarget RandomizingTarget { get; set; } Property Value Type Description LengthedObjectTarget Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer-2.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer-2.html",
    "title": "Class LengthedObjectsRandomizer<TObject, TSettings> | DryWetMIDI",
    "keywords": "Class LengthedObjectsRandomizer<TObject, TSettings> Provides methods to randomize lengthed objects time. Inheritance Object Randomizer <TObject, TSettings> LengthedObjectsRandomizer<TObject, TSettings> ChordsRandomizer NotesRandomizer Inherited Members Randomizer<TObject, TSettings>.RandomizeInternal(IEnumerable<TObject>, IBounds, TempoMap, TSettings) Randomizer<TObject, TSettings>.GetObjectTime(TObject, TSettings) Randomizer<TObject, TSettings>.SetObjectTime(TObject, Int64, TSettings) Randomizer<TObject, TSettings>.OnObjectRandomizing(TObject, Int64, TSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class LengthedObjectsRandomizer<TObject, TSettings> : Randomizer<TObject, TSettings> where TObject : ILengthedObject where TSettings : LengthedObjectsRandomizingSettings<TObject>, new() Type Parameters Name Description TObject The type of objects to quantize. TSettings The type of quantizer's settings. Methods GetObjectTime(TObject, TSettings) Gets the time of an object that should be randomized. Declaration protected override sealed long GetObjectTime(TObject obj, TSettings settings) Parameters Type Name Description TObject obj Object to get time of. TSettings settings Settings according to which the object's time should be gotten. Returns Type Description Int64 The time of obj that should be randomized. Overrides Melanchall.DryWetMidi.Tools.Randomizer<TObject, TSettings>.GetObjectTime(TObject, TSettings) OnObjectRandomizing(TObject, Int64, TSettings) Performs additional actions before the new time will be set to an object. Declaration protected override TimeProcessingInstruction OnObjectRandomizing(TObject obj, long time, TSettings settings) Parameters Type Name Description TObject obj Object to randomize. Int64 time The new time that is going to be set to the object. Can be changed inside this method. TSettings settings Settings according to which object should be randomized. Returns Type Description TimeProcessingInstruction An object indicating whether the new time should be set to the object or not. Also returned object contains that new time. Overrides Melanchall.DryWetMidi.Tools.Randomizer<TObject, TSettings>.OnObjectRandomizing(TObject, System.Int64, TSettings) Remarks Inside this method the new time can be changed or randomizing of an object can be cancelled. Randomize(IEnumerable<TObject>, IBounds, TempoMap, TSettings) Randomizes objects time using the specified bounds and settings. Declaration public void Randomize(IEnumerable<TObject> objects, IBounds bounds, TempoMap tempoMap, TSettings settings = null) Parameters Type Name Description IEnumerable <TObject> objects Objects to randomize. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. TSettings settings Settings according to which objects should be randomized. Exceptions Type Condition ArgumentNullException objects is null. -or- bounds is null. -or- tempoMap is null. SetObjectTime(TObject, Int64, TSettings) Sets the new time of an object. Declaration protected override sealed void SetObjectTime(TObject obj, long time, TSettings settings) Parameters Type Name Description TObject obj Object to set time for. Int64 time New time after randomizing. TSettings settings Settings according to which the object's time should be set. Overrides Melanchall.DryWetMidi.Tools.Randomizer<TObject, TSettings>.SetObjectTime(TObject, System.Int64, TSettings)"
  },
  "api/Melanchall.DryWetMidi.Interaction.NotesManagingUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NotesManagingUtilities.html",
    "title": "Class NotesManagingUtilities | DryWetMIDI",
    "keywords": "Class NotesManagingUtilities Extension methods for notes managing. Inheritance Object NotesManagingUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class NotesManagingUtilities Methods AddNotes(EventsCollection, IEnumerable<Note>) Adds collection of notes to the specified EventsCollection . Declaration public static void AddNotes(this EventsCollection eventsCollection, IEnumerable<Note> notes) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to add notes to. IEnumerable < Note > notes Notes to add to the eventsCollection . Exceptions Type Condition ArgumentNullException eventsCollection is null. -or- notes is null. AddNotes(TrackChunk, IEnumerable<Note>) Adds collection of notes to the specified TrackChunk . Declaration public static void AddNotes(this TrackChunk trackChunk, IEnumerable<Note> notes) Parameters Type Name Description TrackChunk trackChunk TrackChunk to add notes to. IEnumerable < Note > notes Notes to add to the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null. -or- notes is null. GetMusicTheoryNote(Note) Declaration public static Note GetMusicTheoryNote(this Note note) Parameters Type Name Description Note note Returns Type Description Note GetNotes(EventsCollection) Gets notes contained in the specified EventsCollection . Declaration public static IEnumerable<Note> GetNotes(this EventsCollection eventsCollection) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for notes. Returns Type Description IEnumerable < Note > Collection of notes contained in eventsCollection ordered by time. Exceptions Type Condition ArgumentNullException eventsCollection is null. GetNotes(MidiFile) Gets notes contained in the specified MidiFile . Declaration public static IEnumerable<Note> GetNotes(this MidiFile file) Parameters Type Name Description MidiFile file MidiFile to search for notes. Returns Type Description IEnumerable < Note > Collection of notes contained in file ordered by time. Exceptions Type Condition ArgumentNullException file is null. GetNotes(TrackChunk) Gets notes contained in the specified TrackChunk . Declaration public static IEnumerable<Note> GetNotes(this TrackChunk trackChunk) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for notes. Returns Type Description IEnumerable < Note > Collection of notes contained in trackChunk ordered by time. Exceptions Type Condition ArgumentNullException trackChunk is null. GetNotes(IEnumerable<MidiEvent>) Gets notes contained in the specified collection of MidiEvent . Declaration public static IEnumerable<Note> GetNotes(this IEnumerable<MidiEvent> events) Parameters Type Name Description IEnumerable < MidiEvent > events Collection of MidiFile to search for notes. Returns Type Description IEnumerable < Note > Collection of notes contained in events ordered by time. Exceptions Type Condition ArgumentNullException events is null. GetNotes(IEnumerable<TrackChunk>) Gets notes contained in the specified collection of TrackChunk . Declaration public static IEnumerable<Note> GetNotes(this IEnumerable<TrackChunk> trackChunks) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Track chunks to search for notes. Returns Type Description IEnumerable < Note > Collection of notes contained in trackChunks ordered by time. Exceptions Type Condition ArgumentNullException trackChunks is null. ManageNotes(EventsCollection, Comparison<MidiEvent>) Creates an instance of the NotesManager initializing it with the specified events collection and comparison delegate for events that have same time. Declaration public static NotesManager ManageNotes(this EventsCollection eventsCollection, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds notes to manage. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Returns Type Description NotesManager An instance of the NotesManager that can be used to manage notes represented by the eventsCollection . Exceptions Type Condition ArgumentNullException eventsCollection is null. ManageNotes(TrackChunk, Comparison<MidiEvent>) Creates an instance of the NotesManager initializing it with the events collection of the specified track chunk and comparison delegate for events that have same time. Declaration public static NotesManager ManageNotes(this TrackChunk trackChunk, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk that holds notes to manage. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Returns Type Description NotesManager An instance of the NotesManager that can be used to manage notes represented by the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null. ProcessNotes(EventsCollection, Action<Note>, Predicate<Note>) Performs the specified action on each Note contained in the EventsCollection . Declaration public static void ProcessNotes(this EventsCollection eventsCollection, Action<Note> action, Predicate<Note> match = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for notes to process. Action < Note > action The action to perform on each Note contained in the eventsCollection . Predicate < Note > match The predicate that defines the conditions of the Note to process. Exceptions Type Condition ArgumentNullException eventsCollection is null. -or- action is null. ProcessNotes(MidiFile, Action<Note>, Predicate<Note>) Performs the specified action on each Note contained in the MidiFile . Declaration public static void ProcessNotes(this MidiFile file, Action<Note> action, Predicate<Note> match = null) Parameters Type Name Description MidiFile file MidiFile to search for notes to process. Action < Note > action The action to perform on each Note contained in the file . Predicate < Note > match The predicate that defines the conditions of the Note to process. Exceptions Type Condition ArgumentNullException file is null. -or- action is null. ProcessNotes(TrackChunk, Action<Note>, Predicate<Note>) Performs the specified action on each Note contained in the TrackChunk . Declaration public static void ProcessNotes(this TrackChunk trackChunk, Action<Note> action, Predicate<Note> match = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for notes to process. Action < Note > action The action to perform on each Note contained in the trackChunk . Predicate < Note > match The predicate that defines the conditions of the Note to process. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- action is null. ProcessNotes(IEnumerable<TrackChunk>, Action<Note>, Predicate<Note>) Performs the specified action on each Note contained in the collection of TrackChunk . Declaration public static void ProcessNotes(this IEnumerable<TrackChunk> trackChunks, Action<Note> action, Predicate<Note> match = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for notes to process. Action < Note > action The action to perform on each Note contained in the trackChunks . Predicate < Note > match The predicate that defines the conditions of the Note to process. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- action is null. RemoveNotes(EventsCollection, Predicate<Note>) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static void RemoveNotes(this EventsCollection eventsCollection, Predicate<Note> match = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for notes to remove. Predicate < Note > match The predicate that defines the conditions of the Note to remove. Exceptions Type Condition ArgumentNullException eventsCollection is null. RemoveNotes(MidiFile, Predicate<Note>) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static void RemoveNotes(this MidiFile file, Predicate<Note> match = null) Parameters Type Name Description MidiFile file MidiFile to search for notes to remove. Predicate < Note > match The predicate that defines the conditions of the Note to remove. Exceptions Type Condition ArgumentNullException file is null. RemoveNotes(TrackChunk, Predicate<Note>) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static void RemoveNotes(this TrackChunk trackChunk, Predicate<Note> match = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for notes to remove. Predicate < Note > match The predicate that defines the conditions of the Note to remove. Exceptions Type Condition ArgumentNullException trackChunk is null. RemoveNotes(IEnumerable<TrackChunk>, Predicate<Note>) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static void RemoveNotes(this IEnumerable<TrackChunk> trackChunks, Predicate<Note> match = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for notes to remove. Predicate < Note > match The predicate that defines the conditions of the Note to remove. Exceptions Type Condition ArgumentNullException trackChunks is null. SetTimeAndLength(Note, ITimeSpan, ITimeSpan, TempoMap) Sets time and length of the specified note. Declaration public static Note SetTimeAndLength(this Note note, ITimeSpan time, ITimeSpan length, TempoMap tempoMap) Parameters Type Name Description Note note Note to set time and length to. ITimeSpan time Time to set to note . ITimeSpan length Length to set to note . TempoMap tempoMap Tempo map that will be used for time and length conversion. Returns Type Description Note An input note with new time and length. Exceptions Type Condition ArgumentNullException note is null. -or- time is null. -or- length is null. -or- tempoMap is null. ToFile(IEnumerable<Note>) Creates a MIDI file with the specified notes. Declaration public static MidiFile ToFile(this IEnumerable<Note> notes) Parameters Type Name Description IEnumerable < Note > notes Collection of notes to create a MIDI file. Returns Type Description MidiFile MidiFile containing the specified notes. Exceptions Type Condition ArgumentNullException notes is null. ToTrackChunk(IEnumerable<Note>) Creates a track chunk with the specified notes. Declaration public static TrackChunk ToTrackChunk(this IEnumerable<Note> notes) Parameters Type Name Description IEnumerable < Note > notes Collection of notes to create a track chunk. Returns Type Description TrackChunk TrackChunk containing the specified notes. Exceptions Type Condition ArgumentNullException notes is null."
  },
  "api/Melanchall.DryWetMidi.Interaction.NotesManager.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NotesManager.html",
    "title": "Class NotesManager | DryWetMIDI",
    "keywords": "Class NotesManager Provides a way to manage notes of a MIDI file. Inheritance Object NotesManager Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotesManager : IDisposable Remarks This manager is wrapper for the TimedEventsManager that provides easy manipulation of NoteOnEvent and NoteOffEvent events through the Note objects. To start manage notes you need to get an instance of the NotesManager . To finish managing you need to call the SaveChanges() or Dispose() method. Since the manager implements IDisposable it is recommended to manage notes within using block. Constructors NotesManager(EventsCollection, Comparison<MidiEvent>) Initializes a new instance of the NotesManager with the specified events collection and comparison delegate for events that have same time. Declaration public NotesManager(EventsCollection eventsCollection, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds note events to manage. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Remarks If the sameTimeEventsComparison is not specified events with the same time will be placed into the underlying events collection in order of adding them through the manager. If you want to specify custom order of such events you need to specify appropriate comparison delegate. Exceptions Type Condition ArgumentNullException eventsCollection is null. Properties Notes Gets the NotesCollection with all notes managed by the current NotesManager . Declaration public NotesCollection Notes { get; } Property Value Type Description NotesCollection Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() SaveChanges() Saves all notes that were managed with the current NotesManager updating underlying events collection. Declaration public void SaveChanges() Remarks This method will rewrite content of the events collection was used to construct the current NotesManager with events were managed by this manager. Also all delta-times of wrapped events will be recalculated according to the Time and Length . Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Interaction.NotesCollectionChangedEventHandler.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NotesCollectionChangedEventHandler.html",
    "title": "Delegate NotesCollectionChangedEventHandler | DryWetMIDI",
    "keywords": "Delegate NotesCollectionChangedEventHandler Represents the method that will handle the CollectionChanged event raised when a NotesCollection changed. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public delegate void NotesCollectionChangedEventHandler(NotesCollection collection, NotesCollectionChangedEventArgs args); Parameters Type Name Description NotesCollection collection NotesCollection that has fired the event. NotesCollectionChangedEventArgs args A NotesCollectionChangedEventArgs that contains the event data."
  },
  "api/Melanchall.DryWetMidi.Interaction.NotesCollectionChangedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NotesCollectionChangedEventArgs.html",
    "title": "Class NotesCollectionChangedEventArgs | DryWetMIDI",
    "keywords": "Class NotesCollectionChangedEventArgs Provides data for the CollectionChanged event. Inheritance Object EventArgs NotesCollectionChangedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotesCollectionChangedEventArgs : EventArgs Constructors NotesCollectionChangedEventArgs(IEnumerable<Note>, IEnumerable<Note>) Initializes a new instance of the NotesCollectionChangedEventArgs class with the specified added notes and removed ones. Declaration public NotesCollectionChangedEventArgs(IEnumerable<Note> addedNotes, IEnumerable<Note> removedNotes) Parameters Type Name Description IEnumerable < Note > addedNotes Notes that were added to a NotesCollection . IEnumerable < Note > removedNotes Notes that were removed from a NotesCollection . Properties AddedNotes Gets notes that were added to a NotesCollection . Declaration public IEnumerable<Note> AddedNotes { get; } Property Value Type Description IEnumerable < Note > RemovedNotes Gets notes that were removed from a NotesCollection . Declaration public IEnumerable<Note> RemovedNotes { get; } Property Value Type Description IEnumerable < Note >"
  },
  "api/Melanchall.DryWetMidi.Interaction.NotesCollection.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NotesCollection.html",
    "title": "Class NotesCollection | DryWetMIDI",
    "keywords": "Class NotesCollection Collection of Note objects. Inheritance Object TimedObjectsCollection < Note > NotesCollection Implements IEnumerable < Note > IEnumerable Inherited Members TimedObjectsCollection<Note>._objects TimedObjectsCollection<Note>.Add(IEnumerable<Note>) TimedObjectsCollection<Note>.Add(Note[]) TimedObjectsCollection<Note>.Remove(IEnumerable<Note>) TimedObjectsCollection<Note>.Remove(Note[]) TimedObjectsCollection<Note>.RemoveAll(Predicate<Note>) TimedObjectsCollection<Note>.Clear() TimedObjectsCollection<Note>.GetEnumerator() TimedObjectsCollection<Note>.IEnumerable.GetEnumerator() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotesCollection : TimedObjectsCollection<Note>, IEnumerable<Note>, IEnumerable Methods OnObjectsAdded(IEnumerable<Note>) Performs an action when objects are added to the collection. Declaration protected override void OnObjectsAdded(IEnumerable<Note> addedObjects) Parameters Type Name Description IEnumerable < Note > addedObjects Collection of added objects. Overrides Melanchall.DryWetMidi.Interaction.TimedObjectsCollection<Melanchall.DryWetMidi.Interaction.Note>.OnObjectsAdded(System.Collections.Generic.IEnumerable<Melanchall.DryWetMidi.Interaction.Note>) OnObjectsRemoved(IEnumerable<Note>) Performs an action when objects are removed from the collection. Declaration protected override void OnObjectsRemoved(IEnumerable<Note> removedObjects) Parameters Type Name Description IEnumerable < Note > removedObjects Collection of removed objects. Overrides Melanchall.DryWetMidi.Interaction.TimedObjectsCollection<Melanchall.DryWetMidi.Interaction.Note>.OnObjectsRemoved(System.Collections.Generic.IEnumerable<Melanchall.DryWetMidi.Interaction.Note>) Events CollectionChanged Occurs when notes collection changes. Declaration public event NotesCollectionChangedEventHandler CollectionChanged Event Type Type Description NotesCollectionChangedEventHandler Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods PlaybackUtilities.GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, SevenBitNumber, MidiClockSettings) PlaybackUtilities.GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidiProgram, MidiClockSettings) PlaybackUtilities.GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidi2Program, MidiClockSettings) PlaybackUtilities.Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, SevenBitNumber, MidiClockSettings) PlaybackUtilities.Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidiProgram, MidiClockSettings) PlaybackUtilities.Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidi2Program, MidiClockSettings) ChordsManagingUtilities.GetChords(IEnumerable<Note>, Int64) LengthedObjectUtilities.StartAtTime<TObject>(IEnumerable<TObject>, Int64) LengthedObjectUtilities.EndAtTime<TObject>(IEnumerable<TObject>, Int64) LengthedObjectUtilities.StartAtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap) LengthedObjectUtilities.EndAtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap) LengthedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, Int64, LengthedObjectPart) LengthedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap, LengthedObjectPart) NotesManagingUtilities.ToTrackChunk(IEnumerable<Note>) NotesManagingUtilities.ToFile(IEnumerable<Note>) GetNotesAndRestsUtilities.GetNotesAndRests(IEnumerable<Note>, RestSeparationPolicy) ResizeNotesUtilities.ResizeNotes(IEnumerable<Note>, ITimeSpan, TimeSpanType, TempoMap) ResizeNotesUtilities.ResizeNotes(IEnumerable<Note>, Double, TimeSpanType, TempoMap) TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, Int64) TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.NoteIdUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NoteIdUtilities.html",
    "title": "Class NoteIdUtilities | DryWetMIDI",
    "keywords": "Class NoteIdUtilities Utilities related to the IDs of musical notes. Inheritance Object NoteIdUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class NoteIdUtilities Methods GetNoteId(NoteEvent) Gets the ID of the specified musical note event. Declaration public static NoteId GetNoteId(this NoteEvent noteEvent) Parameters Type Name Description NoteEvent noteEvent The musical note event for which to get the ID. Returns Type Description NoteId The ID of the specified musical note event. Exceptions Type Condition ArgumentNullException noteEvent is null. GetNoteId(Note) Gets the ID of the specified musical note. Declaration public static NoteId GetNoteId(this Note note) Parameters Type Name Description Note note The musical note for which to get the ID. Returns Type Description NoteId The ID of the specified musical note. Exceptions Type Condition ArgumentNullException note is null."
  },
  "api/Melanchall.DryWetMidi.Interaction.NoteId.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NoteId.html",
    "title": "Class NoteId | DryWetMIDI",
    "keywords": "Class NoteId A class representing the ID of a musical note. Inheritance Object NoteId Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteId Constructors NoteId(FourBitNumber, SevenBitNumber) Initializes a new instance of the NoteId class. Declaration public NoteId(FourBitNumber channel, SevenBitNumber noteNumber) Parameters Type Name Description FourBitNumber channel The audio channel associated with the musical note. SevenBitNumber noteNumber The identification number associated with the musical note. Properties Channel Gets the audio channel associated with the musical note. Declaration public FourBitNumber Channel { get; } Property Value Type Description FourBitNumber NoteNumber Gets the identification number associated with the musical note. Declaration public SevenBitNumber NoteNumber { get; } Property Value Type Description SevenBitNumber Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object against which to compare the current object. Returns Type Description Boolean true if the specified object is equal to the current object; false otherwise. Overrides Object.Equals(Object) GetHashCode() Gets a hash code for the current object. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode()"
  },
  "api/Melanchall.DryWetMidi.Interaction.Note.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.Note.html",
    "title": "Class Note | DryWetMIDI",
    "keywords": "Class Note Represents a musical note. Inheritance Object Note Implements ILengthedObject ITimedObject IMusicalObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Note : ILengthedObject, ITimedObject, IMusicalObject Constructors Note(SevenBitNumber) Initializes a new instance of the Note with the specified note number. Declaration public Note(SevenBitNumber noteNumber) Parameters Type Name Description SevenBitNumber noteNumber Number of the note (60 is middle C). Note(SevenBitNumber, Int64) Initializes a new instance of the Note with the specified note number and length. Declaration public Note(SevenBitNumber noteNumber, long length) Parameters Type Name Description SevenBitNumber noteNumber Number of the note (60 is middle C). Int64 length Length of the note in units defined by time division of a MIDI file. Note(SevenBitNumber, Int64, Int64) Initializes a new instance of the Note with the specified note number, length and absolute time. Declaration public Note(SevenBitNumber noteNumber, long length, long time) Parameters Type Name Description SevenBitNumber noteNumber Number of the note (60 is middle C). Int64 length Length of the note in units defined by time division of a MIDI file. Int64 time Absolute time of the note in units defined by the time division of a MIDI file. Note(NoteName, Int32) Initializes a new instance of the Note with the specified note name and octave. Declaration public Note(NoteName noteName, int octave) Parameters Type Name Description NoteName noteName Name of the note. Int32 octave Number of the octave in scientific pitch notation. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. Note(NoteName, Int32, Int64) Initializes a new instance of the Note with the specified note name, octave and length. Declaration public Note(NoteName noteName, int octave, long length) Parameters Type Name Description NoteName noteName Name of the note. Int32 octave Number of the octave in scientific pitch notation. Int64 length Length of the note in units defined by time division of a MIDI file. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. Note(NoteName, Int32, Int64, Int64) Initializes a new instance of the Note with the specified note name, octave, length and absolute time. Declaration public Note(NoteName noteName, int octave, long length, long time) Parameters Type Name Description NoteName noteName Name of the note. Int32 octave Number of the octave in scientific pitch notation. Int64 length Length of the note in units defined by time division of a MIDI file. Int64 time Absolute time of the note in units defined by the time division of a MIDI file. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. Fields DefaultVelocity Default velocity. Declaration public static readonly SevenBitNumber DefaultVelocity Field Value Type Description SevenBitNumber Properties Channel Gets or sets channel to play the note on. Declaration public FourBitNumber Channel { get; set; } Property Value Type Description FourBitNumber Length Gets length of the note in units defined by the time division of a MIDI file. Declaration public long Length { get; set; } Property Value Type Description Int64 Exceptions Type Condition ArgumentOutOfRangeException Value is negative. NoteName Gets name of the note. Declaration public NoteName NoteName { get; } Property Value Type Description NoteName NoteNumber Gets or sets number of the note (60 is middle C). Declaration public SevenBitNumber NoteNumber { get; set; } Property Value Type Description SevenBitNumber Octave Gets octave of the note. Declaration public int Octave { get; } Property Value Type Description Int32 OffVelocity Gets or sets velocity of the underlying NoteOffEvent . Declaration public SevenBitNumber OffVelocity { get; set; } Property Value Type Description SevenBitNumber Time Gets absolute time of the note in units defined by the time division of a MIDI file. Declaration public long Time { get; set; } Property Value Type Description Int64 Velocity Gets or sets velocity of the underlying NoteOnEvent . Declaration public SevenBitNumber Velocity { get; set; } Property Value Type Description SevenBitNumber Methods Clone() Clones note by creating a copy of it. Declaration public Note Clone() Returns Type Description Note Copy of the note. GetTimedNoteOffEvent() Gets the 'Note Off' timed event of the current note. Declaration public TimedEvent GetTimedNoteOffEvent() Returns Type Description TimedEvent The 'Note Off' timed event of the current note. GetTimedNoteOnEvent() Gets the 'Note On' timed event of the current note. Declaration public TimedEvent GetTimedNoteOnEvent() Returns Type Description TimedEvent The 'Note On' timed event of the current note. SetNoteNameAndOctave(NoteName, Int32) Sets note name and octave for current Note . Declaration public void SetNoteNameAndOctave(NoteName noteName, int octave) Parameters Type Name Description NoteName noteName Name of the note. Int32 octave Number of the octave in scientific pitch notation. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the number of the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. Split(Int64) Splits the current Note by the specified time. Declaration public SplittedLengthedObject<Note> Split(long time) Parameters Type Name Description Int64 time Time to split the note by. Returns Type Description SplittedLengthedObject < Note > An object containing left and right parts of the splitted Note . Both parts are instances of Note too. Remarks If time is less than time of the note, the left part will be null. If time is greater than end time of the note, the right part will be null. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Implements ILengthedObject ITimedObject IMusicalObject Extension Methods LengthedObjectUtilities.LengthAs<TLength>(ILengthedObject, TempoMap) LengthedObjectUtilities.LengthAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.EndTimeAs<TTime>(ILengthedObject, TempoMap) LengthedObjectUtilities.EndTimeAs(ILengthedObject, TimeSpanType, TempoMap) NotesManagingUtilities.SetTimeAndLength(Note, ITimeSpan, ITimeSpan, TempoMap) NotesManagingUtilities.GetMusicTheoryNote(Note) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) NoteIdUtilities.GetNoteId(Note)"
  },
  "api/Melanchall.DryWetMidi.Interaction.MusicalTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MusicalTimeSpan.html",
    "title": "Class MusicalTimeSpan | DryWetMIDI",
    "keywords": "Class MusicalTimeSpan Represents a time span as a fraction of the whole note's length. Inheritance Object MusicalTimeSpan Implements ITimeSpan IComparable IComparable < MusicalTimeSpan > IEquatable < MusicalTimeSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MusicalTimeSpan : ITimeSpan, IComparable, IComparable<MusicalTimeSpan>, IEquatable<MusicalTimeSpan> Constructors MusicalTimeSpan() Initializes a new instance of the MusicalTimeSpan . Declaration public MusicalTimeSpan() MusicalTimeSpan(Int64) Initializes a new instance of the MusicalTimeSpan with the specified fraction of the whole note's length. Declaration public MusicalTimeSpan(long fraction) Parameters Type Name Description Int64 fraction The fraction of the whole note's length. Exceptions Type Condition ArgumentOutOfRangeException fraction is zero or negative. MusicalTimeSpan(Int64, Int64, Boolean) Initializes a new instance of the MusicalTimeSpan with the specified numerator and denominator of the fraction of the whole note's length. Declaration public MusicalTimeSpan(long numerator, long denominator, bool simplify = true) Parameters Type Name Description Int64 numerator The numerator of fraction of the whole note's length. Int64 denominator The denominator of fraction of the whole note's length. Boolean simplify true if the time span should be simplified, false otherwise. Exceptions Type Condition ArgumentOutOfRangeException numerator is negative. -or- denominator is zero or negative. Fields Eighth MusicalTimeSpan that corresponds to the eighth length. Declaration public static readonly MusicalTimeSpan Eighth Field Value Type Description MusicalTimeSpan Half MusicalTimeSpan that corresponds to the half length. Declaration public static readonly MusicalTimeSpan Half Field Value Type Description MusicalTimeSpan Quarter MusicalTimeSpan that corresponds to the quarter length. Declaration public static readonly MusicalTimeSpan Quarter Field Value Type Description MusicalTimeSpan Sixteenth MusicalTimeSpan that corresponds to the sixteenth length. Declaration public static readonly MusicalTimeSpan Sixteenth Field Value Type Description MusicalTimeSpan SixtyFourth MusicalTimeSpan that corresponds to the sixty-fourth length. Declaration public static readonly MusicalTimeSpan SixtyFourth Field Value Type Description MusicalTimeSpan ThirtySecond MusicalTimeSpan that corresponds to the thirty-second length. Declaration public static readonly MusicalTimeSpan ThirtySecond Field Value Type Description MusicalTimeSpan Whole MusicalTimeSpan that corresponds to the whole length. Declaration public static readonly MusicalTimeSpan Whole Field Value Type Description MusicalTimeSpan Properties Denominator Gets the denominator of the current MusicalTimeSpan . Declaration public long Denominator { get; } Property Value Type Description Int64 Numerator Gets the numerator of the current MusicalTimeSpan . Declaration public long Numerator { get; } Property Value Type Description Int64 Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ChangeDenominator(Int64) Changes denominator of the current MusicalTimeSpan . Declaration public MusicalTimeSpan ChangeDenominator(long denominator) Parameters Type Name Description Int64 denominator New denominator. Returns Type Description MusicalTimeSpan An instance of the MusicalTimeSpan which represents the same time span as the original one but with the specified denominator. Exceptions Type Condition ArgumentOutOfRangeException denominator is zero or negative. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(MusicalTimeSpan) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(MusicalTimeSpan other) Parameters Type Name Description MusicalTimeSpan other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions Type Condition ArgumentException obj is not the same type as this instance. Divide(MusicalTimeSpan) Divides the current time span by the specified MusicalTimeSpan returning ration between them. Declaration public double Divide(MusicalTimeSpan timeSpan) Parameters Type Name Description MusicalTimeSpan timeSpan MusicalTimeSpan to divide the current time span by. Returns Type Description Double Rayion between the current MusicalTimeSpan and timeSpan . Exceptions Type Condition ArgumentNullException timeSpan is null. DivideByZeroException timeSpan represents a time span of zero length. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Dotted(Int32) Returns the current MusicalTimeSpan modified by the specified number of dots. Declaration public MusicalTimeSpan Dotted(int dotsCount) Parameters Type Name Description Int32 dotsCount The number of dots to modify the current MusicalTimeSpan . Returns Type Description MusicalTimeSpan The dotted version of the current MusicalTimeSpan . Exceptions Type Condition ArgumentOutOfRangeException dotsCount is negative. DoubleDotted() Returns the current MusicalTimeSpan modified by two dots. Declaration public MusicalTimeSpan DoubleDotted() Returns Type Description MusicalTimeSpan The double dotted version of the current MusicalTimeSpan . Duplet() Returns a duplet based on the current MusicalTimeSpan . Declaration public MusicalTimeSpan Duplet() Returns Type Description MusicalTimeSpan A duplet based on the current MusicalTimeSpan . Equals(MusicalTimeSpan) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MusicalTimeSpan other) Parameters Type Name Description MusicalTimeSpan other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Parse(String) Converts the string representation of a whole note's fraction to its MusicalTimeSpan equivalent. Declaration public static MusicalTimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description MusicalTimeSpan A MusicalTimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. SingleDotted() Returns the current MusicalTimeSpan modified by one dot. Declaration public MusicalTimeSpan SingleDotted() Returns Type Description MusicalTimeSpan The single dotted version of the current MusicalTimeSpan . Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Triplet() Returns a triplet based on the current MusicalTimeSpan . Declaration public MusicalTimeSpan Triplet() Returns Type Description MusicalTimeSpan A triplet based on the current MusicalTimeSpan . TryParse(String, out MusicalTimeSpan) Converts the string representation of a whole note's fraction to its MusicalTimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out MusicalTimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. MusicalTimeSpan timeSpan When this method returns, contains the MusicalTimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Tuplet(Int32, Int32) Returns a tuplet based on the current MusicalTimeSpan . Declaration public MusicalTimeSpan Tuplet(int tupletNotesCount, int tupletSpaceSize) Parameters Type Name Description Int32 tupletNotesCount Notes count of a tuplet to construct. Int32 tupletSpaceSize Space of a tuplet to construct. Returns Type Description MusicalTimeSpan A tuplet based on the current MusicalTimeSpan . Exceptions Type Condition ArgumentOutOfRangeException tupletNotesCount is zero or negative. -or- tupletSpaceSize is zero or negative. Operators Addition(MusicalTimeSpan, MusicalTimeSpan) Adds two specified MusicalTimeSpan instances. Declaration public static MusicalTimeSpan operator +(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to add. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to add. Returns Type Description MusicalTimeSpan An object whose value is the sum of the values of timeSpan1 and timeSpan2 . Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Division(MusicalTimeSpan, Int64) Divides the specified MusicalTimeSpan by a number. Declaration public static MusicalTimeSpan operator /(MusicalTimeSpan timeSpan, long number) Parameters Type Name Description MusicalTimeSpan timeSpan The MusicalTimeSpan to divide by number . Int64 number The multiplier. Returns Type Description MusicalTimeSpan An object whose value is the result of division of timeSpan by number . Exceptions Type Condition ArgumentNullException timeSpan is null. ArgumentOutOfRangeException number is negative. Equality(MusicalTimeSpan, MusicalTimeSpan) Determines if two MusicalTimeSpan objects are equal. Declaration public static bool operator ==(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. GreaterThan(MusicalTimeSpan, MusicalTimeSpan) Indicates whether a specified MusicalTimeSpan is greater than another one. Declaration public static bool operator>(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. GreaterThanOrEqual(MusicalTimeSpan, MusicalTimeSpan) Indicates whether a specified MusicalTimeSpan is greater than or equal to another one. Declaration public static bool operator >=(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than or equal to the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Inequality(MusicalTimeSpan, MusicalTimeSpan) Determines if two MusicalTimeSpan objects are not equal. Declaration public static bool operator !=(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. LessThan(MusicalTimeSpan, MusicalTimeSpan) Indicates whether a specified MusicalTimeSpan is less than another one. Declaration public static bool operator <(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. LessThanOrEqual(MusicalTimeSpan, MusicalTimeSpan) Indicates whether a specified MusicalTimeSpan is less than or equal to another one. Declaration public static bool operator <=(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than or equal to the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Multiply(MusicalTimeSpan, Int64) Multiplies the specified MusicalTimeSpan by a number. Declaration public static MusicalTimeSpan operator *(MusicalTimeSpan timeSpan, long number) Parameters Type Name Description MusicalTimeSpan timeSpan The MusicalTimeSpan to multiply by number . Int64 number The multiplier. Returns Type Description MusicalTimeSpan An object whose value is the result of multiplication of timeSpan by number . Exceptions Type Condition ArgumentNullException timeSpan is null. ArgumentOutOfRangeException number is negative. Multiply(Int64, MusicalTimeSpan) Multiplies the specified MusicalTimeSpan by a number. Declaration public static MusicalTimeSpan operator *(long number, MusicalTimeSpan timeSpan) Parameters Type Name Description Int64 number The multiplier. MusicalTimeSpan timeSpan The MusicalTimeSpan to multiply by number . Returns Type Description MusicalTimeSpan An object whose value is the result of multiplication of timeSpan by number . Exceptions Type Condition ArgumentNullException timeSpan is null. ArgumentOutOfRangeException number is negative. Subtraction(MusicalTimeSpan, MusicalTimeSpan) Subtracts a specified MusicalTimeSpan from another one. Declaration public static MusicalTimeSpan operator -(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The minuend. MusicalTimeSpan timeSpan2 The subtrahend. Returns Type Description MusicalTimeSpan An object whose value is the result of the value of timeSpan1 minus the value of timeSpan2 . Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. ArgumentException timeSpan1 is less than timeSpan2 . Implements ITimeSpan System.IComparable System.IComparable<T> System.IEquatable<T>"
  },
  "api/Melanchall.DryWetMidi.Interaction.MidiTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MidiTimeSpan.html",
    "title": "Class MidiTimeSpan | DryWetMIDI",
    "keywords": "Class MidiTimeSpan Represents a time span as an amount of time measured in units of the time division of a MIDI file. Inheritance Object MidiTimeSpan Implements ITimeSpan IComparable IComparable < MidiTimeSpan > IEquatable < MidiTimeSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiTimeSpan : ITimeSpan, IComparable, IComparable<MidiTimeSpan>, IEquatable<MidiTimeSpan> Constructors MidiTimeSpan() Initializes a new instance of the MidiTimeSpan . Declaration public MidiTimeSpan() MidiTimeSpan(Int64) Initializes a new instance of the MidiTimeSpan with the specified time span. Declaration public MidiTimeSpan(long timeSpan) Parameters Type Name Description Int64 timeSpan Exceptions Type Condition ArgumentOutOfRangeException timeSpan is negative. Properties TimeSpan Gets the time span of the current MidiTimeSpan . Declaration public long TimeSpan { get; } Property Value Type Description Int64 Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(MidiTimeSpan) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(MidiTimeSpan other) Parameters Type Name Description MidiTimeSpan other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions Type Condition ArgumentException obj is not the same type as this instance. Divide(MidiTimeSpan) Divides the current time span by the specified MidiTimeSpan returning ration between them. Declaration public double Divide(MidiTimeSpan timeSpan) Parameters Type Name Description MidiTimeSpan timeSpan MidiTimeSpan to divide the current time span by. Returns Type Description Double Rayion between the current MidiTimeSpan and timeSpan . Exceptions Type Condition ArgumentNullException timeSpan is null. DivideByZeroException timeSpan represents a time span of zero length. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Equals(MidiTimeSpan) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MidiTimeSpan other) Parameters Type Name Description MidiTimeSpan other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Parse(String) Converts the string representation of a MIDI time span to its MidiTimeSpan equivalent. Declaration public static MidiTimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description MidiTimeSpan A MidiTimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out MidiTimeSpan) Converts the string representation of a MIDI time span to its MidiTimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out MidiTimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. MidiTimeSpan timeSpan When this method returns, contains the MidiTimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Operators Addition(MidiTimeSpan, MidiTimeSpan) Adds two specified MidiTimeSpan instances. Declaration public static MidiTimeSpan operator +(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to add. MidiTimeSpan timeSpan2 The second MidiTimeSpan to add. Returns Type Description MidiTimeSpan An object whose value is the sum of the values of timeSpan1 and timeSpan2 . Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Equality(MidiTimeSpan, MidiTimeSpan) Determines if two MidiTimeSpan objects are equal. Declaration public static bool operator ==(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. Explicit(Int64 to MidiTimeSpan) Converts Int64 to MidiTimeSpan . Declaration public static explicit operator MidiTimeSpan(long timeSpan) Parameters Type Name Description Int64 timeSpan Int64 to convert to MidiTimeSpan . Returns Type Description MidiTimeSpan GreaterThan(MidiTimeSpan, MidiTimeSpan) Indicates whether a specified MidiTimeSpan is greater than another one. Declaration public static bool operator>(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. GreaterThanOrEqual(MidiTimeSpan, MidiTimeSpan) Indicates whether a specified MidiTimeSpan is greater than or equal to another one. Declaration public static bool operator >=(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than or equal to the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Implicit(MidiTimeSpan to Int64) Converts MidiTimeSpan to Int64 . Declaration public static implicit operator long (MidiTimeSpan timeSpan) Parameters Type Name Description MidiTimeSpan timeSpan MidiTimeSpan to convert to Int64 . Returns Type Description Int64 Inequality(MidiTimeSpan, MidiTimeSpan) Determines if two MidiTimeSpan objects are not equal. Declaration public static bool operator !=(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. LessThan(MidiTimeSpan, MidiTimeSpan) Indicates whether a specified MidiTimeSpan is less than another one. Declaration public static bool operator <(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. LessThanOrEqual(MidiTimeSpan, MidiTimeSpan) Indicates whether a specified MidiTimeSpan is less than or equal to another one. Declaration public static bool operator <=(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than or equal to the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Subtraction(MidiTimeSpan, MidiTimeSpan) Subtracts a specified MidiTimeSpan from another one. Declaration public static MidiTimeSpan operator -(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The minuend. MidiTimeSpan timeSpan2 The subtrahend. Returns Type Description MidiTimeSpan An object whose value is the result of the value of timeSpan1 minus the value of timeSpan2 . Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. ArgumentException timeSpan1 is less than timeSpan2 . Implements ITimeSpan System.IComparable System.IComparable<T> System.IEquatable<T>"
  },
  "api/Melanchall.DryWetMidi.Interaction.ITimedObject.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ITimedObject.html",
    "title": "Interface ITimedObject | DryWetMIDI",
    "keywords": "Interface ITimedObject Represents an object that has start time. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface ITimedObject Properties Time Gets start time of an object. Declaration long Time { get; } Property Value Type Description Int64 Extension Methods TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.IMusicalObject.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.IMusicalObject.html",
    "title": "Interface IMusicalObject | DryWetMIDI",
    "keywords": "Interface IMusicalObject Musical objects that can be played. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface IMusicalObject Properties Channel Gets the channel which should be used to play an object. Declaration FourBitNumber Channel { get; } Property Value Type Description FourBitNumber"
  },
  "api/Melanchall.DryWetMidi.Interaction.ILengthedObject.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ILengthedObject.html",
    "title": "Interface ILengthedObject | DryWetMIDI",
    "keywords": "Interface ILengthedObject Represents an object that has length. Inherited Members ITimedObject.Time Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface ILengthedObject : ITimedObject Properties Length Gets length of an object. Declaration long Length { get; } Property Value Type Description Int64 Extension Methods LengthedObjectUtilities.LengthAs<TLength>(ILengthedObject, TempoMap) LengthedObjectUtilities.LengthAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.EndTimeAs<TTime>(ILengthedObject, TempoMap) LengthedObjectUtilities.EndTimeAs(ILengthedObject, TimeSpanType, TempoMap) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.IGrid.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.IGrid.html",
    "title": "Interface IGrid | DryWetMIDI",
    "keywords": "Interface IGrid Represents a time grid which is the set of points in time. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface IGrid Methods GetTimes(TempoMap) Gets points in time of the current grid. Declaration IEnumerable<long> GetTimes(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map used to get grid's times. Returns Type Description IEnumerable < Int64 > Collection of points in time of the current grid."
  },
  "api/Melanchall.DryWetMidi.Interaction.GetTimedEventsAndNotesUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.GetTimedEventsAndNotesUtilities.html",
    "title": "Class GetTimedEventsAndNotesUtilities | DryWetMIDI",
    "keywords": "Class GetTimedEventsAndNotesUtilities Provides a way to iterate through a collection of TimedEvent returning Note for Note On/Note Off event pairs and original TimedEvent for all other events. Inheritance Object GetTimedEventsAndNotesUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class GetTimedEventsAndNotesUtilities Methods GetTimedEventsAndNotes(MidiFile) Iterates through the events contained in the specified MidiFile returning Note for Note On/Note Off event pairs and original TimedEvent for all other events. Declaration public static IEnumerable<ITimedObject> GetTimedEventsAndNotes(this MidiFile midiFile) Parameters Type Name Description MidiFile midiFile MidiFile containing events to iterate over. Returns Type Description IEnumerable < ITimedObject > Collection of ITimedObject where an element either TimedEvent or Note . Remarks If there is no corresponding Note Off event for Note On (or if there is no correspinding Note On event for Note Off) the event will be returned as is. Exceptions Type Condition ArgumentNullException midiFile is null. GetTimedEventsAndNotes(TrackChunk) Iterates through the events contained in the specified TrackChunk returning Note for Note On/Note Off event pairs and original TimedEvent for all other events. Declaration public static IEnumerable<ITimedObject> GetTimedEventsAndNotes(this TrackChunk trackChunk) Parameters Type Name Description TrackChunk trackChunk TrackChunk containing events to iterate over. Returns Type Description IEnumerable < ITimedObject > Collection of ITimedObject where an element either TimedEvent or Note . Remarks If there is no corresponding Note Off event for Note On (or if there is no correspinding Note On event for Note Off) the event will be returned as is. Exceptions Type Condition ArgumentNullException trackChunk is null. GetTimedEventsAndNotes(IEnumerable<TrackChunk>) Iterates through the events contained in the specified collection of TrackChunk returning Note for Note On/Note Off event pairs and original TimedEvent for all other events. Declaration public static IEnumerable<ITimedObject> GetTimedEventsAndNotes(this IEnumerable<TrackChunk> trackChunks) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks TrackChunk containing events to iterate over. Returns Type Description IEnumerable < ITimedObject > Collection of ITimedObject where an element either TimedEvent or Note . Remarks If there is no corresponding Note Off event for Note On (or if there is no correspinding Note On event for Note Off) the event will be returned as is. Exceptions Type Condition ArgumentNullException trackChunks is null. GetTimedEventsAndNotes(IEnumerable<TimedEvent>) Iterates through the specified collection of TimedEvent returning Note for Note On/Note Off event pairs and original TimedEvent for all other events. Declaration public static IEnumerable<ITimedObject> GetTimedEventsAndNotes(this IEnumerable<TimedEvent> timedEvents) Parameters Type Name Description IEnumerable < TimedEvent > timedEvents Collection of TimedEvent to iterate over. Returns Type Description IEnumerable < ITimedObject > Collection of ITimedObject where an element either TimedEvent or Note . Remarks If there is no corresponding Note Off event for Note On (or if there is no correspinding Note On event for Note Off) the event will be returned as is. Exceptions Type Condition ArgumentNullException timedEvents is null."
  },
  "api/Melanchall.DryWetMidi.Interaction.GetNotesAndRestsUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.GetNotesAndRestsUtilities.html",
    "title": "Class GetNotesAndRestsUtilities | DryWetMIDI",
    "keywords": "Class GetNotesAndRestsUtilities Provides methods for getting single collection of notes and rests by the specified collection of notes. Inheritance Object GetNotesAndRestsUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class GetNotesAndRestsUtilities Methods GetNotesAndRests(MidiFile, RestSeparationPolicy) Iterates through the collection of notes contained in the specified MidiFile returning instances of Note and Rest where rests calculated using the specified policy. Declaration public static IEnumerable<ILengthedObject> GetNotesAndRests(this MidiFile midiFile, RestSeparationPolicy restSeparationPolicy) Parameters Type Name Description MidiFile midiFile MidiFile containing notes to iterate over. RestSeparationPolicy restSeparationPolicy Policy which determines when rests should be returned. Returns Type Description IEnumerable < ILengthedObject > Collection of ITimedObject where an element either Note or Rest . Exceptions Type Condition ArgumentNullException midiFile is null. InvalidEnumArgumentException restSeparationPolicy specified an invalid value. GetNotesAndRests(TrackChunk, RestSeparationPolicy) Iterates through the notes contained in the specified TrackChunk returning instances of Note and Rest where rests calculated using the specified policy. Declaration public static IEnumerable<ILengthedObject> GetNotesAndRests(this TrackChunk trackChunk, RestSeparationPolicy restSeparationPolicy) Parameters Type Name Description TrackChunk trackChunk TrackChunk containing notes to iterate over. RestSeparationPolicy restSeparationPolicy Policy which determines when rests should be returned. Returns Type Description IEnumerable < ILengthedObject > Collection of ITimedObject where an element either Note or Rest . Exceptions Type Condition ArgumentNullException trackChunk is null. InvalidEnumArgumentException restSeparationPolicy specified an invalid value. GetNotesAndRests(IEnumerable<TrackChunk>, RestSeparationPolicy) Iterates through the notes contained in the specified collection of TrackChunk returning instances of Note and Rest where rests calculated using the specified policy. Declaration public static IEnumerable<ILengthedObject> GetNotesAndRests(this IEnumerable<TrackChunk> trackChunks, RestSeparationPolicy restSeparationPolicy) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk containing notes to iterate over. RestSeparationPolicy restSeparationPolicy Policy which determines when rests should be returned. Returns Type Description IEnumerable < ILengthedObject > Collection of ITimedObject where an element either Note or Rest . Exceptions Type Condition ArgumentNullException trackChunks is null. InvalidEnumArgumentException restSeparationPolicy specified an invalid value. GetNotesAndRests(IEnumerable<Note>, RestSeparationPolicy) Iterates through the specified collection of Note returning instances of Note and Rest where rests calculated using the specified policy. Declaration public static IEnumerable<ILengthedObject> GetNotesAndRests(this IEnumerable<Note> notes, RestSeparationPolicy restSeparationPolicy) Parameters Type Name Description IEnumerable < Note > notes Collection of Note to iterate over. RestSeparationPolicy restSeparationPolicy Policy which determines when rests should be returned. Returns Type Description IEnumerable < ILengthedObject > Collection of ITimedObject where an element either Note or Rest . Exceptions Type Condition ArgumentNullException notes is null. InvalidEnumArgumentException restSeparationPolicy specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Interaction.ChordsManagingUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChordsManagingUtilities.html",
    "title": "Class ChordsManagingUtilities | DryWetMIDI",
    "keywords": "Class ChordsManagingUtilities Extension methods for chords managing. Inheritance Object ChordsManagingUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class ChordsManagingUtilities Methods AddChords(EventsCollection, IEnumerable<Chord>) Adds collection of chords to the specified EventsCollection . Declaration public static void AddChords(this EventsCollection eventsCollection, IEnumerable<Chord> chords) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to add chords to. IEnumerable < Chord > chords Chords to add to the eventsCollection . Exceptions Type Condition ArgumentNullException eventsCollection is null. -or- chords is null. AddChords(TrackChunk, IEnumerable<Chord>) Adds collection of chords to the specified TrackChunk . Declaration public static void AddChords(this TrackChunk trackChunk, IEnumerable<Chord> chords) Parameters Type Name Description TrackChunk trackChunk TrackChunk to add chords to. IEnumerable < Chord > chords Chords to add to the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null. -or- chords is null. GetChords(EventsCollection, Int64) Gets chords contained in the specified EventsCollection . Declaration public static IEnumerable<Chord> GetChords(this EventsCollection eventsCollection, long notesTolerance = 0L) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for chords. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Returns Type Description IEnumerable < Chord > Collection of chords contained in eventsCollection ordered by time. Exceptions Type Condition ArgumentNullException eventsCollection is null. ArgumentOutOfRangeException notesTolerance is negative. GetChords(MidiFile, Int64) Gets chords contained in the specified MidiFile . Declaration public static IEnumerable<Chord> GetChords(this MidiFile file, long notesTolerance = 0L) Parameters Type Name Description MidiFile file MidiFile to search for chords. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Returns Type Description IEnumerable < Chord > Collection of chords contained in file ordered by time. Exceptions Type Condition ArgumentNullException file is null. ArgumentOutOfRangeException notesTolerance is negative. GetChords(TrackChunk, Int64) Gets chords contained in the specified TrackChunk . Declaration public static IEnumerable<Chord> GetChords(this TrackChunk trackChunk, long notesTolerance = 0L) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for chords. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Returns Type Description IEnumerable < Chord > Collection of chords contained in trackChunk ordered by time. Exceptions Type Condition ArgumentNullException trackChunk is null. ArgumentOutOfRangeException notesTolerance is negative. GetChords(IEnumerable<MidiEvent>, Int64) Gets chords contained in the specified collection of MidiEvent . Declaration public static IEnumerable<Chord> GetChords(this IEnumerable<MidiEvent> events, long notesTolerance = 0L) Parameters Type Name Description IEnumerable < MidiEvent > events Collection of MidiFile to search for chords. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Returns Type Description IEnumerable < Chord > Collection of chords contained in events ordered by time. Exceptions Type Condition ArgumentNullException events is null. GetChords(IEnumerable<TrackChunk>, Int64) Gets chords contained in the specified collection of TrackChunk . Declaration public static IEnumerable<Chord> GetChords(this IEnumerable<TrackChunk> trackChunks, long notesTolerance = 0L) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Track chunks to search for chords. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Returns Type Description IEnumerable < Chord > Collection of chords contained in trackChunks ordered by time. Exceptions Type Condition ArgumentNullException trackChunks is null. ArgumentOutOfRangeException notesTolerance is negative. GetChords(IEnumerable<Note>, Int64) Creates chords from notes. Declaration public static IEnumerable<Chord> GetChords(this IEnumerable<Note> notes, long notesTolerance = 0L) Parameters Type Name Description IEnumerable < Note > notes Notes to create chords from. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Returns Type Description IEnumerable < Chord > Collection of chords made up from notes . Exceptions Type Condition ArgumentNullException notes is null. ArgumentOutOfRangeException notesTolerance is negative. GetMusicTheoryChord(Chord) Declaration public static Chord GetMusicTheoryChord(this Chord chord) Parameters Type Name Description Chord chord Returns Type Description Chord ManageChords(EventsCollection, Int64, Comparison<MidiEvent>) Creates an instance of the ChordsManager initializing it with the specified events collection, notes tolerance and comparison delegate for events that have same time. Declaration public static ChordsManager ManageChords(this EventsCollection eventsCollection, long notesTolerance = 0L, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds chords to manage. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Returns Type Description ChordsManager An instance of the ChordsManager that can be used to manage chords represented by the eventsCollection . Exceptions Type Condition ArgumentNullException eventsCollection is null. ArgumentOutOfRangeException notesTolerance is negative. ManageChords(TrackChunk, Int64, Comparison<MidiEvent>) Creates an instance of the ChordsManager initializing it with the events collection of the specified track chunk, notes tolerance and comparison delegate for events that have same time. Declaration public static ChordsManager ManageChords(this TrackChunk trackChunk, long notesTolerance = 0L, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk that holds chords to manage. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Returns Type Description ChordsManager An instance of the ChordsManager that can be used to manage chords represented by the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null. ArgumentOutOfRangeException notesTolerance is negative. ProcessChords(EventsCollection, Action<Chord>, Predicate<Chord>, Int64) Performs the specified action on each Chord contained in the EventsCollection . Declaration public static void ProcessChords(this EventsCollection eventsCollection, Action<Chord> action, Predicate<Chord> match = null, long notesTolerance = 0L) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the eventsCollection . Predicate < Chord > match The predicate that defines the conditions of the Chord to process. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException eventsCollection is null. -or- action is null. ArgumentOutOfRangeException notesTolerance is negative. ProcessChords(MidiFile, Action<Chord>, Predicate<Chord>, Int64) Performs the specified action on each Chord contained in the MidiFile . Declaration public static void ProcessChords(this MidiFile file, Action<Chord> action, Predicate<Chord> match = null, long notesTolerance = 0L) Parameters Type Name Description MidiFile file MidiFile to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the file . Predicate < Chord > match The predicate that defines the conditions of the Chord to process. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException file is null. -or- action is null. ArgumentOutOfRangeException notesTolerance is negative. ProcessChords(TrackChunk, Action<Chord>, Predicate<Chord>, Int64) Performs the specified action on each Chord contained in the TrackChunk . Declaration public static void ProcessChords(this TrackChunk trackChunk, Action<Chord> action, Predicate<Chord> match = null, long notesTolerance = 0L) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the trackChunk . Predicate < Chord > match The predicate that defines the conditions of the Chord to process. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- action is null. ArgumentOutOfRangeException notesTolerance is negative. ProcessChords(IEnumerable<TrackChunk>, Action<Chord>, Predicate<Chord>, Int64) Performs the specified action on each Chord contained in the collection of TrackChunk . Declaration public static void ProcessChords(this IEnumerable<TrackChunk> trackChunks, Action<Chord> action, Predicate<Chord> match = null, long notesTolerance = 0L) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the trackChunks . Predicate < Chord > match The predicate that defines the conditions of the Chord to process. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- action is null. ArgumentOutOfRangeException notesTolerance is negative. RemoveChords(EventsCollection, Predicate<Chord>, Int64) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static void RemoveChords(this EventsCollection eventsCollection, Predicate<Chord> match = null, long notesTolerance = 0L) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for chords to remove. Predicate < Chord > match The predicate that defines the conditions of the Chord to remove. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException eventsCollection is null. ArgumentOutOfRangeException notesTolerance is negative. RemoveChords(MidiFile, Predicate<Chord>, Int64) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static void RemoveChords(this MidiFile file, Predicate<Chord> match = null, long notesTolerance = 0L) Parameters Type Name Description MidiFile file MidiFile to search for chords to remove. Predicate < Chord > match The predicate that defines the conditions of the Chord to remove. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException file is null. ArgumentOutOfRangeException notesTolerance is negative. RemoveChords(TrackChunk, Predicate<Chord>, Int64) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static void RemoveChords(this TrackChunk trackChunk, Predicate<Chord> match = null, long notesTolerance = 0L) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for chords to remove. Predicate < Chord > match The predicate that defines the conditions of the Chord to remove. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException trackChunk is null. ArgumentOutOfRangeException notesTolerance is negative. RemoveChords(IEnumerable<TrackChunk>, Predicate<Chord>, Int64) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static void RemoveChords(this IEnumerable<TrackChunk> trackChunks, Predicate<Chord> match = null, long notesTolerance = 0L) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for chords to remove. Predicate < Chord > match The predicate that defines the conditions of the Chord to remove. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException trackChunks is null. ArgumentOutOfRangeException notesTolerance is negative. SetTimeAndLength(Chord, ITimeSpan, ITimeSpan, TempoMap) Sets time and length of the specified chord. Declaration public static Chord SetTimeAndLength(this Chord chord, ITimeSpan time, ITimeSpan length, TempoMap tempoMap) Parameters Type Name Description Chord chord Chord to set time and length to. ITimeSpan time Time to set to chord . ITimeSpan length Length to set to chord . TempoMap tempoMap Tempo map that will be used for time and length conversion. Returns Type Description Chord An input chord with new time and length. Exceptions Type Condition ArgumentNullException chord is null. -or- time is null. -or- length is null. -or- tempoMap is null. ToFile(IEnumerable<Chord>) Creates a MIDI file with the specified chords. Declaration public static MidiFile ToFile(this IEnumerable<Chord> chords) Parameters Type Name Description IEnumerable < Chord > chords Collection of chords to create a MIDI file. Returns Type Description MidiFile MidiFile containing the specified chords. Exceptions Type Condition ArgumentNullException chords is null. ToTrackChunk(IEnumerable<Chord>) Creates a track chunk with the specified chords. Declaration public static TrackChunk ToTrackChunk(this IEnumerable<Chord> chords) Parameters Type Name Description IEnumerable < Chord > chords Collection of chords to create a track chunk. Returns Type Description TrackChunk TrackChunk containing the specified chords. Exceptions Type Condition ArgumentNullException chords is null."
  },
  "api/Melanchall.DryWetMidi.Interaction.ChordsManager.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChordsManager.html",
    "title": "Class ChordsManager | DryWetMIDI",
    "keywords": "Class ChordsManager Provides a way to manage chords of a MIDI file. Inheritance Object ChordsManager Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordsManager : IDisposable Remarks This manager is wrapper for the NotesManager that provides easy manipulation of sets of NoteOnEvent and NoteOffEvent events through the Chord objects. To start manage chords you need to get an instance of the ChordsManager . To finish managing you need to call the SaveChanges() or Dispose() method. Since the manager implements IDisposable it is recommended to manage chords within using block. Constructors ChordsManager(EventsCollection, Int64, Comparison<MidiEvent>) Initializes a new instance of the ChordsManager with the specified events collection, notes tolerance and comparison delegate for events that have same time. Declaration public ChordsManager(EventsCollection eventsCollection, long notesTolerance = 0L, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds chord events to manage. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Exceptions Type Condition ArgumentNullException eventsCollection is null. ArgumentOutOfRangeException notesTolerance is negative. Properties Chords Gets the ChordsCollection with all chords managed by the current ChordsManager . Declaration public ChordsCollection Chords { get; } Property Value Type Description ChordsCollection Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() SaveChanges() Saves all chords that were managed with the current ChordsManager updating underlying events collection. Declaration public void SaveChanges() Remarks This method will rewrite content of the events collection was used to construct the current ChordsManager with events were managed by this manager. Also all delta-times of wrapped events will be recalculated according to the Time and Length of chords notes. Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Devices.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.html",
    "title": "Namespace Melanchall.DryWetMidi.Devices | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Devices Classes DevicesConnector Provides a way to connect an input MIDI device to an output MIDI device. DevicesConnectorUtilities Provides methods to connect MIDI devices. ErrorOccurredEventArgs Provides data for the ErrorOccurred event. HighPrecisionTickGenerator Tick generator providing most accurate ticking, allowing firing intervals of 1 ms which is the smallest possible one. InputDevice Represents an input MIDI device. InvalidShortEventReceivedEventArgs Provides data for the InvalidShortEventReceived event. InvalidSysExEventReceivedEventArgs Provides data for the InvalidSysExEventReceived event. MidiClock MIDI clock used to drive playback or any timer-based object. MidiClockSettings Holds settings for MidiClock used by a clock driven object. MidiDevice Represents a MIDI device. MidiDeviceException The exception that is thrown when an error occurred on a MIDI device. MidiEventPlayedEventArgs Holds an instance of MidiEvent for EventPlayed event. MidiEventReceivedEventArgs Provides data for the EventReceived event. MidiEventSentEventArgs Provides data for the EventSent event. MidiTimeCodeReceivedEventArgs Provides data for the MidiTimeCodeReceived event. NotePlaybackData Data related to MIDI note. NotesEventArgs Holds notes collection for NotesPlaybackStarted and NotesPlaybackFinished . OutputDevice Represents an output MIDI device. Playback Provides a way to play MIDI data through the specified output MIDI device. PlaybackCurrentTime Holds the current time of a playback. PlaybackCurrentTimeChangedEventArgs Holds current times of playbacks for CurrentTimeChanged . PlaybackCurrentTimeWatcher Provides notifications about playback's current time changed. PlaybackSnapping Provides a way to manage snap points for Playback . PlaybackUtilities Contains methods to play MIDI data and retrieving an instance of the Playback which provides advanced features for MIDI data playing. Recording Provides a way to record MIDI data received by an input MIDI device. RecordingUtilities Contains methods to manipulate by recording of MIDI data. RegularPrecisionTickGenerator Tick generator which uses Timer for ticking. SnapPoint Snap point for Playback . SnapPoint<TData> Snap point for Playback with attached data. SnapPointsGroup Represents a group of snap points. Structs Volume Holds volume value for an output MIDI device. Interfaces IClockDrivenObject Represents an object driven by clock (timer). IInputDevice IOutputDevice ITickGenerator Tick generator which provides ticking with the specified interval. Enums Manufacturer Manufacturer of MIDI device driver. OutputDeviceType Type of an output MIDI device. Delegates CreateTickGeneratorCallback Callback used to create tick generator for MidiClock . EventCallback Callback used to process MIDI event to be played by Playback . NoteCallback Callback used to process note to be played by Playback . PlaybackEventCallback Callback used to modify MIDI event before playing."
  },
  "api/Melanchall.DryWetMidi.Devices.Volume.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.Volume.html",
    "title": "Struct Volume | DryWetMIDI",
    "keywords": "Struct Volume Holds volume value for an output MIDI device. Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public struct Volume Constructors Volume(UInt16) Initializes a new instance of the Volume with specified value which will be applied to both left and right channels. Declaration public Volume(ushort volume) Parameters Type Name Description UInt16 volume Value of the volume. Volume(UInt16, UInt16) Initializes a new instance of the Volume with specified separate values for left and right channels. Declaration public Volume(ushort leftVolume, ushort rightVolume) Parameters Type Name Description UInt16 leftVolume Value of the volume for the left channel. UInt16 rightVolume Value of the volume for the right channel. Fields FullLeft Maximum volume on left channel and muted right one. Declaration public static readonly Volume FullLeft Field Value Type Description Volume FullRight Maximum volume on right channel and muted left one. Declaration public static readonly Volume FullRight Field Value Type Description Volume Zero Zero volume. Declaration public static readonly Volume Zero Field Value Type Description Volume Properties LeftVolume Gets value of the volume for the left channel. Declaration public ushort LeftVolume { get; } Property Value Type Description UInt16 RightVolume Gets value of the volume for the right channel. Declaration public ushort RightVolume { get; } Property Value Type Description UInt16 Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides ValueType.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Left(UInt16) Creates an instance of the Volume which mutes the right channel and sets specified volume for the left one. Declaration public static Volume Left(ushort volume) Parameters Type Name Description UInt16 volume Value of the volume for the left channel. Returns Type Description Volume An instance of the Volume which mutes the right channel and sets volume for the left one. Right(UInt16) Creates an instance of the Volume which mutes the left channel and sets specified volume for the right one. Declaration public static Volume Right(ushort volume) Parameters Type Name Description UInt16 volume Value of the volume for the right channel. Returns Type Description Volume An instance of the Volume which mutes the left channel and sets volume for the right one. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString()"
  },
  "api/Melanchall.DryWetMidi.Devices.SnapPointsGroup.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.SnapPointsGroup.html",
    "title": "Class SnapPointsGroup | DryWetMIDI",
    "keywords": "Class SnapPointsGroup Represents a group of snap points. Inheritance Object SnapPointsGroup Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SnapPointsGroup Properties IsEnabled Gets or sets a value indicating whether the current SnapPointsGroup is enabled or not. Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean"
  },
  "api/Melanchall.DryWetMidi.Devices.SnapPoint.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.SnapPoint.html",
    "title": "Class SnapPoint | DryWetMIDI",
    "keywords": "Class SnapPoint Snap point for Playback . Inheritance Object SnapPoint SnapPoint<TData> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public class SnapPoint Properties IsEnabled Gets or sets a value indicating whether the current SnapPoint is enabled or not. Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean SnapPointsGroup Gets an instance of the SnapPointsGroup the current SnapPoint belongs to. Declaration public SnapPointsGroup SnapPointsGroup { get; } Property Value Type Description SnapPointsGroup Time Gets the time of the current SnapPoint . Declaration public TimeSpan Time { get; } Property Value Type Description TimeSpan"
  },
  "api/Melanchall.DryWetMidi.Devices.SnapPoint-1.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.SnapPoint-1.html",
    "title": "Class SnapPoint<TData> | DryWetMIDI",
    "keywords": "Class SnapPoint<TData> Snap point for Playback with attached data. Inheritance Object SnapPoint SnapPoint<TData> Inherited Members SnapPoint.IsEnabled SnapPoint.Time SnapPoint.SnapPointsGroup Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SnapPoint<TData> : SnapPoint Type Parameters Name Description TData The type of data attached to snap point. Properties Data Gets the data attached to the current SnapPoint<TData> . Declaration public TData Data { get; } Property Value Type Description TData"
  },
  "api/Melanchall.DryWetMidi.Devices.RegularPrecisionTickGenerator.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.RegularPrecisionTickGenerator.html",
    "title": "Class RegularPrecisionTickGenerator | DryWetMIDI",
    "keywords": "Class RegularPrecisionTickGenerator Tick generator which uses Timer for ticking. Inheritance Object RegularPrecisionTickGenerator Implements ITickGenerator IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class RegularPrecisionTickGenerator : ITickGenerator, IDisposable Constructors RegularPrecisionTickGenerator(TimeSpan) Initializes a new instance of the RegularPrecisionTickGenerator with the specified interval. Declaration public RegularPrecisionTickGenerator(TimeSpan interval) Parameters Type Name Description TimeSpan interval Interval of ticking. Exceptions Type Condition ArgumentOutOfRangeException interval is out of valid range. Fields MaxInterval The largest possible interval. Declaration public static readonly TimeSpan MaxInterval Field Value Type Description TimeSpan MinInterval The smallest possible interval. Declaration public static readonly TimeSpan MinInterval Field Value Type Description TimeSpan Methods Dispose() Releases all resources used by the current RegularPrecisionTickGenerator . Declaration public void Dispose() TryStart() Starts the tick generator if it's not started; otherwise does nothing. Declaration public void TryStart() Events TickGenerated Occurs when new tick generated. Declaration public event EventHandler TickGenerated Event Type Type Description EventHandler Implements ITickGenerator System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Devices.RecordingUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.RecordingUtilities.html",
    "title": "Class RecordingUtilities | DryWetMIDI",
    "keywords": "Class RecordingUtilities Contains methods to manipulate by recording of MIDI data. Inheritance Object RecordingUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public static class RecordingUtilities Methods ToFile(Recording) Creates an instance of the MidiFile and places recorded events to it. Declaration public static MidiFile ToFile(this Recording recording) Parameters Type Name Description Recording recording Recording to place events to MidiFile from. Returns Type Description MidiFile MidiFile with events recorded with Recording . Exceptions Type Condition ArgumentNullException recording is null. ArgumentException recording is in progress. ToTrackChunk(Recording) Creates an instance of the TrackChunk and places recorded events to it. Declaration public static TrackChunk ToTrackChunk(this Recording recording) Parameters Type Name Description Recording recording Recording to place events to TrackChunk from. Returns Type Description TrackChunk TrackChunk with events recorded with Recording . Exceptions Type Condition ArgumentNullException recording is null. ArgumentException recording is in progress."
  },
  "api/Melanchall.DryWetMidi.Devices.Recording.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.Recording.html",
    "title": "Class Recording | DryWetMIDI",
    "keywords": "Class Recording Provides a way to record MIDI data received by an input MIDI device. Inheritance Object Recording Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Recording : IDisposable Constructors Recording(TempoMap, IInputDevice) Initializes a new instance of the Recording with the specified tempo map and input MIDI device to capture MIDI data from. Declaration public Recording(TempoMap tempoMap, IInputDevice inputDevice) Parameters Type Name Description TempoMap tempoMap Tempo map used to calculate events times. IInputDevice inputDevice Input MIDI device to capture MIDI data from. Exceptions Type Condition ArgumentNullException tempoMap is null. -or- inputDevice is null. Properties InputDevice Gets the input MIDI device to record MIDI data from. Declaration public IInputDevice InputDevice { get; } Property Value Type Description IInputDevice IsRunning Gets a value indicating whether recording is currently running or not. Declaration public bool IsRunning { get; } Property Value Type Description Boolean TempoMap Gets the tempo map used to calculate recorded events times. Declaration public TempoMap TempoMap { get; } Property Value Type Description TempoMap Methods Dispose() Releases all resources used by the current Recording . Declaration public void Dispose() GetDuration(TimeSpanType) Retrieves the duration of the recording in the specified format. Declaration public ITimeSpan GetDuration(TimeSpanType durationType) Parameters Type Name Description TimeSpanType durationType Type that will represent the duration. Returns Type Description ITimeSpan The duration of the recording as an instance of time span defined by durationType . Exceptions Type Condition InvalidEnumArgumentException durationType specified an invalid value. GetDuration<TTimeSpan>() Retrieves the duration of the recording in the specified format. Declaration public TTimeSpan GetDuration<TTimeSpan>() where TTimeSpan : ITimeSpan Returns Type Description TTimeSpan The duration of the recording as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the duration. GetEvents() Gets MIDI events recorded by the current Recording . Declaration public IReadOnlyList<TimedEvent> GetEvents() Returns Type Description IReadOnlyList < TimedEvent > MIDI events recorded by the current Recording . Start() Starts MIDI data recording. Declaration public void Start() Exceptions Type Condition InvalidOperationException Input device is not listening for MIDI events. Stop() Stops MIDI data recording. Note that this method doesn't reset the recording time. If you call Start() , recording will be resumed from the point where Stop() was called. Declaration public void Stop() Events Started Occurs when recording started via Start() method. Declaration public event EventHandler Started Event Type Type Description EventHandler Stopped Occurs when recording stopped via Stop() method. Declaration public event EventHandler Stopped Event Type Type Description EventHandler Implements System.IDisposable Extension Methods RecordingUtilities.ToTrackChunk(Recording) RecordingUtilities.ToFile(Recording)"
  },
  "api/Melanchall.DryWetMidi.Devices.OutputDevice.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.OutputDevice.html",
    "title": "Class OutputDevice | DryWetMIDI",
    "keywords": "Class OutputDevice Represents an output MIDI device. Inheritance Object MidiDevice OutputDevice Implements IDisposable IOutputDevice Inherited Members MidiDevice.ErrorOccurred MidiDevice._handle MidiDevice._disposed MidiDevice.Id MidiDevice.Name MidiDevice.DriverManufacturer MidiDevice.ProductIdentifier MidiDevice.DriverVersion MidiDevice.SetBasicDeviceInformation(UInt16, UInt16, UInt32, String) MidiDevice.EnsureDeviceIsNotDisposed() MidiDevice.ProcessMmResult(UInt32) MidiDevice.OnError(Exception) MidiDevice.ToString() MidiDevice.Dispose() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class OutputDevice : MidiDevice, IDisposable, IOutputDevice Properties Channels Gets the channels that an internal synthesizer device responds to. Declaration public IEnumerable<FourBitNumber> Channels { get; } Property Value Type Description IEnumerable < FourBitNumber > DeviceType Gets the type of the current OutputDevice . Declaration public OutputDeviceType DeviceType { get; } Property Value Type Description OutputDeviceType NotesNumber Gets the maximum number of simultaneous notes that can be played by an internal synthesizer device. If the device is a port, this member is not meaningful and will be 0. Declaration public int NotesNumber { get; } Property Value Type Description Int32 SupportsLeftRightVolumeControl Gets a value indicating whether device supports separate left and right volume control or not. Declaration public bool SupportsLeftRightVolumeControl { get; } Property Value Type Description Boolean SupportsPatchCaching Gets a value indicating whether device supports patch caching. Declaration public bool SupportsPatchCaching { get; } Property Value Type Description Boolean SupportsVolumeControl Gets a value indicating whether device supports volume control. Declaration public bool SupportsVolumeControl { get; } Property Value Type Description Boolean VoicesNumber Gets the number of voices supported by an internal synthesizer device. If the device is a port, this member is not meaningful and will be 0. Declaration public int VoicesNumber { get; } Property Value Type Description Int32 Volume Gets or sets the volume of the output MIDI device. Declaration public Volume Volume { get; set; } Property Value Type Description Volume Exceptions Type Condition ObjectDisposedException The current OutputDevice is disposed. InvalidOperationException Device doesn't support volume control. ArgumentException Device doesn't support separate volume control for each channel. MidiDeviceException An error occurred on device. Methods Dispose(Boolean) Releases the unmanaged resources used by the MIDI device class and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides MidiDevice.Dispose(Boolean) Finalize() Finalizes the current instance of the OutputDevice . Declaration protected void Finalize() GetAll() Retrieves all output MIDI devices presented in the system. Declaration public static IEnumerable<OutputDevice> GetAll() Returns Type Description IEnumerable < OutputDevice > All output MIDI devices presented in the system. GetById(Int32) Retrieves output MIDI device with the specified ID. Declaration public static OutputDevice GetById(int id) Parameters Type Name Description Int32 id Device ID which is number from 0 to GetDevicesCount() minus 1. Returns Type Description OutputDevice Output MIDI device with the specified ID. Exceptions Type Condition ArgumentOutOfRangeException id is out of valid range. GetByName(String) Retrieves a first output MIDI device with the specified name. Declaration public static OutputDevice GetByName(string name) Parameters Type Name Description String name The name of an output MIDI device to retrieve. Returns Type Description OutputDevice Output MIDI device with the specified name. Exceptions Type Condition ArgumentException name is null or contains white-spaces only. -or- name specifies an output MIDI device which is not presented in the system. GetDevicesCount() Retrieves the number of output MIDI devices presented in the system. Declaration public static int GetDevicesCount() Returns Type Description Int32 Number of output MIDI devices presented in the system. GetErrorText(UInt32, StringBuilder, UInt32) Gets error description for the specified MMRESULT which is return value of winmm function. Declaration protected override uint GetErrorText(uint mmrError, StringBuilder pszText, uint cchText) Parameters Type Name Description UInt32 mmrError MMRESULT which is return value of winmm function. StringBuilder pszText StringBuilder to write error description to. UInt32 cchText Size of pszText buffer. Returns Type Description UInt32 Return value of winmm function which gets error description. Overrides MidiDevice.GetErrorText(UInt32, StringBuilder, UInt32) PrepareForEventsSending() Prepares output MIDI device for sending events to it allocating necessary resources. Declaration public void PrepareForEventsSending() Remarks It is not needed to call this method before actual MIDI data sending since first call of SendEvent(MidiEvent) will prepare the device automatically. But it can take some time so you may decide to call PrepareForEventsSending() before working with device. Exceptions Type Condition MidiDeviceException An error occurred on device. SendEvent(MidiEvent) Send a MIDI event to the current OutputDevice . Declaration public void SendEvent(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent MIDI event to send. Exceptions Type Condition ObjectDisposedException The current OutputDevice is disposed. ArgumentNullException midiEvent is null. MidiDeviceException An error occurred on device. TurnAllNotesOff() Turns off all notes that were turned on by sending Note On events, and which haven't yet been turned off by respective Note Off events. Declaration public void TurnAllNotesOff() Exceptions Type Condition ObjectDisposedException The current OutputDevice is disposed. MidiDeviceException An error occurred on device. Events EventSent Occurs when a MIDI event is sent. Declaration public event EventHandler<MidiEventSentEventArgs> EventSent Event Type Type Description EventHandler < MidiEventSentEventArgs > Implements System.IDisposable IOutputDevice"
  },
  "api/Melanchall.DryWetMidi.Devices.NotesEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.NotesEventArgs.html",
    "title": "Class NotesEventArgs | DryWetMIDI",
    "keywords": "Class NotesEventArgs Holds notes collection for NotesPlaybackStarted and NotesPlaybackFinished . Inheritance Object EventArgs NotesEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotesEventArgs : EventArgs Properties Notes Gets notes collection that started or finished to play by a Playback . Declaration public IEnumerable<Note> Notes { get; } Property Value Type Description IEnumerable < Note >"
  },
  "api/Melanchall.DryWetMidi.Devices.NotePlaybackData.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.NotePlaybackData.html",
    "title": "Class NotePlaybackData | DryWetMIDI",
    "keywords": "Class NotePlaybackData Data related to MIDI note. Inheritance Object NotePlaybackData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotePlaybackData Constructors NotePlaybackData(SevenBitNumber, SevenBitNumber, SevenBitNumber, FourBitNumber) Initializes a new instance of the NotePlaybackData with the specified note number, velocity, off velocity and channel. Declaration public NotePlaybackData(SevenBitNumber noteNumber, SevenBitNumber velocity, SevenBitNumber offVelocity, FourBitNumber channel) Parameters Type Name Description SevenBitNumber noteNumber Note number. SevenBitNumber velocity Velocity of Note On event of the note. SevenBitNumber offVelocity Velocity of Note Off event of the note. FourBitNumber channel Note channel. Fields SkipNote Data which instructs playback to skip note. Declaration public static readonly NotePlaybackData SkipNote Field Value Type Description NotePlaybackData Properties Channel Gets the note channel. Declaration public FourBitNumber Channel { get; } Property Value Type Description FourBitNumber NoteNumber Gets the note number. Declaration public SevenBitNumber NoteNumber { get; } Property Value Type Description SevenBitNumber OffVelocity Gets the velocity of Note Off event of the note. Declaration public SevenBitNumber OffVelocity { get; } Property Value Type Description SevenBitNumber Velocity Gets the velocity of Note On event of the note. Declaration public SevenBitNumber Velocity { get; } Property Value Type Description SevenBitNumber"
  },
  "api/Melanchall.DryWetMidi.Devices.NoteCallback.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.NoteCallback.html",
    "title": "Delegate NoteCallback | DryWetMIDI",
    "keywords": "Delegate NoteCallback Callback used to process note to be played by Playback . Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public delegate NotePlaybackData NoteCallback(NotePlaybackData rawNoteData, long rawTime, long rawLength, TimeSpan playbackTime); Parameters Type Name Description NotePlaybackData rawNoteData Data of the note to process. Int64 rawTime Absolute time of note to process. Int64 rawLength Length of note to process. TimeSpan playbackTime Current time of the playback. Returns Type Description NotePlaybackData Data of the new note which is rawNoteData processed by the callback; or null if note should be ignored."
  },
  "api/Melanchall.DryWetMidi.Devices.MidiTimeCodeReceivedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.MidiTimeCodeReceivedEventArgs.html",
    "title": "Class MidiTimeCodeReceivedEventArgs | DryWetMIDI",
    "keywords": "Class MidiTimeCodeReceivedEventArgs Provides data for the MidiTimeCodeReceived event. Inheritance Object EventArgs MidiTimeCodeReceivedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiTimeCodeReceivedEventArgs : EventArgs Properties Format Gets format of MIDI time code. Declaration public MidiTimeCodeType Format { get; } Property Value Type Description MidiTimeCodeType Frames Gets the frames component of MIDI time code. Declaration public int Frames { get; } Property Value Type Description Int32 Hours Gets the hours component of MIDI time code. Declaration public int Hours { get; } Property Value Type Description Int32 Minutes Gets the minutes component of MIDI time code. Declaration public int Minutes { get; } Property Value Type Description Int32 Seconds Gets the seconds component of MIDI time code. Declaration public int Seconds { get; } Property Value Type Description Int32"
  },
  "api/Melanchall.DryWetMidi.Devices.MidiEventSentEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.MidiEventSentEventArgs.html",
    "title": "Class MidiEventSentEventArgs | DryWetMIDI",
    "keywords": "Class MidiEventSentEventArgs Provides data for the EventSent event. Inheritance Object EventArgs MidiEventSentEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiEventSentEventArgs : EventArgs Properties Event Gets MIDI event sent to IOutputDevice . Declaration public MidiEvent Event { get; } Property Value Type Description MidiEvent"
  },
  "api/Melanchall.DryWetMidi.Core.SetTempoEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SetTempoEvent.html",
    "title": "Class SetTempoEvent | DryWetMIDI",
    "keywords": "Class SetTempoEvent Represents a Set Tempo meta event. Inheritance Object MidiEvent MetaEvent SetTempoEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SetTempoEvent : MetaEvent Remarks The MIDI set tempo meta message sets the tempo of a MIDI sequence in terms of microseconds per quarter note. Constructors SetTempoEvent() Initializes a new instance of the SetTempoEvent . Declaration public SetTempoEvent() SetTempoEvent(Int64) Initializes a new instance of the SetTempoEvent with the specified number of microseconds per quarter note. Declaration public SetTempoEvent(long microsecondsPerQuarterNote) Parameters Type Name Description Int64 microsecondsPerQuarterNote Number of microseconds per quarter note. Fields DefaultTempo Default tempo. Declaration public const long DefaultTempo = 500000L Field Value Type Description Int64 Properties MicrosecondsPerQuarterNote Gets or sets number of microseconds per quarter note. Declaration public long MicrosecondsPerQuarterNote { get; set; } Property Value Type Description Int64 Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.SequenceTrackNameEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SequenceTrackNameEvent.html",
    "title": "Class SequenceTrackNameEvent | DryWetMIDI",
    "keywords": "Class SequenceTrackNameEvent Represents a Sequence/Track Name meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent SequenceTrackNameEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SequenceTrackNameEvent : BaseTextEvent Remarks The MIDI track name meta message defines either the name of a MIDI sequence (when in MIDI type 0 or MIDI type 2 files, or when in the first track of a MIDI type 1 file), or the name of a MIDI track (when in other tracks of a MIDI type 1 file). Constructors SequenceTrackNameEvent() Initializes a new instance of the SequenceTrackNameEvent . Declaration public SequenceTrackNameEvent() SequenceTrackNameEvent(String) Initializes a new instance of the SequenceTrackNameEvent with the specified sequence or track name. Declaration public SequenceTrackNameEvent(string name) Parameters Type Name Description String name Name of a sequence or track. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.SequencerSpecificEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SequencerSpecificEvent.html",
    "title": "Class SequencerSpecificEvent | DryWetMIDI",
    "keywords": "Class SequencerSpecificEvent Represents a Sequencer Specific meta event. Inheritance Object MidiEvent MetaEvent SequencerSpecificEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SequencerSpecificEvent : MetaEvent Remarks The MIDI sequencer specific meta message carries information that is specific to a MIDI sequencer produced by a certain MIDI manufacturer. Constructors SequencerSpecificEvent() Initializes a new instance of the SequencerSpecificEvent . Declaration public SequencerSpecificEvent() SequencerSpecificEvent(Byte[]) Initializes a new instance of the SequencerSpecificEvent with the specified data. Declaration public SequencerSpecificEvent(byte[] data) Parameters Type Name Description Byte [] data Sequencer specific data. Properties Data Gets or sets sequencer specific data. Declaration public byte[] Data { get; set; } Property Value Type Description Byte [] Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) Exceptions Type Condition ArgumentOutOfRangeException Sequencer specific event cannot be read since the size is negative number. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.SequenceNumberEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SequenceNumberEvent.html",
    "title": "Class SequenceNumberEvent | DryWetMIDI",
    "keywords": "Class SequenceNumberEvent Represents a Sequence Number meta event. Inheritance Object MidiEvent MetaEvent SequenceNumberEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SequenceNumberEvent : MetaEvent Remarks The MIDI sequence number meta message defines the number of a sequence in type 0 and 1 MIDI files, or the pattern number in type 2 MIDI files. Constructors SequenceNumberEvent() Initializes a new instance of the SequenceNumberEvent . Declaration public SequenceNumberEvent() SequenceNumberEvent(UInt16) Initializes a new instance of the SequenceNumberEvent with the specified number of a sequence. Declaration public SequenceNumberEvent(ushort number) Parameters Type Name Description UInt16 number The number of a sequence. Properties Number Gets or sets the number of a sequence. Declaration public ushort Number { get; set; } Property Value Type Description UInt16 Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.ResetEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ResetEvent.html",
    "title": "Class ResetEvent | DryWetMIDI",
    "keywords": "Class ResetEvent Represents Reset event. Inheritance Object MidiEvent SystemRealTimeEvent ResetEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ResetEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI reset message tells a MIDI device to reset itself. Constructors ResetEvent() Initializes a new instance of the ResetEvent . Declaration public ResetEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.ReadingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ReadingSettings.html",
    "title": "Class ReadingSettings | DryWetMIDI",
    "keywords": "Class ReadingSettings Settings of the reading engine. Inheritance Object ReadingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public class ReadingSettings Properties CustomChunkTypes Gets or sets collection of custom chunks types. These types must be derived from the MidiChunk class and have parameterless constructor. No exception will be thrown if some types don't meet these requirements. Declaration public ChunkTypesCollection CustomChunkTypes { get; set; } Property Value Type Description ChunkTypesCollection CustomMetaEventTypes Gets or sets collection of custom meta events types. These types must be derived from the MetaEvent class and have parameterless constructor. No exception will be thrown if some types don't meet these requirements. Declaration public EventTypesCollection CustomMetaEventTypes { get; set; } Property Value Type Description EventTypesCollection DecodeTextCallback Gets or sets a callback used to decode a string from the specified bytes during reading a text-based meta event. The default is null. Declaration public DecodeTextCallback DecodeTextCallback { get; set; } Property Value Type Description DecodeTextCallback ExtraTrackChunkPolicy Gets or sets reaction of the reading engine on new track chunk if already read track chunks count is greater or equals the one declared in the file's header chunk. The default is Read . Declaration public ExtraTrackChunkPolicy ExtraTrackChunkPolicy { get; set; } Property Value Type Description ExtraTrackChunkPolicy InvalidChannelEventParameterValuePolicy Gets or sets reaction of the reading engine on invalid value of a channel event's parameter value. Valid values are 0-127 so, for example, 128 is the invalid one and will be processed according with this policy. The default is Abort . Declaration public InvalidChannelEventParameterValuePolicy InvalidChannelEventParameterValuePolicy { get; set; } Property Value Type Description InvalidChannelEventParameterValuePolicy Remarks If Abort is used an instance of the InvalidChannelEventParameterValueException will be thrown if event's parameter value just read is invalid. InvalidChunkSizePolicy Gets or sets reaction of the reading engine on difference between actual chunk's size and the one declared in its header. The default is Abort . Declaration public InvalidChunkSizePolicy InvalidChunkSizePolicy { get; set; } Property Value Type Description InvalidChunkSizePolicy Remarks If Abort is used an instance of the InvalidChunkSizeException will be thrown if actual chunk's size differs from the one declared in chunk's header. InvalidMetaEventParameterValuePolicy Gets or sets reaction of the reading engine on invalid value of a meta event's parameter value. For example, 255 is the invalid value for the Scale and will be processed according with this policy. The default is Abort . Declaration public InvalidMetaEventParameterValuePolicy InvalidMetaEventParameterValuePolicy { get; set; } Property Value Type Description InvalidMetaEventParameterValuePolicy Remarks If Abort is used an instance of the InvalidMetaEventParameterValueException will be thrown if event's parameter value just read is invalid. InvalidSystemCommonEventParameterValuePolicy Gets or sets reaction of the reading engine on invalid value of a system common event's parameter value. For example, 255 is the invalid value for the Number and will be processed according with this policy. The default is Abort . Declaration public InvalidSystemCommonEventParameterValuePolicy InvalidSystemCommonEventParameterValuePolicy { get; set; } Property Value Type Description InvalidSystemCommonEventParameterValuePolicy Remarks If Abort is used an instance of the InvalidSystemCommonEventParameterValueException will be thrown if event's parameter value just read is invalid. MissedEndOfTrackPolicy Gets or sets reaction of the reading engine on missed End Of Track event. The default is Ignore . Declaration public MissedEndOfTrackPolicy MissedEndOfTrackPolicy { get; set; } Property Value Type Description MissedEndOfTrackPolicy Remarks If Abort is used an instance of the MissedEndOfTrackEventException will be thrown if track chunk doesn't end with End Of Track event. Although this event is not optional and therefore missing of it must be treated as error, you can try to read a track chunk relying on the chunk's size only. NoHeaderChunkPolicy Gets or sets reaction of the reading engine on missing of the header chunk in the MIDI file. The default is Abort . Declaration public NoHeaderChunkPolicy NoHeaderChunkPolicy { get; set; } Property Value Type Description NoHeaderChunkPolicy Remarks If Abort is used an instance of the NoHeaderChunkException will be thrown if the MIDI file doesn't contain the header chunk. NotEnoughBytesPolicy Gets or sets reaction of the reading engine on lack of bytes in the underlying stream that are needed to read some value (for example, DWORD requires 4 bytes available). The default is Abort . Declaration public NotEnoughBytesPolicy NotEnoughBytesPolicy { get; set; } Property Value Type Description NotEnoughBytesPolicy Remarks If Abort is used an instance of the NotEnoughBytesException will be thrown if the reader's underlying stream doesn't have enough bytes to read a value. SilentNoteOnPolicy Gets or sets reaction of the reading engine on Note On events with velocity 0. The default is NoteOff . Although it is recommended to treat silent Note On event as Note Off you can turn this behavior off to get original event stored in the file. Declaration public SilentNoteOnPolicy SilentNoteOnPolicy { get; set; } Property Value Type Description SilentNoteOnPolicy TextEncoding Gets or sets an Encoding that will be used to read the text of a text-based meta event. The default is ASCII . Declaration public Encoding TextEncoding { get; set; } Property Value Type Description Encoding UnexpectedTrackChunksCountPolicy Gets or sets reaction of the reading engine on unexpected track chunks count. The default is Ignore . Declaration public UnexpectedTrackChunksCountPolicy UnexpectedTrackChunksCountPolicy { get; set; } Property Value Type Description UnexpectedTrackChunksCountPolicy Remarks This policy will be taken into account if actual track chunks count is less or greater than tracks number specified in the file's header chunk. If Abort is used an instance of the UnexpectedTrackChunksCountException will be thrown if track chunks count is unexpected. UnknownChunkIdPolicy Gets or sets reaction of the reading engine on chunk with unknown ID. The default is ReadAsUnknownChunk . Declaration public UnknownChunkIdPolicy UnknownChunkIdPolicy { get; set; } Property Value Type Description UnknownChunkIdPolicy Remarks If Abort is used an instance of the UnknownChunkException will be thrown if a chunk to be read has unknown ID. UnknownFileFormatPolicy Gets or sets reaction of the reading engine on unknown file format stored in a header chunk. The default is Ignore . Declaration public UnknownFileFormatPolicy UnknownFileFormatPolicy { get; set; } Property Value Type Description UnknownFileFormatPolicy Remarks If Abort is used an instance of the UnknownFileFormatException will be thrown if file format stored in a header chunk doesn't belong to values defined by the MidiFileFormat enumeration."
  },
  "api/Melanchall.DryWetMidi.Core.ProgramNameEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ProgramNameEvent.html",
    "title": "Class ProgramNameEvent | DryWetMIDI",
    "keywords": "Class ProgramNameEvent Represents a Program Name meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent ProgramNameEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ProgramNameEvent : BaseTextEvent Remarks This optional event is used to embed the patch/program name that is called up by the immediately subsequent Bank Select and Program Change messages. It serves to aid the end user in making an intelligent program choice when using different hardware. Constructors ProgramNameEvent() Initializes a new instance of the ProgramNameEvent . Declaration public ProgramNameEvent() ProgramNameEvent(String) Initializes a new instance of the ProgramNameEvent with the specified program name. Declaration public ProgramNameEvent(string programName) Parameters Type Name Description String programName Name of the program. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.ProgramChangeEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ProgramChangeEvent.html",
    "title": "Class ProgramChangeEvent | DryWetMIDI",
    "keywords": "Class ProgramChangeEvent Represents a Program Change message. Inheritance Object MidiEvent ChannelEvent ProgramChangeEvent Inherited Members ChannelEvent.Channel ChannelEvent.Item[Int32] ChannelEvent.CloneEvent() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ProgramChangeEvent : ChannelEvent Remarks This message sent when the patch number changes. Constructors ProgramChangeEvent() Initializes a new instance of the ProgramChangeEvent . Declaration public ProgramChangeEvent() ProgramChangeEvent(SevenBitNumber) Initializes a new instance of the ProgramChangeEvent with the specified program number. Declaration public ProgramChangeEvent(SevenBitNumber programNumber) Parameters Type Name Description SevenBitNumber programNumber Program number. Properties ProgramNumber Gets or sets program (patch) number. Declaration public SevenBitNumber ProgramNumber { get; set; } Property Value Type Description SevenBitNumber Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.PortPrefixEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.PortPrefixEvent.html",
    "title": "Class PortPrefixEvent | DryWetMIDI",
    "keywords": "Class PortPrefixEvent Represents a MIDI Port meta event. Inheritance Object MidiEvent MetaEvent PortPrefixEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PortPrefixEvent : MetaEvent Remarks This optional event specifies the MIDI output port on which data within a track chunk will be transmitted. Constructors PortPrefixEvent() Initializes a new instance of the PortPrefixEvent . Declaration public PortPrefixEvent() PortPrefixEvent(Byte) Initializes a new instance of the PortPrefixEvent with the specified port. Declaration public PortPrefixEvent(byte port) Parameters Type Name Description Byte port MIDI port. Properties Port Gets or sets MIDI port. Declaration public byte Port { get; set; } Property Value Type Description Byte Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.PitchBendEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.PitchBendEvent.html",
    "title": "Class PitchBendEvent | DryWetMIDI",
    "keywords": "Class PitchBendEvent Represents a Pitch Bend Change message. Inheritance Object MidiEvent ChannelEvent PitchBendEvent Inherited Members ChannelEvent.Channel ChannelEvent.Item[Int32] ChannelEvent.CloneEvent() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PitchBendEvent : ChannelEvent Remarks This message is sent to indicate a change in the pitch bender (wheel or lever, typically). The pitch bender is measured by a fourteen bit value. Center (no pitch change) is 0x2000. Constructors PitchBendEvent() Initializes a new instance of the PitchBendEvent . Declaration public PitchBendEvent() PitchBendEvent(UInt16) Initializes a new instance of the PitchBendEvent with the specified pitch value. Declaration public PitchBendEvent(ushort pitchValue) Parameters Type Name Description UInt16 pitchValue Pitch value. Properties PitchValue Gets or sets pitch value. Declaration public ushort PitchValue { get; set; } Property Value Type Description UInt16 Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.NoteOnEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoteOnEvent.html",
    "title": "Class NoteOnEvent | DryWetMIDI",
    "keywords": "Class NoteOnEvent Represents a Note On message. Inheritance Object MidiEvent ChannelEvent NoteEvent NoteOnEvent Inherited Members NoteEvent.NoteNumber NoteEvent.Velocity ChannelEvent.Channel ChannelEvent.Item[Int32] ChannelEvent.CloneEvent() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteOnEvent : NoteEvent Remarks This message is sent when a note is depressed (start). Constructors NoteOnEvent() Initializes a new instance of the NoteOnEvent . Declaration public NoteOnEvent() NoteOnEvent(SevenBitNumber, SevenBitNumber) Initializes a new instance of the NoteOnEvent with the specified note number and velocity. Declaration public NoteOnEvent(SevenBitNumber noteNumber, SevenBitNumber velocity) Parameters Type Name Description SevenBitNumber noteNumber Note number. SevenBitNumber velocity Velocity. Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods NoteEventUtilities.GetNoteName(NoteEvent) NoteEventUtilities.GetNoteOctave(NoteEvent) NoteEventUtilities.SetNoteNumber(NoteEvent, NoteName, Int32) NoteIdUtilities.GetNoteId(NoteEvent)"
  },
  "api/Melanchall.DryWetMidi.Core.NoteOffEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoteOffEvent.html",
    "title": "Class NoteOffEvent | DryWetMIDI",
    "keywords": "Class NoteOffEvent Represents a Note Off message. Inheritance Object MidiEvent ChannelEvent NoteEvent NoteOffEvent Inherited Members NoteEvent.NoteNumber NoteEvent.Velocity ChannelEvent.Channel ChannelEvent.Item[Int32] ChannelEvent.CloneEvent() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteOffEvent : NoteEvent Remarks This message is sent when a note is released (ended). Constructors NoteOffEvent() Initializes a new instance of the NoteOffEvent . Declaration public NoteOffEvent() NoteOffEvent(SevenBitNumber, SevenBitNumber) Initializes a new instance of the NoteOffEvent with the specified note number and velocity. Declaration public NoteOffEvent(SevenBitNumber noteNumber, SevenBitNumber velocity) Parameters Type Name Description SevenBitNumber noteNumber Note number. SevenBitNumber velocity Velocity. Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods NoteEventUtilities.GetNoteName(NoteEvent) NoteEventUtilities.GetNoteOctave(NoteEvent) NoteEventUtilities.SetNoteNumber(NoteEvent, NoteName, Int32) NoteIdUtilities.GetNoteId(NoteEvent)"
  },
  "api/Melanchall.DryWetMidi.Core.NotEnoughBytesPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NotEnoughBytesPolicy.html",
    "title": "Enum NotEnoughBytesPolicy | DryWetMIDI",
    "keywords": "Enum NotEnoughBytesPolicy Specifies how reading engine should react on lack of bytes in the underlying stream that are needed to read some value (for example, DWORD requires 4 bytes available). The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum NotEnoughBytesPolicy Fields Name Description Abort Abort reading and throw an NotEnoughBytesException . Ignore Ignore lack of bytes in the reader's underlying stream and just end reading."
  },
  "api/Melanchall.DryWetMidi.Core.NotEnoughBytesException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NotEnoughBytesException.html",
    "title": "Class NotEnoughBytesException | DryWetMIDI",
    "keywords": "Class NotEnoughBytesException The exception that is thrown when a MIDI file doesn't contain enough bytes to read a value. Inheritance Object Exception MidiException NotEnoughBytesException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class NotEnoughBytesException : MidiException, ISerializable Remarks Note that this exception will be thrown only if NotEnoughBytesPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Constructors NotEnoughBytesException() Initializes a new instance of the NotEnoughBytesException . Declaration public NotEnoughBytesException() NotEnoughBytesException(String) Initializes a new instance of the NotEnoughBytesException with the specified error message. Declaration public NotEnoughBytesException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. NotEnoughBytesException(String, Exception) Initializes a new instance of the NotEnoughBytesException class with the specified error message and a reference to the inner exception that is the cause of this exception. Declaration public NotEnoughBytesException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. NotEnoughBytesException(String, Int64, Int64) Initializes a new instance of the NotEnoughBytesException with the specified error message, expected count of bytes and the actual one available in the reader's underlying stream. Declaration public NotEnoughBytesException(string message, long expectedCount, long actualCount) Parameters Type Name Description String message The error message that explains the reason for the exception. Int64 expectedCount Expected count of bytes. Int64 actualCount Actual count of bytes available in the reader's underlying stream. Properties ActualCount Gets the actual count of bytes available in the reader's underlying stream. Declaration public long ActualCount { get; } Property Value Type Description Int64 ExpectedCount Gets the expected count of bytes. Declaration public long ExpectedCount { get; } Property Value Type Description Int64 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.NoteEventUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoteEventUtilities.html",
    "title": "Class NoteEventUtilities | DryWetMIDI",
    "keywords": "Class NoteEventUtilities Set of extension methods for NoteOnEvent and NoteOffEvent events. Inheritance Object NoteEventUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public static class NoteEventUtilities Methods GetNoteName(NoteEvent) Gets name of the note presented by the specified NoteEvent . Declaration public static NoteName GetNoteName(this NoteEvent noteEvent) Parameters Type Name Description NoteEvent noteEvent Note event to get note name of. Returns Type Description NoteName Note name of the noteEvent . Exceptions Type Condition ArgumentNullException noteEvent is null. GetNoteOctave(NoteEvent) Gets octave of the note presented by the specified NoteOnEvent . Declaration public static int GetNoteOctave(this NoteEvent noteEvent) Parameters Type Name Description NoteEvent noteEvent Note event to get note octave of. Returns Type Description Int32 Note octave of the noteEvent . Remarks Octave number will be returned in scientific pitch notation which means that 4 will be returned for 60 note number. Exceptions Type Condition ArgumentNullException noteEvent is null. IsNoteOnCorrespondToNoteOff(NoteOnEvent, NoteOffEvent) Checks if the specified NoteOnEvent corresponds to the specified NoteOffEvent . Declaration public static bool IsNoteOnCorrespondToNoteOff(NoteOnEvent noteOnEvent, NoteOffEvent noteOffEvent) Parameters Type Name Description NoteOnEvent noteOnEvent NoteOnEvent to check NoteOffEvent for. NoteOffEvent noteOffEvent NoteOffEvent to check NoteOnEvent for. Returns Type Description Boolean true if noteOnEvent corresponds to noteOffEvent . Remarks Note On event corresponds to Note Off one if it has the same note's number and channel, i.e. those events make up a note. Exceptions Type Condition ArgumentNullException noteOnEvent is null. -or- noteOffEvent is null. SetNoteNumber(NoteEvent, NoteName, Int32) Sets the note number of the NoteEvent with the specified note name and octave. Declaration public static void SetNoteNumber(this NoteEvent noteEvent, NoteName noteName, int octave) Parameters Type Name Description NoteEvent noteEvent Note event to set the note number of. NoteName noteName Name of the note. Int32 octave Number of the octave. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to get the number of the middle C. Exceptions Type Condition ArgumentNullException noteEvent is null. InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave."
  },
  "api/Melanchall.DryWetMidi.Core.NoteEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoteEvent.html",
    "title": "Class NoteEvent | DryWetMIDI",
    "keywords": "Class NoteEvent Base class that represents a Note On or a Note Off message. Inheritance Object MidiEvent ChannelEvent NoteEvent NoteOffEvent NoteOnEvent Inherited Members ChannelEvent.Channel ChannelEvent.Item[Int32] ChannelEvent.CloneEvent() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class NoteEvent : ChannelEvent Constructors NoteEvent(MidiEventType) Initializes a new instance of the NoteEvent . Declaration protected NoteEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType NoteEvent(MidiEventType, SevenBitNumber, SevenBitNumber) Initializes a new instance of the NoteEvent with the specified note number and velocity. Declaration protected NoteEvent(MidiEventType eventType, SevenBitNumber noteNumber, SevenBitNumber velocity) Parameters Type Name Description MidiEventType eventType The type of event. SevenBitNumber noteNumber Note number. SevenBitNumber velocity Velocity. Exceptions Type Condition InvalidEnumArgumentException eventType specified an invalid value. Properties NoteNumber Gets or sets note number. Declaration public SevenBitNumber NoteNumber { get; set; } Property Value Type Description SevenBitNumber Velocity Gets or sets velocity. Declaration public SevenBitNumber Velocity { get; set; } Property Value Type Description SevenBitNumber Extension Methods NoteEventUtilities.GetNoteName(NoteEvent) NoteEventUtilities.GetNoteOctave(NoteEvent) NoteEventUtilities.SetNoteNumber(NoteEvent, NoteName, Int32) NoteIdUtilities.GetNoteId(NoteEvent)"
  },
  "api/Melanchall.DryWetMidi.Core.NoteAftertouchEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoteAftertouchEvent.html",
    "title": "Class NoteAftertouchEvent | DryWetMIDI",
    "keywords": "Class NoteAftertouchEvent Represents a Polyphonic Key Pressure (Aftertouch) message. Inheritance Object MidiEvent ChannelEvent NoteAftertouchEvent Inherited Members ChannelEvent.Channel ChannelEvent.Item[Int32] ChannelEvent.CloneEvent() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteAftertouchEvent : ChannelEvent Remarks This message is most often sent by pressing down on the key after it \"bottoms out\". Constructors NoteAftertouchEvent() Initializes a new instance of the NoteAftertouchEvent . Declaration public NoteAftertouchEvent() NoteAftertouchEvent(SevenBitNumber, SevenBitNumber) Initializes a new instance of the NoteAftertouchEvent with the specified note number and aftertouch (pressure) value. Declaration public NoteAftertouchEvent(SevenBitNumber noteNumber, SevenBitNumber aftertouchValue) Parameters Type Name Description SevenBitNumber noteNumber Note number. SevenBitNumber aftertouchValue Aftertouch (pressure) value. Properties AftertouchValue Gets or sets aftertouch (pressure) value. Declaration public SevenBitNumber AftertouchValue { get; set; } Property Value Type Description SevenBitNumber NoteNumber Gets or sets note number. Declaration public SevenBitNumber NoteNumber { get; set; } Property Value Type Description SevenBitNumber Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.NormalSysExEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NormalSysExEvent.html",
    "title": "Class NormalSysExEvent | DryWetMIDI",
    "keywords": "Class NormalSysExEvent Represents a normal system exclusive event. Inheritance Object MidiEvent SysExEvent NormalSysExEvent Inherited Members SysExEvent.EndOfEventByte SysExEvent.Completed SysExEvent.Data SysExEvent.CloneEvent() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NormalSysExEvent : SysExEvent Remarks A MIDI event that carries the MIDI system exclusive message, also known as a \"MIDI sysex message\", carries information that is specific to the manufacturer of the MIDI device receiving the message. The action that this message prompts for can be anything. Note that although the terminal 0xF7 is redundant (strictly speaking, due to the use of a length parameter) it must be included. System exclisive events can be splitted into multiple packets. In this case the first packet uses the 0xF0 status (such event will be read as NormalSysExEvent ), whereas the second and subsequent packets use the 0xF7 status (suzh events will be read as EscapeSysExEvent ). This use of the 0xF7 status is referred to as a continuation event. Constructors NormalSysExEvent() Initializes a new instance of the NormalSysExEvent . Declaration public NormalSysExEvent() NormalSysExEvent(Byte[]) Initializes a new instance of the NormalSysExEvent with the specified data. Declaration public NormalSysExEvent(byte[] data) Parameters Type Name Description Byte [] data Data of the sysex event. Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.MidiWriter.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiWriter.html",
    "title": "Class MidiWriter | DryWetMIDI",
    "keywords": "Class MidiWriter Writer of the MIDI data types. Inheritance Object MidiWriter Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiWriter : IDisposable Constructors MidiWriter(Stream) Initializes a new instance of the MidiWriter with the specified stream. Declaration public MidiWriter(Stream stream) Parameters Type Name Description Stream stream Stream to write MIDI file to. Exceptions Type Condition ArgumentNullException stream is null. ArgumentException stream does not support writing, or is already closed. Methods Dispose() Releases all resources used by the current instance of the MidiWriter class. Declaration public void Dispose() Flush() Clears all buffers for the current writer and causes any buffered data to be written to the underlying file. Declaration public void Flush() Write3ByteDword(UInt32) Writes a DWORD value (32-bit unsigned integer) to the underlying stream as three bytes and advances the current position by three bytes. Declaration public void Write3ByteDword(uint value) Parameters Type Name Description UInt32 value DWORD value to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteByte(Byte) Writes an unsigned byte to the underlying stream and advances the stream position by one byte. Declaration public void WriteByte(byte value) Parameters Type Name Description Byte value The unsigned byte to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteBytes(Byte[]) Writes a byte array to the underlying stream. Declaration public void WriteBytes(byte[] bytes) Parameters Type Name Description Byte [] bytes A byte array containing the data to write. Exceptions Type Condition ArgumentNullException bytes is null. ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteDword(UInt32) Writes a DWORD value (32-bit unsigned integer) to the underlying stream and advances the current position by four bytes. Declaration public void WriteDword(uint value) Parameters Type Name Description UInt32 value DWORD value to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteInt16(Int16) Writes a INT16 value (16-bit signed integer) to the underlying stream and advances the current position by two bytes. Declaration public void WriteInt16(short value) Parameters Type Name Description Int16 value INT16 value to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteSByte(SByte) Writes a signed byte to the underlying stream and advances the stream position by one byte. Declaration public void WriteSByte(sbyte value) Parameters Type Name Description SByte value The signed byte to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteString(String) Writes a string to the underlying stream as set of ASCII bytes. Declaration public void WriteString(string value) Parameters Type Name Description String value The string to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteVlqNumber(Int32) Writes a 32-bit signed integer to the underlying stream in compressed format called variable-length quantity (VLQ). Declaration public void WriteVlqNumber(int value) Parameters Type Name Description Int32 value The value to write. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteVlqNumber(Int64) Writes a 64-bit signed integer to the underlying stream in compressed format called variable-length quantity (VLQ). Declaration public void WriteVlqNumber(long value) Parameters Type Name Description Int64 value The value to write. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteWord(UInt16) Writes a WORD value (16-bit unsigned integer) to the underlying stream and advances the current position by two bytes. Declaration public void WriteWord(ushort value) Parameters Type Name Description UInt16 value WORD value to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Core.MidiTimeCodeType.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiTimeCodeType.html",
    "title": "Enum MidiTimeCodeType | DryWetMIDI",
    "keywords": "Enum MidiTimeCodeType MIDI time code type (frames per second). Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum MidiTimeCodeType : byte Fields Name Description Thirty 30 frames per second. ThirtyDrop 29.97 frames per second (also called \"30 drop\"). TwentyFive 25 frames per second. TwentyFour 24 frames per second."
  },
  "api/Melanchall.DryWetMidi.Core.MidiTimeCodeEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiTimeCodeEvent.html",
    "title": "Class MidiTimeCodeEvent | DryWetMIDI",
    "keywords": "Class MidiTimeCodeEvent Represents MIDI Time Code (MIDI Quarter Frame) event. Inheritance Object MidiEvent SystemCommonEvent MidiTimeCodeEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiTimeCodeEvent : SystemCommonEvent Remarks A MIDI event that carries the MIDI quarter frame message is timing information in the hours:minutes:seconds:frames format (similar to SMPTE) that is used to synchronize MIDI devices. Constructors MidiTimeCodeEvent() Initializes a new instance of the MidiTimeCodeEvent . Declaration public MidiTimeCodeEvent() MidiTimeCodeEvent(MidiTimeCodeComponent, FourBitNumber) Initializes a new instance of the MidiTimeCodeEvent with the specified time code component and its value. Declaration public MidiTimeCodeEvent(MidiTimeCodeComponent component, FourBitNumber componentValue) Parameters Type Name Description MidiTimeCodeComponent component MIDI time code component. FourBitNumber componentValue Value of component . Exceptions Type Condition InvalidEnumArgumentException component specified an invalid value. Properties Component Gets or sets the MIDI time code component presented by the current MidiTimeCodeEvent . Declaration public MidiTimeCodeComponent Component { get; set; } Property Value Type Description MidiTimeCodeComponent ComponentValue Gets or sets value of the MIDI time code component presented by the current MidiTimeCodeEvent . Declaration public FourBitNumber ComponentValue { get; set; } Property Value Type Description FourBitNumber Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.MidiTimeCodeComponent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiTimeCodeComponent.html",
    "title": "Enum MidiTimeCodeComponent | DryWetMIDI",
    "keywords": "Enum MidiTimeCodeComponent MIDI time code component. Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum MidiTimeCodeComponent : byte Fields Name Description FramesLsb LSB of frames number. FramesMsb MSB of frames number. HoursLsb LSB of hours number. HoursMsbAndTimeCodeType MSB of hours number and time code type. MinutesLsb LSB of minutes number. MinutesMsb MSB of minutes number. SecondsLsb LSB of seconds number. SecondsMsb MSB of seconds number."
  },
  "api/Melanchall.DryWetMidi.Core.MidiChunk.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiChunk.html",
    "title": "Class MidiChunk | DryWetMIDI",
    "keywords": "Class MidiChunk Represents a chunk of Standard MIDI file. Inheritance Object MidiChunk TrackChunk UnknownChunk Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class MidiChunk Remarks MIDI Files are made up of chunks. Each chunk has a 4-character ASCII string ID and a 32-bit length, which is the number of bytes in the chunk. This structure allows future chunk types to be designed which may be easily be ignored if encountered by a program written before the chunk type is introduced. The length of the chunk refers to the number of bytes of data which follow (the eight bytes of ID and length are not included).Therefore, a chunk with a length of 6 would actually occupy 14 bytes in the file. Constructors MidiChunk(String) Initializes a new instance of the MidiChunk with the specified ID. Declaration public MidiChunk(string id) Parameters Type Name Description String id The type of the chunk. Exceptions Type Condition ArgumentNullException id is null. ArgumentException id is empty, or consists only of white-space characters; or length of id doesn't equal 4. Fields IdLength The length of a chunk's ID. This field is constant. Declaration public const int IdLength = 4 Field Value Type Description Int32 Properties ChunkId Gets 4-character ID of the chunk which specifies its type. Declaration public string ChunkId { get; } Property Value Type Description String Methods Clone() Clones chunk by creating a copy of it. Declaration public abstract MidiChunk Clone() Returns Type Description MidiChunk Copy of the chunk. GetContentSize(WritingSettings) Gets size of chunk's content as number of bytes required to write it according to specified WritingSettings . Declaration protected abstract uint GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the chunk's content will be written. Returns Type Description UInt32 Number of bytes required to write chunk's content. ReadContent(MidiReader, ReadingSettings, UInt32) Reads content of a chunk. Content is a part of chunk's data without its header (ID and size). Declaration protected abstract void ReadContent(MidiReader reader, ReadingSettings settings, uint size) Parameters Type Name Description MidiReader reader Reader to read the chunk's content with. ReadingSettings settings Settings according to which the chunk's content must be read. UInt32 size Expected size of the content taken from the chunk's header. WriteContent(MidiWriter, WritingSettings) Writes content of a chunk. Content is a part of chunk's data without its header (ID and size). Declaration protected abstract void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the chunk's content with. WritingSettings settings Settings according to which the chunk's content must be written."
  },
  "api/Melanchall.DryWetMidi.Core.MetaEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MetaEvent.html",
    "title": "Class MetaEvent | DryWetMIDI",
    "keywords": "Class MetaEvent Represents a MIDI file meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent ChannelPrefixEvent KeySignatureEvent PortPrefixEvent SequenceNumberEvent SequencerSpecificEvent SetTempoEvent SmpteOffsetEvent TimeSignatureEvent UnknownMetaEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.CloneEvent() MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class MetaEvent : MidiEvent Remarks Meta event specifies non-MIDI information useful to this format or to sequencers. Constructors MetaEvent(MidiEventType) Initializes a new instance of the MetaEvent with the specified event type. Declaration protected MetaEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType The type of event. Exceptions Type Condition InvalidEnumArgumentException eventType specified an invalid value. Methods GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected abstract int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected abstract void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected abstract void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written."
  },
  "api/Melanchall.DryWetMidi.Core.MarkerEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MarkerEvent.html",
    "title": "Class MarkerEvent | DryWetMIDI",
    "keywords": "Class MarkerEvent Represents a Marker meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent MarkerEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MarkerEvent : BaseTextEvent Remarks The MIDI marker meta message marks a point in time for a MIDI sequence. Constructors MarkerEvent() Initializes a new instance of the MarkerEvent . Declaration public MarkerEvent() MarkerEvent(String) Initializes a new instance of the MarkerEvent with the specified text of marker. Declaration public MarkerEvent(string text) Parameters Type Name Description String text Text of the marker. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.LyricEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.LyricEvent.html",
    "title": "Class LyricEvent | DryWetMIDI",
    "keywords": "Class LyricEvent Represents a Lyric meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent LyricEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class LyricEvent : BaseTextEvent Remarks The MIDI lyrics meta message shows the lyrics of a song at a particular time in the MIDI sequence. Constructors LyricEvent() Initializes a new instance of the LyricEvent . Declaration public LyricEvent() LyricEvent(String) Initializes a new instance of the LyricEvent with the specified text of lyrics. Declaration public LyricEvent(string text) Parameters Type Name Description String text Text of the lyrics. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValueException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValueException.html",
    "title": "Class InvalidSystemCommonEventParameterValueException | DryWetMIDI",
    "keywords": "Class InvalidSystemCommonEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a system common event. Inheritance Object Exception MidiException InvalidSystemCommonEventParameterValueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class InvalidSystemCommonEventParameterValueException : MidiException, ISerializable Remarks Note that this exception will be thrown only if InvalidSystemCommonEventParameterValuePolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Constructors InvalidSystemCommonEventParameterValueException() Initializes a new instance of the InvalidSystemCommonEventParameterValueException . Declaration public InvalidSystemCommonEventParameterValueException() InvalidSystemCommonEventParameterValueException(String, Int32) Initializes a new instance of the InvalidSystemCommonEventParameterValueException with the specified error message and invalid value that represents an invalid parameter value. Declaration public InvalidSystemCommonEventParameterValueException(string message, int value) Parameters Type Name Description String message The message that describes the error. Int32 value The value of the system common event's parameter that caused this exception. Properties Value Gets the value of the system common event's parameter that caused this exception. Declaration public int Value { get; } Property Value Type Description Int32 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidMidiTimeCodeComponentException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidMidiTimeCodeComponentException.html",
    "title": "Class InvalidMidiTimeCodeComponentException | DryWetMIDI",
    "keywords": "Class InvalidMidiTimeCodeComponentException The exception that is thrown when the reading engine has encountered an invalid MIDI time code component (i.e. a value that doesn't belong to values of MidiTimeCodeComponent ) during reading MidiTimeCodeEvent . Inheritance Object Exception MidiException InvalidMidiTimeCodeComponentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class InvalidMidiTimeCodeComponentException : MidiException, ISerializable Constructors InvalidMidiTimeCodeComponentException() Initializes a new instance of the InvalidMidiTimeCodeComponentException . Declaration public InvalidMidiTimeCodeComponentException() InvalidMidiTimeCodeComponentException(String, Byte) Initializes a new instance of the InvalidMidiTimeCodeComponentException with the specified error message and invalid value that represents MIDI time code component. Declaration public InvalidMidiTimeCodeComponentException(string message, byte value) Parameters Type Name Description String message The message that describes the error. Byte value The value representing MIDI time code component that caused this exception. Properties Value Gets the value representing MIDI time code component that caused this exception. Declaration public byte Value { get; } Property Value Type Description Byte Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidEventSizePolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidEventSizePolicy.html",
    "title": "Enum InvalidEventSizePolicy | DryWetMIDI",
    "keywords": "Enum InvalidEventSizePolicy Specifies how reading engine should react on invalid expected size of an event. The default is Ignore . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum InvalidEventSizePolicy : byte Remarks Some events (at now, meta events only) are written along with the size of their content. For example, for the Set Tempo event 0 should be written as a size since this event has no parameters. If read size is not 0 and Abort option is used, an exception will be thrown. Fields Name Description Abort Abort reading and throw an exception. Ignore Ignore invalid declared size of an event."
  },
  "api/Melanchall.DryWetMidi.Core.InvalidChunkSizePolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidChunkSizePolicy.html",
    "title": "Enum InvalidChunkSizePolicy | DryWetMIDI",
    "keywords": "Enum InvalidChunkSizePolicy Specifies how reading engine should react on difference between actual chunk's size and the one declared in its header. The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum InvalidChunkSizePolicy : byte Fields Name Description Abort Abort reading and throw an InvalidChunkSizeException . Ignore Ignore difference between actual chunk's size and the declared one."
  },
  "api/Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValueException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValueException.html",
    "title": "Class InvalidChannelEventParameterValueException | DryWetMIDI",
    "keywords": "Class InvalidChannelEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a channel event. Inheritance Object Exception MidiException InvalidChannelEventParameterValueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class InvalidChannelEventParameterValueException : MidiException, ISerializable Remarks Note that this exception will be thrown only if InvalidChannelEventParameterValuePolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Constructors InvalidChannelEventParameterValueException() Initializes a new instance of the InvalidChannelEventParameterValueException . Declaration public InvalidChannelEventParameterValueException() InvalidChannelEventParameterValueException(String, Byte) Initializes a new instance of the InvalidChannelEventParameterValueException with the specified error message and invalid channel event's parameter value. Declaration public InvalidChannelEventParameterValueException(string message, byte value) Parameters Type Name Description String message The message that describes the error. Byte value The value of the channel event's parameter that caused this exception. Properties Value Gets the value of the channel event's parameter that caused this exception. Declaration public byte Value { get; } Property Value Type Description Byte Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.InstrumentNameEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InstrumentNameEvent.html",
    "title": "Class InstrumentNameEvent | DryWetMIDI",
    "keywords": "Class InstrumentNameEvent Represents an Instrument Name meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent InstrumentNameEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class InstrumentNameEvent : BaseTextEvent Remarks The MIDI instrument name meta message shows the name of the instrument used in the current track. This optional event is used to provide a textual clue regarding the intended instrumentation for a track (e.g. 'Piano' or 'Flute', etc). If used, it is reccommended to place this event near the start of a track. Constructors InstrumentNameEvent() Initializes a new instance of the InstrumentNameEvent . Declaration public InstrumentNameEvent() InstrumentNameEvent(String) Initializes a new instance of the InstrumentNameEvent with the specified instrument name. Declaration public InstrumentNameEvent(string instrumentName) Parameters Type Name Description String instrumentName Name of the instrument. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings.html",
    "title": "Class NoteCsvConversionSettings | DryWetMIDI",
    "keywords": "Class NoteCsvConversionSettings Settings according to which instances of the Note must be read from or written to CSV representation. Inheritance Object NoteCsvConversionSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteCsvConversionSettings Properties CsvDelimiter Gets or sets delimiter used to separate values in CSV representation. The default value is comma. Declaration public char CsvDelimiter { get; set; } Property Value Type Description Char NoteLengthType Gets or sets the type of a note length (metric, bar/beat and so on) which should be used to write to or read from CSV. The default value is Midi . Declaration public TimeSpanType NoteLengthType { get; set; } Property Value Type Description TimeSpanType Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. NoteNumberFormat Gets or sets the format which should be used to write a note's number to or read it from CSV. The default value is NoteNumber . Declaration public NoteNumberFormat NoteNumberFormat { get; set; } Property Value Type Description NoteNumberFormat Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. TimeType Gets or sets format of timestamps inside CSV representation. The default value is Midi Declaration public TimeSpanType TimeType { get; set; } Property Value Type Description TimeSpanType Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Tools.MidiFileSplitter.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.MidiFileSplitter.html",
    "title": "Class MidiFileSplitter | DryWetMIDI",
    "keywords": "Class MidiFileSplitter Provides methods to split a MIDI file. Inheritance Object MidiFileSplitter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class MidiFileSplitter Methods SkipPart(MidiFile, ITimeSpan, SliceMidiFileSettings) Skips part of the specified length of MIDI file and returns remaining part as an instance of MidiFile . Declaration public static MidiFile SkipPart(this MidiFile midiFile, ITimeSpan partLength, SliceMidiFileSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to skip part of. ITimeSpan partLength The length of part to skip. SliceMidiFileSettings settings Settings according to which midiFile should be splitted. Returns Type Description MidiFile MidiFile which is result of skipping a part of the midiFile . Exceptions Type Condition ArgumentNullException midiFile is null. -or- partLength is null. SplitByChannel(MidiFile) Splits MidiFile by channel. Declaration public static IEnumerable<MidiFile> SplitByChannel(this MidiFile midiFile) Parameters Type Name Description MidiFile midiFile MidiFile to split. Returns Type Description IEnumerable < MidiFile > Collection of MidiFile where each file contains events for single channel. Remarks Channel events will be separated by channel and copied to corresponding new files. All meta and system exclusive events will be copied to all the new files. Non-track chunks will not be copied to any of the new files. Exceptions Type Condition ArgumentNullException midiFile is null. SplitByGrid(MidiFile, IGrid, SliceMidiFileSettings) Splits MidiFile by the specified grid. Declaration public static IEnumerable<MidiFile> SplitByGrid(this MidiFile midiFile, IGrid grid, SliceMidiFileSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split. IGrid grid Grid to split midiFile by. SliceMidiFileSettings settings Settings according to which file should be splitted. Returns Type Description IEnumerable < MidiFile > Collection of MidiFile produced during splitting the input file by grid. Remarks Non-track chunks will not be copied to any of the new files. Exceptions Type Condition ArgumentNullException midiFile is null. -or- grid is null. SplitByNotes(MidiFile) Splits MidiFile by notes. Declaration public static IEnumerable<MidiFile> SplitByNotes(this MidiFile midiFile) Parameters Type Name Description MidiFile midiFile MidiFile to split. Returns Type Description IEnumerable < MidiFile > Collection of MidiFile where each file contains events for single note number. Remarks Note events will be separated by note number and copied to corresponding new files. All other channel events, meta and system exclusive events will be copied to all the new files. Non-track chunks will not be copied to any of the new files. Exceptions Type Condition ArgumentNullException midiFile is null. TakePart(MidiFile, ITimeSpan, ITimeSpan, SliceMidiFileSettings) Takes part of the specified length of a MIDI file (starting at the specified time within the file) and returns it as an instance of MidiFile . Declaration public static MidiFile TakePart(this MidiFile midiFile, ITimeSpan partStart, ITimeSpan partLength, SliceMidiFileSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to take part of. ITimeSpan partStart The start time of part to take. ITimeSpan partLength The length of part to take. SliceMidiFileSettings settings Settings according to which midiFile should be splitted. Returns Type Description MidiFile MidiFile which is part of the midiFile . Exceptions Type Condition ArgumentNullException midiFile is null. -or- partStart is null. -or- partLength is null. TakePart(MidiFile, ITimeSpan, SliceMidiFileSettings) Takes part of the specified length of a MIDI file (starting at the beginning of the file) and returns it as an instance of MidiFile . Declaration public static MidiFile TakePart(this MidiFile midiFile, ITimeSpan partLength, SliceMidiFileSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to take part of. ITimeSpan partLength The length of part to take. SliceMidiFileSettings settings Settings according to which midiFile should be splitted. Returns Type Description MidiFile MidiFile which is part of the midiFile . Exceptions Type Condition ArgumentNullException midiFile is null. -or- partLength is null."
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsQuantizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsQuantizingSettings.html",
    "title": "Class ChordsQuantizingSettings | DryWetMIDI",
    "keywords": "Class ChordsQuantizingSettings Settings according to which chords should be quantized. Inheritance Object QuantizingSettings < Chord > LengthedObjectsQuantizingSettings < Chord > ChordsQuantizingSettings Inherited Members LengthedObjectsQuantizingSettings<Chord>.LengthType LengthedObjectsQuantizingSettings<Chord>.QuantizingTarget LengthedObjectsQuantizingSettings<Chord>.QuantizingBeyondZeroPolicy LengthedObjectsQuantizingSettings<Chord>.QuantizingBeyondFixedEndPolicy LengthedObjectsQuantizingSettings<Chord>.FixOppositeEnd QuantizingSettings<Chord>.DistanceCalculationType QuantizingSettings<Chord>.QuantizingLevel QuantizingSettings<Chord>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public class ChordsQuantizingSettings : LengthedObjectsQuantizingSettings<Chord>"
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsQuantizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsQuantizerUtilities.html",
    "title": "Class ChordsQuantizerUtilities | DryWetMIDI",
    "keywords": "Class ChordsQuantizerUtilities Provides methods to quantize chords time. Inheritance Object ChordsQuantizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class ChordsQuantizerUtilities Methods QuantizeChords(MidiFile, IGrid, Int64, ChordsQuantizingSettings) Quantizes chords contained in the specified MidiFile . Declaration public static void QuantizeChords(this MidiFile midiFile, IGrid grid, long notesTolerance = 0L, ChordsQuantizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to quantize chords in. IGrid grid Grid to quantize objects by. Int64 notesTolerance Chords tolerance that defines maximum distance of chords from the start of the first chord of a chord. Chords within this tolerance will be considered as a chord. ChordsQuantizingSettings settings Settings according to which chords should be quantized. Exceptions Type Condition ArgumentNullException midiFile is null. -or- grid is null. InvalidOperationException Chord is going to be moved beyond zero. -or- Chord's end is going to be moved beyond the chord's fixed end. ArgumentOutOfRangeException notesTolerance is negative. QuantizeChords(TrackChunk, IGrid, TempoMap, Int64, ChordsQuantizingSettings) Quantizes chords contained in the specified TrackChunk . Declaration public static void QuantizeChords(this TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, long notesTolerance = 0L, ChordsQuantizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to quantize chords in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. Int64 notesTolerance Chords tolerance that defines maximum distance of chords from the start of the first chord of a chord. Chords within this tolerance will be considered as a chord. ChordsQuantizingSettings settings Settings according to which chords should be quantized. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- grid is null. -or- tempoMap is null. InvalidOperationException Chord is going to be moved beyond zero. -or- Chord's end is going to be moved beyond the chord's fixed end. ArgumentOutOfRangeException notesTolerance is negative. QuantizeChords(IEnumerable<TrackChunk>, IGrid, TempoMap, Int64, ChordsQuantizingSettings) Quantizes chords contained in the specified collection of TrackChunk . Declaration public static void QuantizeChords(this IEnumerable<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, long notesTolerance = 0L, ChordsQuantizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to quantize chords in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. Int64 notesTolerance Chords tolerance that defines maximum distance of chords from the start of the first chord of a chord. Chords within this tolerance will be considered as a chord. ChordsQuantizingSettings settings Settings according to which chords should be quantized. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- grid is null. -or- tempoMap is null. InvalidOperationException Chord is going to be moved beyond zero. -or- Chord's end is going to be moved beyond the chord's fixed end. ArgumentOutOfRangeException notesTolerance is negative."
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsQuantizer.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsQuantizer.html",
    "title": "Class ChordsQuantizer | DryWetMIDI",
    "keywords": "Class ChordsQuantizer Provides methods to quantize chords time. Inheritance Object Quantizer < Chord , ChordsQuantizingSettings > LengthedObjectsQuantizer < Chord , ChordsQuantizingSettings > ChordsQuantizer Inherited Members LengthedObjectsQuantizer<Chord, ChordsQuantizingSettings>.Quantize(IEnumerable<Chord>, IGrid, TempoMap, ChordsQuantizingSettings) LengthedObjectsQuantizer<Chord, ChordsQuantizingSettings>.GetObjectTime(Chord, ChordsQuantizingSettings) LengthedObjectsQuantizer<Chord, ChordsQuantizingSettings>.SetObjectTime(Chord, Int64, ChordsQuantizingSettings) LengthedObjectsQuantizer<Chord, ChordsQuantizingSettings>.OnObjectQuantizing(Chord, QuantizedTime, IGrid, TempoMap, ChordsQuantizingSettings) Quantizer<Chord, ChordsQuantizingSettings>.QuantizeInternal(IEnumerable<Chord>, IGrid, TempoMap, ChordsQuantizingSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public class ChordsQuantizer : LengthedObjectsQuantizer<Chord, ChordsQuantizingSettings>"
  },
  "api/Melanchall.DryWetMidi.Standards.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.html",
    "title": "Namespace Melanchall.DryWetMidi.Standards | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Standards Classes GeneralMidi The class which provides information about the General MIDI Level 1 standard. GeneralMidi2Utilities Provides utilities for General MIDI Level 2. GeneralMidiUtilities Provides utilities for General MIDI Level 1. Enums GeneralMidi2Percussion General MIDI Level 2 percussion notes. GeneralMidi2Program General MIDI Level 2 program (patch). GeneralMidiPercussion General MIDI Level 1 percussion notes. GeneralMidiProgram General MIDI Level 1 program (patch)."
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidiUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidiUtilities.html",
    "title": "Class GeneralMidiUtilities | DryWetMIDI",
    "keywords": "Class GeneralMidiUtilities Provides utilities for General MIDI Level 1. Inheritance Object GeneralMidiUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public static class GeneralMidiUtilities Methods AsSevenBitNumber(GeneralMidiPercussion) Converts GeneralMidiPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidiPercussion percussion) Parameters Type Name Description GeneralMidiPercussion percussion GeneralMidiPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralMidiProgram) Converts GeneralMidiProgram to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidiProgram program) Parameters Type Name Description GeneralMidiProgram program GeneralMidiProgram to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the program . Exceptions Type Condition InvalidEnumArgumentException program specified an invalid value. GetNoteOffEvent(GeneralMidiPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General MIDI Level 1 percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralMidiPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidiPercussion percussion GeneralMidiPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralMidiPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General MIDI Level 1 percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralMidiPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidiPercussion percussion GeneralMidiPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetProgramEvent(GeneralMidiProgram, FourBitNumber) Gets an instance of the ProgramChangeEvent corresponding to the specified General MIDI Level 1 program. Declaration public static MidiEvent GetProgramEvent(this GeneralMidiProgram program, FourBitNumber channel) Parameters Type Name Description GeneralMidiProgram program GeneralMidiProgram to get an event for. FourBitNumber channel Channel an event should be created for. Returns Type Description MidiEvent An instance of the ProgramChangeEvent corresponding to the program . Exceptions Type Condition InvalidEnumArgumentException program specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidiProgram.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidiProgram.html",
    "title": "Enum GeneralMidiProgram | DryWetMIDI",
    "keywords": "Enum GeneralMidiProgram General MIDI Level 1 program (patch). Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidiProgram : byte Fields Name Description Accordion 'Accordion' General MIDI program. AcousticBass 'Acoustic Bass' General MIDI program. AcousticGrandPiano 'Acoustic Grand Piano' General MIDI program. AcousticGuitar1 'Acoustic Guitar (nylon)' General MIDI program. AcousticGuitar2 'Acoustic Guitar (steel)' General MIDI program. Agogo 'Agogo' General MIDI program. AltoSax 'Alto Sax' General MIDI program. Applause 'Applause' General MIDI program. BagPipe 'Bag pipe' General MIDI program. Banjo 'Banjo' General MIDI program. BaritoneSax 'Baritone Sax' General MIDI program. Bassoon 'Bassoon' General MIDI program. BirdTweet 'Bird Tweet' General MIDI program. BlownBottle 'Blown Bottle' General MIDI program. BrassSection 'Brass Section' General MIDI program. BreathNoise 'Breath Noise' General MIDI program. BrightAcousticPiano 'Bright Acoustic Piano' General MIDI program. Celesta 'Celesta' General MIDI program. Cello 'Cello' General MIDI program. ChoirAahs 'Choir Aahs' General MIDI program. ChurchOrgan 'Church Organ' General MIDI program. Clarinet 'Clarinet' General MIDI program. Clavi 'Clavi' General MIDI program. Contrabass 'Contrabass' General MIDI program. DistortionGuitar 'Distortion Guitar' General MIDI program. DrawbarOrgan 'Drawbar Organ' General MIDI program. Dulcimer 'Dulcimer' General MIDI program. ElectricBass1 'Electric Bass (finger)' General MIDI program. ElectricBass2 'Electric Bass (pick)' General MIDI program. ElectricGrandPiano 'Electric Grand Piano' General MIDI program. ElectricGuitar1 'Electric Guitar (jazz)' General MIDI program. ElectricGuitar2 'Electric Guitar (clean)' General MIDI program. ElectricGuitar3 'Electric Guitar (muted)' General MIDI program. ElectricPiano1 'Electric Piano 1' General MIDI program. ElectricPiano2 'Electric Piano 2' General MIDI program. EnglishHorn 'English Horn' General MIDI program. Fiddle 'Fiddle' General MIDI program. Flute 'Flute' General MIDI program. FrenchHorn 'French Horn' General MIDI program. FretlessBass 'Fretless Bass' General MIDI program. Fx1 'FX 1 (rain)' General MIDI program. Fx2 'FX 2 (soundtrack)' General MIDI program. Fx3 'FX 3 (crystal)' General MIDI program. Fx4 'FX 4 (atmosphere)' General MIDI program. Fx5 'FX 5 (brightness)' General MIDI program. Fx6 'FX 6 (goblins)' General MIDI program. Fx7 'FX 7 (echoes)' General MIDI program. Fx8 'FX 8 (sci-fi)' General MIDI program. Glockenspiel 'Glockenspiel' General MIDI program. GuitarFretNoise 'Guitar Fret Noise' General MIDI program. GuitarHarmonics 'Guitar harmonics' General MIDI program. Gunshot 'Gunshot' General MIDI program. Harmonica 'Harmonica' General MIDI program. Harpsichord 'Harpsichord' General MIDI program. Helicopter 'Helicopter' General MIDI program. HonkyTonkPiano 'Honky-tonk Piano' General MIDI program. Kalimba 'Kalimba' General MIDI program. Koto 'Koto' General MIDI program. Lead1 'Lead 1 (square)' General MIDI program. Lead2 'Lead 2 (sawtooth)' General MIDI program. Lead3 'Lead 3 (calliope)' General MIDI program. Lead4 'Lead 4 (chiff)' General MIDI program. Lead5 'Lead 5 (charang)' General MIDI program. Lead6 'Lead 6 (voice)' General MIDI program. Lead7 'Lead 7 (fifths)' General MIDI program. Lead8 'Lead 8 (bass + lead)' General MIDI program. Marimba 'Marimba' General MIDI program. MelodicTom 'Melodic Tom' General MIDI program. MusicBox 'Music Box' General MIDI program. MutedTrumpet 'Muted Trumpet' General MIDI program. Oboe 'Oboe' General MIDI program. Ocarina 'Ocarina' General MIDI program. OrchestraHit 'Orchestra Hit' General MIDI program. OrchestralHarp 'Orchestral Harp' General MIDI program. OverdrivenGuitar 'Overdriven Guitar' General MIDI program. Pad1 'Pad 1 (new age)' General MIDI program. Pad2 'Pad 2 (warm)' General MIDI program. Pad3 'Pad 3 (polysynth)' General MIDI program. Pad4 'Pad 4 (choir)' General MIDI program. Pad5 'Pad 5 (bowed)' General MIDI program. Pad6 'Pad 6 (metallic)' General MIDI program. Pad7 'Pad 7 (halo)' General MIDI program. Pad8 'Pad 8 (sweep)' General MIDI program. PanFlute 'Pan Flute' General MIDI program. PercussiveOrgan 'Percussive Organ' General MIDI program. Piccolo 'Piccolo' General MIDI program. PizzicatoStrings 'Pizzicato Strings' General MIDI program. Recorder 'Recorder' General MIDI program. ReedOrgan 'Reed Organ' General MIDI program. ReverseCymbal 'Reverse Cymbal' General MIDI program. RockOrgan 'Rock Organ' General MIDI program. Seashore 'Seashore' General MIDI program. Shakuhachi 'Shakuhachi' General MIDI program. Shamisen 'Shamisen' General MIDI program. Shanai 'Shanai' General MIDI program. Sitar 'Sitar' General MIDI program. SlapBass1 'Slap Bass 1' General MIDI program. SlapBass2 'Slap Bass 2' General MIDI program. SopranoSax 'Soprano Sax' General MIDI program. SteelDrums 'Steel Drums' General MIDI program. StringEnsemble1 'String Ensemble 1' General MIDI program. StringEnsemble2 'String Ensemble 2' General MIDI program. SynthBass1 'Synth Bass 1' General MIDI program. SynthBass2 'Synth Bass 2' General MIDI program. SynthBrass1 'SynthBrass 1' General MIDI program. SynthBrass2 'SynthBrass 2' General MIDI program. SynthDrum 'Synth Drum' General MIDI program. SynthStrings1 'SynthStrings 1' General MIDI program. SynthStrings2 'SynthStrings 2' General MIDI program. SynthVoice 'Synth Voice' General MIDI program. TaikoDrum 'Taiko Drum' General MIDI program. TangoAccordion 'Tango Accordion' General MIDI program. TelephoneRing 'Telephone Ring' General MIDI program. TenorSax 'Tenor Sax' General MIDI program. Timpani 'Timpani' General MIDI program. TinkleBell 'Tinkle Bell' General MIDI program. TremoloStrings 'Tremolo Strings' General MIDI program. Trombone 'Trombone' General MIDI program. Trumpet 'Trumpet' General MIDI program. Tuba 'Tuba' General MIDI program. TubularBells 'Tubular Bells' General MIDI program. Vibraphone 'Vibraphone' General MIDI program. Viola 'Viola' General MIDI program. Violin 'Violin' General MIDI program. VoiceOohs 'Voice Oohs' General MIDI program. Whistle 'Whistle' General MIDI program. Woodblock 'Woodblock' General MIDI program. Xylophone 'Xylophone' General MIDI program. Extension Methods GeneralMidiUtilities.AsSevenBitNumber() GeneralMidiUtilities.GetProgramEvent(FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.html",
    "title": "Enum GeneralMidiPercussion | DryWetMIDI",
    "keywords": "Enum GeneralMidiPercussion General MIDI Level 1 percussion notes. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidiPercussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General MIDI percussion note. AcousticSnare 'Acoustic Snare' General MIDI percussion note. BassDrum1 'Bass Drum 1' General MIDI percussion note. Cabasa 'Cabasa' General MIDI percussion note. ChineseCymbal 'Chinese Cymbal' General MIDI percussion note. Claves 'Claves' General MIDI percussion note. ClosedHiHat 'Closed Hi-Hat' General MIDI percussion note. Cowbell 'Cowbell' General MIDI percussion note. CrashCymbal1 'Crash Cymbal 1' General MIDI percussion note. CrashCymbal2 'Crash Cymbal 2' General MIDI percussion note. ElectricSnare 'Electric Snare' General MIDI percussion note. HandClap 'Hand Clap' General MIDI percussion note. HiBongo 'Hi Bongo' General MIDI percussion note. HighAgogo 'High Agogo' General MIDI percussion note. HighFloorTom 'High Floor Tom' General MIDI percussion note. HighTimbale 'High Timbale' General MIDI percussion note. HighTom 'High Tom' General MIDI percussion note. HiMidTom 'Hi-Mid Tom' General MIDI percussion note. HiWoodBlock 'Hi Wood Block' General MIDI percussion note. LongGuiro 'Long Guiro' General MIDI percussion note. LongWhistle 'Long Whistle' General MIDI percussion note. LowAgogo 'Low Agogo' General MIDI percussion note. LowBongo 'Low Bongo' General MIDI percussion note. LowConga 'Low Conga' General MIDI percussion note. LowFloorTom 'Low Floor Tom' General MIDI percussion note. LowMidTom 'Low-Mid Tom' General MIDI percussion note. LowTimbale 'Low Timbale' General MIDI percussion note. LowTom 'Low Tom' General MIDI percussion note. LowWoodBlock 'Low Wood Block' General MIDI percussion note. Maracas 'Maracas' General MIDI percussion note. MuteCuica 'Mute Cuica' General MIDI percussion note. MuteHiConga 'Mute Hi Conga' General MIDI percussion note. MuteTriangle 'Mute Triangle' General MIDI percussion note. OpenCuica 'Open Cuica' General MIDI percussion note. OpenHiConga 'Open Hi Conga' General MIDI percussion note. OpenHiHat 'Open Hi-Hat' General MIDI percussion note. OpenTriangle 'Open Triangle' General MIDI percussion note. PedalHiHat 'Pedal Hi-Hat' General MIDI percussion note. RideBell 'Ride Bell' General MIDI percussion note. RideCymbal1 'Ride Cymbal 1' General MIDI percussion note. RideCymbal2 'Ride Cymbal 2' General MIDI percussion note. ShortGuiro 'Short Guiro' General MIDI percussion note. ShortWhistle 'Short Whistle' General MIDI percussion note. SideStick 'Side Stick' General MIDI percussion note. SplashCymbal 'Splash Cymbal' General MIDI percussion note. Tambourine 'Tambourine' General MIDI percussion note. Vibraslap 'Vibraslap' General MIDI percussion note. Extension Methods GeneralMidiUtilities.AsSevenBitNumber() GeneralMidiUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralMidiUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2Utilities.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2Utilities.html",
    "title": "Class GeneralMidi2Utilities | DryWetMIDI",
    "keywords": "Class GeneralMidi2Utilities Provides utilities for General MIDI Level 2. Inheritance Object GeneralMidi2Utilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public static class GeneralMidi2Utilities Methods GetProgramEvents(GeneralMidi2Program, FourBitNumber) Gets MIDI events sequence to switch to the specified General MIDI Level 2 program. Declaration public static IEnumerable<MidiEvent> GetProgramEvents(this GeneralMidi2Program program, FourBitNumber channel) Parameters Type Name Description GeneralMidi2Program program GeneralMidi2Program to get events for. FourBitNumber channel Channel events should be created for. Returns Type Description IEnumerable < MidiEvent > MIDI events sequence to switch to the program . Exceptions Type Condition InvalidEnumArgumentException program specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2Program.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2Program.html",
    "title": "Enum GeneralMidi2Program | DryWetMIDI",
    "keywords": "Enum GeneralMidi2Program General MIDI Level 2 program (patch). Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2Program Fields Name Description Accordion 'Accordion' General MIDI 2 program. Accordion2 'Accordion2' General MIDI 2 program. AcousticBass 'Acoustic Bass' General MIDI 2 program. AcousticBassStringSlap 'Acoustic Bass String Slap' General MIDI 2 program. AcousticGrandPiano 'Acoustic Grand Piano' General MIDI 2 program. AcousticGrandPianoDark 'Acoustic Grand Piano (dark)' General MIDI 2 program. AcousticGrandPianoWide 'Acoustic Grand Piano (wide)' General MIDI 2 program. AcousticGuitarNylon 'Acoustic Guitar (nylon)' General MIDI 2 program. AcousticGuitarNylon2 'Acoustic Guitar (nylon2)' General MIDI 2 program. AcousticGuitarNylonKeyOff 'Acoustic Guitar (nylon key off)' General MIDI 2 program. AcousticGuitarSteel 'Acoustic Guitar (steel)' General MIDI 2 program. Agogo 'Agogo' General MIDI 2 program. AltoSax 'Alto Sax' General MIDI 2 program. AnalogSynthBrass1 'Analog Synth Brass1' General MIDI 2 program. AnalogSynthBrass2 'Analog Synth Brass2' General MIDI 2 program. AnalogVoice 'Analog Voice' General MIDI 2 program. Applause 'Applause' General MIDI 2 program. AttackPulse 'Attack Pulse' General MIDI 2 program. BagPipe 'Bag Pipe' General MIDI 2 program. Banjo 'Banjo' General MIDI 2 program. BaritoneSax 'Baritone Sax' General MIDI 2 program. BassHitPlus 'Bass Hit Plus' General MIDI 2 program. Bassoon 'Bassoon' General MIDI 2 program. BirdTweet 'Bird Tweet' General MIDI 2 program. BirdTweet2 'Bird Tweet2' General MIDI 2 program. BlownBottle 'Blown Bottle' General MIDI 2 program. BrassSection 'Brass Section' General MIDI 2 program. BrassSection2OctaveMix 'Brass Section2 (octave mix)' General MIDI 2 program. BreathNoise 'Breath Noise' General MIDI 2 program. BrightAcousticPiano 'Bright Acoustic Piano' General MIDI 2 program. BrightAcousticPianoWide 'Bright Acoustic Piano (wide)' General MIDI 2 program. BrightTrombone 'Bright Trombone' General MIDI 2 program. Bubble 'Bubble' General MIDI 2 program. BurstNoise 'Burst Noise' General MIDI 2 program. CarCrash 'Car Crash' General MIDI 2 program. CarEngine 'Car Engine' General MIDI 2 program. Carillon 'Carillon' General MIDI 2 program. CarPass 'Car Pass' General MIDI 2 program. CarStop 'Car Stop' General MIDI 2 program. Castanets 'Castanets' General MIDI 2 program. Celesta 'Celesta' General MIDI 2 program. Cello 'Cello' General MIDI 2 program. ChoirAahs 'Choir Aahs' General MIDI 2 program. ChoirAahs2 'Choir Aahs2' General MIDI 2 program. ChurchBell 'Church Bell' General MIDI 2 program. ChurchOrgan 'Church Organ' General MIDI 2 program. ChurchOrganOctaveMix 'Church Organ (octave mix)' General MIDI 2 program. Clarinet 'Clarinet' General MIDI 2 program. Clavi 'Clavi' General MIDI 2 program. ClaviBass 'Clavi Bass' General MIDI 2 program. ConcertBassDrum 'Concert Bass Drum' General MIDI 2 program. Contrabass 'Contrabass' General MIDI 2 program. DarkTrumpetSoft 'Dark Trumpet Soft' General MIDI 2 program. DetunedChurchOrgan 'Detuned Church Organ' General MIDI 2 program. DetunedDrawbarOrgan 'Detuned Drawbar Organ' General MIDI 2 program. DetunedElectricPiano1 'Detuned Electric Piano1' General MIDI 2 program. DetunedElectricPiano2 'Detuned Electric Piano2' General MIDI 2 program. DetunedPercussiveOrgan 'Detuned Percussive Organ' General MIDI 2 program. DistortedRhythmGuitar 'Distorted Rhythm Guitar' General MIDI 2 program. DistortionGuitar 'Distortion Guitar' General MIDI 2 program. DistortionGuitarWithFeedback 'Distortion Guitar (with feedback)' General MIDI 2 program. Dog 'Dog' General MIDI 2 program. Door 'Door' General MIDI 2 program. DoorCreaking 'Door Creaking' General MIDI 2 program. DrawbarOrgan 'Drawbar Organ' General MIDI 2 program. DrawbarOrgan2 'Drawbar Organ2' General MIDI 2 program. Dulcimer 'Dulcimer' General MIDI 2 program. ElectricBassFinger 'Electric Bass (finger)' General MIDI 2 program. ElectricBassPick 'Electric Bass (pick)' General MIDI 2 program. ElectricDrum 'Electric Drum' General MIDI 2 program. ElectricGrandPiano 'Electric Grand Piano' General MIDI 2 program. ElectricGrandPianoWide 'Electric Grand Piano (wide)' General MIDI 2 program. ElectricGuitarClean 'Electric Guitar (clean)' General MIDI 2 program. ElectricGuitarDetunedClean 'Electric Guitar (detuned clean)' General MIDI 2 program. ElectricGuitarFunkyCutting 'Electric Guitar (funky cutting)' General MIDI 2 program. ElectricGuitarJazz 'Electric Guitar (jazz)' General MIDI 2 program. ElectricGuitarMuted 'Electric Guitar (muted)' General MIDI 2 program. ElectricGuitarMutedVeloSw 'Electric Guitar (muted velo sw)' General MIDI 2 program. ElectricGuitarPedalSteel 'Electric Guitar (pedal steel)' General MIDI 2 program. ElectricPiano1 'Electric Piano1' General MIDI 2 program. ElectricPiano1VelocityMix 'Electric Piano1 (velocity mix)' General MIDI 2 program. ElectricPiano2 'Electric Piano2' General MIDI 2 program. ElectricPiano2VelocityMix 'Electric Piano2 (velocity mix)' General MIDI 2 program. EnglishHorn 'English Horn' General MIDI 2 program. EpLegend 'Ep Legend' General MIDI 2 program. EpPhase 'Ep Phase' General MIDI 2 program. EuroHit 'Euro Hit' General MIDI 2 program. Explosion 'Explosion' General MIDI 2 program. Fiddle 'Fiddle' General MIDI 2 program. FingerSlapBass 'Finger Slap Bass' General MIDI 2 program. Flute 'Flute' General MIDI 2 program. FluteKeyClick 'Flute Key Click' General MIDI 2 program. Footsteps 'Footsteps' General MIDI 2 program. FrenchHorn 'French Horn' General MIDI 2 program. FrenchHorn2Warm 'French Horn2 (warm)' General MIDI 2 program. FretlessBass 'Fretless Bass' General MIDI 2 program. Fx1Rain 'Fx1 (rain)' General MIDI 2 program. Fx2Soundtrack 'Fx2 (soundtrack)' General MIDI 2 program. Fx3ASynthMallet 'Fx3 A (synth mallet)' General MIDI 2 program. Fx3Crystal 'Fx3 (crystal)' General MIDI 2 program. Fx4Atmosphere 'Fx4 (atmosphere)' General MIDI 2 program. Fx5Brightness 'Fx5 (brightness)' General MIDI 2 program. Fx6Goblins 'Fx6 (goblins)' General MIDI 2 program. Fx7AEchoBell 'Fx7 A (echo bell)' General MIDI 2 program. Fx7BEchoPan 'Fx7 B (echo pan)' General MIDI 2 program. Fx7Echoes 'Fx7 (echoes)' General MIDI 2 program. Fx8SciFi 'Fx8 (sci fi)' General MIDI 2 program. Glockenspiel 'Glockenspiel' General MIDI 2 program. GuitarCuttingNoise 'Guitar Cutting Noise' General MIDI 2 program. GuitarFeedback 'Guitar Feedback' General MIDI 2 program. GuitarFretNoise 'Guitar Fret Noise' General MIDI 2 program. GuitarHarmonics 'Guitar Harmonics' General MIDI 2 program. GuitarPinch 'Guitar Pinch' General MIDI 2 program. Gunshot 'Gunshot' General MIDI 2 program. Hammer 'Hammer' General MIDI 2 program. Harmonica 'Harmonica' General MIDI 2 program. Harpsichord 'Harpsichord' General MIDI 2 program. HarpsichordOctaveMix 'Harpsichord (octave mix)' General MIDI 2 program. HarpsichordWide 'Harpsichord (wide)' General MIDI 2 program. HarpsichordWithKeyOff 'Harpsichord (with key off)' General MIDI 2 program. HeartBeat 'Heart Beat' General MIDI 2 program. Helicopter 'Helicopter' General MIDI 2 program. HonkyTonkPiano 'Honky Tonk Piano' General MIDI 2 program. HonkyTonkPianoWide 'Honky Tonk Piano (wide)' General MIDI 2 program. HorseGallop 'Horse Gallop' General MIDI 2 program. Humming 'Humming' General MIDI 2 program. ItalianSixtiesOrgan 'Italian Sixties Organ' General MIDI 2 program. JazzMan 'Jazz Man' General MIDI 2 program. Jetplane 'Jetplane' General MIDI 2 program. JumpBrass 'Jump Brass' General MIDI 2 program. Kalimba 'Kalimba' General MIDI 2 program. Koto 'Koto' General MIDI 2 program. Lasergun 'Lasergun' General MIDI 2 program. Laughing 'Laughing' General MIDI 2 program. Lead1ASquare2 'Lead1 A (square2)' General MIDI 2 program. Lead1BSine 'Lead1 B (sine)' General MIDI 2 program. Lead1Square 'Lead1 (square)' General MIDI 2 program. Lead2ASawtooth2 'Lead2 A (sawtooth2)' General MIDI 2 program. Lead2BSawPulse 'Lead2 B (saw pulse)' General MIDI 2 program. Lead2CDoubleSawtooth 'Lead2 C (double sawtooth)' General MIDI 2 program. Lead2DSequencedAnalog 'Lead2 D (sequenced analog)' General MIDI 2 program. Lead2Sawtooth 'Lead2 (sawtooth)' General MIDI 2 program. Lead3Calliope 'Lead3 (calliope)' General MIDI 2 program. Lead4Chiff 'Lead4 (chiff)' General MIDI 2 program. Lead5AWireLead 'Lead5 A (wire lead)' General MIDI 2 program. Lead5Charang 'Lead5 (charang)' General MIDI 2 program. Lead6Voice 'Lead6 (voice)' General MIDI 2 program. Lead7Fifths 'Lead7 (fifths)' General MIDI 2 program. Lead8ASoftWrl 'Lead8 A (soft wrl)' General MIDI 2 program. Lead8BassLead 'Lead8 (bass lead)' General MIDI 2 program. MachineGun 'Machine Gun' General MIDI 2 program. Mandolin 'Mandolin' General MIDI 2 program. Marimba 'Marimba' General MIDI 2 program. MarimbaWide 'Marimba (wide)' General MIDI 2 program. MelodicTom 'Melodic Tom' General MIDI 2 program. MelodicTom2Power 'Melodic Tom2 (power)' General MIDI 2 program. MidToneGuitar 'Mid Tone Guitar' General MIDI 2 program. MusicBox 'Music Box' General MIDI 2 program. MutedTrumpet 'Muted Trumpet' General MIDI 2 program. MutedTrumpet2 'Muted Trumpet2' General MIDI 2 program. Oboe 'Oboe' General MIDI 2 program. Ocarina 'Ocarina' General MIDI 2 program. OrchestraHit 'Orchestra Hit' General MIDI 2 program. OrchestralHarp 'Orchestral Harp' General MIDI 2 program. OverdrivenGuitar 'Overdriven Guitar' General MIDI 2 program. Pad1NewAge 'Pad1 (new age)' General MIDI 2 program. Pad2ASinePad 'Pad2 A (sine pad)' General MIDI 2 program. Pad2Warm 'Pad2 (warm)' General MIDI 2 program. Pad3Polysynth 'Pad3 (polysynth)' General MIDI 2 program. Pad4AItopia 'Pad4 A (itopia)' General MIDI 2 program. Pad4Choir 'Pad4 (choir)' General MIDI 2 program. Pad5Bowed 'Pad5 (bowed)' General MIDI 2 program. Pad6Metallic 'Pad6 (metallic)' General MIDI 2 program. Pad7Halo 'Pad7 (halo)' General MIDI 2 program. Pad8Sweep 'Pad8 (sweep)' General MIDI 2 program. PanFlute 'Pan Flute' General MIDI 2 program. PercussiveOrgan 'Percussive Organ' General MIDI 2 program. PercussiveOrgan2 'Percussive Organ2' General MIDI 2 program. Piccolo 'Piccolo' General MIDI 2 program. PizzicatoStrings 'Pizzicato Strings' General MIDI 2 program. PuffOrgan 'Puff Organ' General MIDI 2 program. PulseClavi 'Pulse Clavi' General MIDI 2 program. Punch 'Punch' General MIDI 2 program. Rain 'Rain' General MIDI 2 program. Recorder 'Recorder' General MIDI 2 program. ReedOrgan 'Reed Organ' General MIDI 2 program. ReverseCymbal 'Reverse Cymbal' General MIDI 2 program. RhythmBoxTom 'Rhythm Box Tom' General MIDI 2 program. RockOrgan 'Rock Organ' General MIDI 2 program. Scratch 'Scratch' General MIDI 2 program. Screaming 'Screaming' General MIDI 2 program. Seashore 'Seashore' General MIDI 2 program. Shakuhachi 'Shakuhachi' General MIDI 2 program. Shamisen 'Shamisen' General MIDI 2 program. Shanai 'Shanai' General MIDI 2 program. Siren 'Siren' General MIDI 2 program. Sitar 'Sitar' General MIDI 2 program. Sitar2Bend 'Sitar2 (bend)' General MIDI 2 program. SixthHit 'Sixth Hit' General MIDI 2 program. SixtiesElectricPiano 'Sixties Electric Piano' General MIDI 2 program. SixtiesStrings 'Sixties Strings' General MIDI 2 program. SlapBass1 'Slap Bass1' General MIDI 2 program. SlapBass2 'Slap Bass2' General MIDI 2 program. SopranoSax 'Soprano Sax' General MIDI 2 program. Starship 'Starship' General MIDI 2 program. SteelDrums 'Steel Drums' General MIDI 2 program. SteelGuitarWithBodySound 'Steel Guitar With Body Sound' General MIDI 2 program. Stream 'Stream' General MIDI 2 program. StringEnsembles1 'String Ensembles1' General MIDI 2 program. StringEnsembles2 'String Ensembles2' General MIDI 2 program. StringsAndBrass 'Strings And Brass' General MIDI 2 program. SynthBass1 'Synth Bass1' General MIDI 2 program. SynthBass2 'Synth Bass2' General MIDI 2 program. SynthBass3Resonance 'Synth Bass3 (resonance)' General MIDI 2 program. SynthBass4Attack 'Synth Bass4 (attack)' General MIDI 2 program. SynthBassRubber 'Synth Bass (rubber)' General MIDI 2 program. SynthBassWarm 'Synth Bass (warm)' General MIDI 2 program. SynthBrass1 'Synth Brass1' General MIDI 2 program. SynthBrass2 'Synth Brass2' General MIDI 2 program. SynthBrass3 'Synth Brass3' General MIDI 2 program. SynthBrass4 'Synth Brass4' General MIDI 2 program. SynthDrum 'Synth Drum' General MIDI 2 program. SynthStrings1 'Synth Strings1' General MIDI 2 program. SynthStrings2 'Synth Strings2' General MIDI 2 program. SynthStrings3 'Synth Strings3' General MIDI 2 program. SynthVoice 'Synth Voice' General MIDI 2 program. TaikoDrum 'Taiko Drum' General MIDI 2 program. TaishoKoto 'Taisho Koto' General MIDI 2 program. TangoAccordion 'Tango Accordion' General MIDI 2 program. TelephoneRing 'Telephone Ring' General MIDI 2 program. TelephoneRing2 'Telephone Ring2' General MIDI 2 program. TenorSax 'Tenor Sax' General MIDI 2 program. Thunder 'Thunder' General MIDI 2 program. Timpani 'Timpani' General MIDI 2 program. TinkleBell 'Tinkle Bell' General MIDI 2 program. Train 'Train' General MIDI 2 program. TremoloStrings 'Tremolo Strings' General MIDI 2 program. Trombone 'Trombone' General MIDI 2 program. Trombone2 'Trombone2' General MIDI 2 program. Trumpet 'Trumpet' General MIDI 2 program. Tuba 'Tuba' General MIDI 2 program. TubularBells 'Tubular Bells' General MIDI 2 program. TwelveStringsGuitar 'Twelve Strings Guitar' General MIDI 2 program. Ukulele 'Ukulele' General MIDI 2 program. Vibraphone 'Vibraphone' General MIDI 2 program. VibraphoneWide 'Vibraphone (wide)' General MIDI 2 program. Viola 'Viola' General MIDI 2 program. Violin 'Violin' General MIDI 2 program. ViolinSlowAttack 'Violin (slow attack)' General MIDI 2 program. VoiceOohs 'Voice Oohs' General MIDI 2 program. Whistle 'Whistle' General MIDI 2 program. Wind 'Wind' General MIDI 2 program. WindChime 'Wind Chime' General MIDI 2 program. Woodblock 'Woodblock' General MIDI 2 program. Xylophone 'Xylophone' General MIDI 2 program. YangChin 'Yang Chin' General MIDI 2 program. Extension Methods GeneralMidi2Utilities.GetProgramEvents(FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2Percussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2Percussion.html",
    "title": "Enum GeneralMidi2Percussion | DryWetMIDI",
    "keywords": "Enum GeneralMidi2Percussion General MIDI Level 2 percussion notes. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2Percussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General MIDI 2 percussion note. AcousticSnare 'Acoustic Snare' General MIDI 2 percussion note. BassDrum1 'Bass Drum 1' General MIDI 2 percussion note. Belltree 'Belltree' General MIDI 2 percussion note. Cabasa 'Cabasa' General MIDI 2 percussion note. Castanets 'Castanets' General MIDI 2 percussion note. ChineseCymbal 'Chinese Cymbal' General MIDI 2 percussion note. Claves 'Claves' General MIDI 2 percussion note. ClosedHiHat 'Closed Hi-Hat' General MIDI 2 percussion note. Cowbell 'Cowbell' General MIDI 2 percussion note. CrashCymbal1 'Crash Cymbal 1' General MIDI 2 percussion note. CrashCymbal2 'Crash Cymbal 2' General MIDI 2 percussion note. ElectricSnare 'Electric Snare' General MIDI 2 percussion note. HandClap 'Hand Clap' General MIDI 2 percussion note. HiBongo 'Hi Bongo' General MIDI 2 percussion note. HighAgogo 'High Agogo' General MIDI 2 percussion note. HighFloorTom 'High Floor Tom' General MIDI 2 percussion note. HighQ 'HighQ' General MIDI 2 percussion note. HighTimbale 'High Timbale' General MIDI 2 percussion note. HighTom 'High Tom' General MIDI 2 percussion note. HiMidTom 'Hi-Mid Tom' General MIDI 2 percussion note. HiWoodBlock 'Hi Wood Block' General MIDI 2 percussion note. JingleBell 'Jingle Bell' General MIDI 2 percussion note. LongGuiro 'Long Guiro' General MIDI 2 percussion note. LongWhistle 'Long Whistle' General MIDI 2 percussion note. LowAgogo 'Low Agogo' General MIDI 2 percussion note. LowBongo 'Low Bongo' General MIDI 2 percussion note. LowConga 'Low Conga' General MIDI 2 percussion note. LowFloorTom 'Low Floor Tom' General MIDI 2 percussion note. LowMidTom 'Low-Mid Tom' General MIDI 2 percussion note. LowTimbale 'Low Timbale' General MIDI 2 percussion note. LowTom 'Low Tom' General MIDI 2 percussion note. LowWoodBlock 'Low Wood Block' General MIDI 2 percussion note. Maracas 'Maracas' General MIDI 2 percussion note. MetronomeBell 'MetronomeBell' General MIDI 2 percussion note. MetronomeClick 'MetronomeClick' General MIDI 2 percussion note. MuteCuica 'Mute Cuica' General MIDI 2 percussion note. MuteHiConga 'Mute Hi Conga' General MIDI 2 percussion note. MuteSurdo 'Mute Surdo' General MIDI 2 percussion note. MuteTriangle 'Mute Triangle' General MIDI 2 percussion note. OpenCuica 'Open Cuica' General MIDI 2 percussion note. OpenHiConga 'Open Hi Conga' General MIDI 2 percussion note. OpenHiHat 'Open Hi-Hat' General MIDI 2 percussion note. OpenSurdo 'Open Surdo' General MIDI 2 percussion note. OpenTriangle 'Open Triangle' General MIDI 2 percussion note. PedalHiHat 'Pedal Hi-Hat' General MIDI 2 percussion note. RideBell 'Ride Bell' General MIDI 2 percussion note. RideCymbal1 'Ride Cymbal 1' General MIDI 2 percussion note. RideCymbal2 'Ride Cymbal 2' General MIDI 2 percussion note. ScratchPull 'ScratchPull' General MIDI 2 percussion note. ScratchPush 'ScratchPush' General MIDI 2 percussion note. Shaker 'Shaker' General MIDI 2 percussion note. ShortGuiro 'Short Guiro' General MIDI 2 percussion note. ShortWhistle 'Short Whistle' General MIDI 2 percussion note. SideStick 'Side Stick' General MIDI 2 percussion note. Slap 'Slap' General MIDI 2 percussion note. SplashCymbal 'Splash Cymbal' General MIDI 2 percussion note. SquareClick 'SquareClick' General MIDI 2 percussion note. Sticks 'Sticks' General MIDI 2 percussion note. Tambourine 'Tambourine' General MIDI 2 percussion note. Vibraslap 'Vibraslap' General MIDI 2 percussion note."
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi.html",
    "title": "Class GeneralMidi | DryWetMIDI",
    "keywords": "Class GeneralMidi The class which provides information about the General MIDI Level 1 standard. Inheritance Object GeneralMidi Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public static class GeneralMidi Fields PercussionChannel Channel reserved for percussion according to the General MIDI Level 1 standard. Declaration public static readonly FourBitNumber PercussionChannel Field Value Type Description FourBitNumber"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.html",
    "title": "Namespace Melanchall.DryWetMidi.MusicTheory | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.MusicTheory Classes Chord Represents a chord as a set of notes names. ChordProgression Represents a chord progression as a set of chords. ChordUtilities Utilities for working with Chord . Interval Represents a musical interval in terms of half steps number. IntervalDefinition Note Represents a note, i.e. note name and octave. Notes Contains all available MIDI notes. NoteUtilities Provides utilities for working with the Note . Octave Represents an octave defined by its number. Scale Represents a musical scale. ScaleIntervals Provides intervals sequences for known musical scales. ScaleUtilities Provides useful utilities for working with Scale . Enums ChordQuality Represents a chord's quality. IntervalDirection Direction of a musical interval represented by the Interval . The default is Up . IntervalQuality Represents an interval's quality. NoteName Name of a note of the 12-tone chromatic scale. ScaleDegree Represents specific note (degree) of a musical scale."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ScaleUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ScaleUtilities.html",
    "title": "Class ScaleUtilities | DryWetMIDI",
    "keywords": "Class ScaleUtilities Provides useful utilities for working with Scale . Inheritance Object ScaleUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public static class ScaleUtilities Methods GetAscendingNotes(Scale, Note) Gets notes that belong to a musical scale in ascending order starting with the specified root note. Declaration public static IEnumerable<Note> GetAscendingNotes(this Scale scale, Note rootNote) Parameters Type Name Description Scale scale Scale to get notes of. Note rootNote Note to start a sequence of scale's notes with. Returns Type Description IEnumerable < Note > Notes that belong to the scale in ascending order starting with the rootNote . Exceptions Type Condition ArgumentNullException scale is null. -or- rootNote is null. GetDegree(Scale, ScaleDegree) Gets NoteName corresponding to the specified degree of a musical scale. Declaration public static NoteName GetDegree(this Scale scale, ScaleDegree degree) Parameters Type Name Description Scale scale Scale to get degree of. ScaleDegree degree ScaleDegree representing a degree of the scale . Returns Type Description NoteName NoteName which is the degree of the scale. Exceptions Type Condition ArgumentNullException scale is null. InvalidEnumArgumentException degree specified an invalid value. ArgumentOutOfRangeException degree is out of range for the scale . GetDescendingNotes(Scale, Note) Gets notes that belong to a musical scale in descending order starting with the specified root note. Declaration public static IEnumerable<Note> GetDescendingNotes(this Scale scale, Note rootNote) Parameters Type Name Description Scale scale Scale to get notes of. Note rootNote Note to start a sequence of scale's notes with. Returns Type Description IEnumerable < Note > Notes that belong to the scale in descending order starting with the rootNote . Exceptions Type Condition ArgumentNullException scale is null. -or- rootNote is null. GetNextNote(Scale, Note) Gets a note that belongs to a musical scale next to the specified note. Declaration public static Note GetNextNote(this Scale scale, Note note) Parameters Type Name Description Scale scale Scale to get the next note of. Note note Note to get a note next to. Returns Type Description Note A note next to the note that belongs to the scale . Exceptions Type Condition ArgumentNullException scale is null. -or- note is null. GetNotes(Scale) Gets all MIDI notes that belong to the specified scale. Declaration public static IEnumerable<Note> GetNotes(this Scale scale) Parameters Type Name Description Scale scale Scale to get notes of. Returns Type Description IEnumerable < Note > Notes that belong to the scale . Exceptions Type Condition ArgumentNullException scale is null. GetNotesNames(Scale) Returns infinite collection of note names that belong to the specified scale. Declaration public static IEnumerable<NoteName> GetNotesNames(this Scale scale) Parameters Type Name Description Scale scale Scale to get note names of. Returns Type Description IEnumerable < NoteName > Note names that belong to the scale . Exceptions Type Condition ArgumentNullException scale is null. GetPreviousNote(Scale, Note) Gets a note that belongs to a musical scale previous to the specified note. Declaration public static Note GetPreviousNote(this Scale scale, Note note) Parameters Type Name Description Scale scale Scale to get the previous note of. Note note Note to get a note previous to. Returns Type Description Note A note previous to the note that belongs to the scale . Exceptions Type Condition ArgumentNullException scale is null. -or- note is null. GetStep(Scale, Int32) Gets NoteName corresponding to the specified step of a musical scale. Declaration public static NoteName GetStep(this Scale scale, int step) Parameters Type Name Description Scale scale Scale to get step of. Int32 step Step of the scale. Returns Type Description NoteName NoteName which is the step of the scale. Exceptions Type Condition ArgumentNullException scale is null. ArgumentOutOfRangeException step is negative. IsNoteInScale(Scale, Note) Checks if the specified note belongs to a scale or not. Declaration public static bool IsNoteInScale(this Scale scale, Note note) Parameters Type Name Description Scale scale Scale to check the note. Note note Note to check if it belongs to the scale or not. Returns Type Description Boolean true if note belongs to the scale ; otherwise, false. Exceptions Type Condition ArgumentNullException scale is null. -or- note is null."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.html",
    "title": "Class ScaleIntervals | DryWetMIDI",
    "keywords": "Class ScaleIntervals Provides intervals sequences for known musical scales. Inheritance Object ScaleIntervals Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public static class ScaleIntervals Fields Aeolian 'Aeolian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Aeolian Field Value Type Description IEnumerable < Interval > Altered 'Altered' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Altered Field Value Type Description IEnumerable < Interval > Arabian 'Arabian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Arabian Field Value Type Description IEnumerable < Interval > Augmented 'Augmented' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Augmented Field Value Type Description IEnumerable < Interval > AugmentedHeptatonic 'Augmented Heptatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> AugmentedHeptatonic Field Value Type Description IEnumerable < Interval > Balinese 'Balinese' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Balinese Field Value Type Description IEnumerable < Interval > Bebop 'Bebop' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Bebop Field Value Type Description IEnumerable < Interval > BebopDominant 'Bebop Dominant' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> BebopDominant Field Value Type Description IEnumerable < Interval > BebopLocrian 'Bebop Locrian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> BebopLocrian Field Value Type Description IEnumerable < Interval > BebopMajor 'Bebop Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> BebopMajor Field Value Type Description IEnumerable < Interval > BebopMinor 'Bebop Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> BebopMinor Field Value Type Description IEnumerable < Interval > Blues 'Blues' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Blues Field Value Type Description IEnumerable < Interval > Chinese 'Chinese' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Chinese Field Value Type Description IEnumerable < Interval > Chromatic 'Chromatic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Chromatic Field Value Type Description IEnumerable < Interval > CompositeBlues 'Composite Blues' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> CompositeBlues Field Value Type Description IEnumerable < Interval > Diminished 'Diminished' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Diminished Field Value Type Description IEnumerable < Interval > DiminishedWholeTone 'Diminished Whole Tone' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> DiminishedWholeTone Field Value Type Description IEnumerable < Interval > Dominant 'Dominant' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Dominant Field Value Type Description IEnumerable < Interval > Dorian 'Dorian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Dorian Field Value Type Description IEnumerable < Interval > Dorian4 'Dorian #4' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Dorian4 Field Value Type Description IEnumerable < Interval > DorianB2 'Dorian b2' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> DorianB2 Field Value Type Description IEnumerable < Interval > DoubleHarmonicLydian 'Double Harmonic Lydian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> DoubleHarmonicLydian Field Value Type Description IEnumerable < Interval > DoubleHarmonicMajor 'Double Harmonic Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> DoubleHarmonicMajor Field Value Type Description IEnumerable < Interval > Egyptian 'Egyptian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Egyptian Field Value Type Description IEnumerable < Interval > Enigmatic 'Enigmatic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Enigmatic Field Value Type Description IEnumerable < Interval > Flamenco 'Flamenco' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Flamenco Field Value Type Description IEnumerable < Interval > FlatSixPentatonic 'Flat Six Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> FlatSixPentatonic Field Value Type Description IEnumerable < Interval > FlatThreePentatonic 'Flat Three Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> FlatThreePentatonic Field Value Type Description IEnumerable < Interval > Gypsy 'Gypsy' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Gypsy Field Value Type Description IEnumerable < Interval > HarmonicMajor 'Harmonic Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> HarmonicMajor Field Value Type Description IEnumerable < Interval > HarmonicMinor 'Harmonic Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> HarmonicMinor Field Value Type Description IEnumerable < Interval > Hindu 'Hindu' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Hindu Field Value Type Description IEnumerable < Interval > Hirajoshi 'Hirajoshi' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Hirajoshi Field Value Type Description IEnumerable < Interval > HungarianMajor 'Hungarian Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> HungarianMajor Field Value Type Description IEnumerable < Interval > HungarianMinor 'Hungarian Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> HungarianMinor Field Value Type Description IEnumerable < Interval > Ichikosucho 'Ichikosucho' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Ichikosucho Field Value Type Description IEnumerable < Interval > Indian 'Indian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Indian Field Value Type Description IEnumerable < Interval > InSen 'In-Sen' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> InSen Field Value Type Description IEnumerable < Interval > Ionian 'Ionian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Ionian Field Value Type Description IEnumerable < Interval > IonianAugmented 'Ionian Augmented' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> IonianAugmented Field Value Type Description IEnumerable < Interval > IonianPentatonic 'Ionian Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> IonianPentatonic Field Value Type Description IEnumerable < Interval > Iwato 'Iwato' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Iwato Field Value Type Description IEnumerable < Interval > KafiRaga 'Kafi Raga' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> KafiRaga Field Value Type Description IEnumerable < Interval > Kumoi 'Kumoi' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Kumoi Field Value Type Description IEnumerable < Interval > Kumoijoshi 'Kumoijoshi' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Kumoijoshi Field Value Type Description IEnumerable < Interval > LeadingWholeTone 'Leading Whole Tone' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LeadingWholeTone Field Value Type Description IEnumerable < Interval > Locrian 'Locrian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Locrian Field Value Type Description IEnumerable < Interval > Locrian2 'Locrian #2' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Locrian2 Field Value Type Description IEnumerable < Interval > LocrianMajor 'Locrian Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LocrianMajor Field Value Type Description IEnumerable < Interval > LocrianPentatonic 'Locrian Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LocrianPentatonic Field Value Type Description IEnumerable < Interval > Lydian 'Lydian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Lydian Field Value Type Description IEnumerable < Interval > Lydian5PPentatonic 'Lydian #5P Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Lydian5PPentatonic Field Value Type Description IEnumerable < Interval > Lydian9 'Lydian #9' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Lydian9 Field Value Type Description IEnumerable < Interval > LydianAugmented 'Lydian Augmented' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianAugmented Field Value Type Description IEnumerable < Interval > LydianB7 'Lydian b7' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianB7 Field Value Type Description IEnumerable < Interval > LydianDiminished 'Lydian Diminished' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianDiminished Field Value Type Description IEnumerable < Interval > LydianDominant 'Lydian Dominant' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianDominant Field Value Type Description IEnumerable < Interval > LydianDominantPentatonic 'Lydian Dominant Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianDominantPentatonic Field Value Type Description IEnumerable < Interval > LydianMinor 'Lydian Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianMinor Field Value Type Description IEnumerable < Interval > LydianPentatonic 'Lydian Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianPentatonic Field Value Type Description IEnumerable < Interval > Major 'Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Major Field Value Type Description IEnumerable < Interval > MajorBlues 'Major Blues' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MajorBlues Field Value Type Description IEnumerable < Interval > MajorFlatTwoPentatonic 'Major Flat Two Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MajorFlatTwoPentatonic Field Value Type Description IEnumerable < Interval > MajorPentatonic 'Major Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MajorPentatonic Field Value Type Description IEnumerable < Interval > MalkosRaga 'Malkos Raga' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MalkosRaga Field Value Type Description IEnumerable < Interval > MelodicMinor 'Melodic Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MelodicMinor Field Value Type Description IEnumerable < Interval > MelodicMinorFifthMode 'Melodic Minor Fifth Mode' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MelodicMinorFifthMode Field Value Type Description IEnumerable < Interval > MelodicMinorSecondMode 'Melodic Minor Second Mode' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MelodicMinorSecondMode Field Value Type Description IEnumerable < Interval > Minor 'Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Minor Field Value Type Description IEnumerable < Interval > Minor7MPentatonic 'Minor #7M Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Minor7MPentatonic Field Value Type Description IEnumerable < Interval > MinorBebop 'Minor Bebop' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorBebop Field Value Type Description IEnumerable < Interval > MinorBlues 'Minor Blues' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorBlues Field Value Type Description IEnumerable < Interval > MinorHexatonic 'Minor Hexatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorHexatonic Field Value Type Description IEnumerable < Interval > MinorPentatonic 'Minor Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorPentatonic Field Value Type Description IEnumerable < Interval > MinorSevenFlatFivePentatonic 'Minor Seven Flat Five Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorSevenFlatFivePentatonic Field Value Type Description IEnumerable < Interval > MinorSixDiminished 'Minor Six Diminished' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorSixDiminished Field Value Type Description IEnumerable < Interval > MinorSixPentatonic 'Minor Six Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorSixPentatonic Field Value Type Description IEnumerable < Interval > Mixolydian 'Mixolydian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Mixolydian Field Value Type Description IEnumerable < Interval > MixolydianB6M 'Mixolydian b6M' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MixolydianB6M Field Value Type Description IEnumerable < Interval > MixolydianPentatonic 'Mixolydian Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MixolydianPentatonic Field Value Type Description IEnumerable < Interval > Mystery1 'Mystery #1' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Mystery1 Field Value Type Description IEnumerable < Interval > Neopolitan 'Neopolitan' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Neopolitan Field Value Type Description IEnumerable < Interval > NeopolitanMajor 'Neopolitan Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> NeopolitanMajor Field Value Type Description IEnumerable < Interval > NeopolitanMajorPentatonic 'Neopolitan Major Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> NeopolitanMajorPentatonic Field Value Type Description IEnumerable < Interval > NeopolitanMinor 'Neopolitan Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> NeopolitanMinor Field Value Type Description IEnumerable < Interval > Oriental 'Oriental' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Oriental Field Value Type Description IEnumerable < Interval > Pelog 'Pelog' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Pelog Field Value Type Description IEnumerable < Interval > Pentatonic 'Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Pentatonic Field Value Type Description IEnumerable < Interval > Persian 'Persian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Persian Field Value Type Description IEnumerable < Interval > Phrygian 'Phrygian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Phrygian Field Value Type Description IEnumerable < Interval > PhrygianMajor 'Phrygian Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> PhrygianMajor Field Value Type Description IEnumerable < Interval > Piongio 'Piongio' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Piongio Field Value Type Description IEnumerable < Interval > Pomeroy 'Pomeroy' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Pomeroy Field Value Type Description IEnumerable < Interval > Prometheus 'Prometheus' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Prometheus Field Value Type Description IEnumerable < Interval > PrometheusNeopolitan 'Prometheus Neopolitan' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> PrometheusNeopolitan Field Value Type Description IEnumerable < Interval > PurviRaga 'Purvi Raga' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> PurviRaga Field Value Type Description IEnumerable < Interval > Ritusen 'Ritusen' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Ritusen Field Value Type Description IEnumerable < Interval > RomanianMinor 'Romanian Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> RomanianMinor Field Value Type Description IEnumerable < Interval > Scriabin 'Scriabin' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Scriabin Field Value Type Description IEnumerable < Interval > SixToneSymmetric 'Six Tone Symmetric' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> SixToneSymmetric Field Value Type Description IEnumerable < Interval > Spanish 'Spanish' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Spanish Field Value Type Description IEnumerable < Interval > SpanishHeptatonic 'Spanish Heptatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> SpanishHeptatonic Field Value Type Description IEnumerable < Interval > SuperLocrian 'Super Locrian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> SuperLocrian Field Value Type Description IEnumerable < Interval > SuperLocrianPentatonic 'Super Locrian Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> SuperLocrianPentatonic Field Value Type Description IEnumerable < Interval > TodiRaga 'Todi Raga' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> TodiRaga Field Value Type Description IEnumerable < Interval > Vietnamese1 'Vietnamese 1' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Vietnamese1 Field Value Type Description IEnumerable < Interval > Vietnamese2 'Vietnamese 2' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Vietnamese2 Field Value Type Description IEnumerable < Interval > WholeTone 'Whole Tone' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> WholeTone Field Value Type Description IEnumerable < Interval > WholeTonePentatonic 'Whole Tone Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> WholeTonePentatonic Field Value Type Description IEnumerable < Interval > Methods GetByName(String) Gets musical scale's intervals sequence by the scale's name. Declaration public static IEnumerable<Interval> GetByName(string name) Parameters Type Name Description String name The name of a scale. Returns Type Description IEnumerable < Interval > Intervals sequence for the scale with the name name ; or null if there is no a scale with this name. Exceptions Type Condition ArgumentException name is null or contains white-spaces only."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ScaleDegree.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ScaleDegree.html",
    "title": "Enum ScaleDegree | DryWetMIDI",
    "keywords": "Enum ScaleDegree Represents specific note (degree) of a musical scale. Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public enum ScaleDegree Fields Name Description Dominant Dominant of a musical scale (5th degree). LeadingTone Leading tone of a musical scale (7th degree). Mediant Mediant of a musical scale (3rd degree). Subdominant Subdominant of a musical scale (4th degree). Submediant Submediant of a musical scale (6th degree). Supertonic Supertonic of a musical scale (2nd degree). Tonic Tonic of a musical scale (1st degree)."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Scale.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Scale.html",
    "title": "Class Scale | DryWetMIDI",
    "keywords": "Class Scale Represents a musical scale. Inheritance Object Scale Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Scale Constructors Scale(IEnumerable<Interval>, NoteName) Initializes a new instance of the Scale with the specified intervals and root note. Declaration public Scale(IEnumerable<Interval> intervals, NoteName rootNote) Parameters Type Name Description IEnumerable < Interval > intervals Intervals between adjacent notes of the scale. NoteName rootNote Root note (tonic) of the scale. Exceptions Type Condition ArgumentNullException intervals is null. InvalidEnumArgumentException rootNote specified an invalid value. Properties Intervals Gets inetrvals between adjacent notes of the current Scale . Declaration public IEnumerable<Interval> Intervals { get; } Property Value Type Description IEnumerable < Interval > RootNote Gets root note (tonic) of the current Scale . Declaration public NoteName RootNote { get; } Property Value Type Description NoteName Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() Parse(String) Converts the string representation of a musical scale to its Scale equivalent. Declaration public static Scale Parse(string input) Parameters Type Name Description String input A string containing a scale to convert. Returns Type Description Scale A Scale equivalent to the musical scale contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out Scale) Converts the string representation of a musical scale to its Scale equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out Scale scale) Parameters Type Name Description String input A string containing a scale to convert. Scale scale When this method returns, contains the Scale equivalent of the musical scale contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Operators Equality(Scale, Scale) Determines if two Scale objects are equal. Declaration public static bool operator ==(Scale scale1, Scale scale2) Parameters Type Name Description Scale scale1 The first Scale to compare. Scale scale2 The second Scale to compare. Returns Type Description Boolean true if the scales are equal, false otherwise. Inequality(Scale, Scale) Determines if two Scale objects are not equal. Declaration public static bool operator !=(Scale scale1, Scale scale2) Parameters Type Name Description Scale scale1 The first Scale to compare. Scale scale2 The second Scale to compare. Returns Type Description Boolean false if the scales are equal, true otherwise. Extension Methods ScaleUtilities.GetDegree(Scale, ScaleDegree) ScaleUtilities.GetStep(Scale, Int32) ScaleUtilities.GetNotes(Scale) ScaleUtilities.GetNotesNames(Scale) ScaleUtilities.GetAscendingNotes(Scale, Note) ScaleUtilities.GetDescendingNotes(Scale, Note) ScaleUtilities.IsNoteInScale(Scale, Note) ScaleUtilities.GetNextNote(Scale, Note) ScaleUtilities.GetPreviousNote(Scale, Note)"
  },
  "api/Melanchall.DryWetMidi.Interaction.TrackChunkUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TrackChunkUtilities.html",
    "title": "Class TrackChunkUtilities | DryWetMIDI",
    "keywords": "Class TrackChunkUtilities Utility methods for TrackChunk . Inheritance Object TrackChunkUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TrackChunkUtilities Methods ShiftEvents(TrackChunk, ITimeSpan, TempoMap) Shifts events forward inside TrackChunk by the specified distance. Declaration public static void ShiftEvents(this TrackChunk trackChunk, ITimeSpan distance, TempoMap tempoMap) Parameters Type Name Description TrackChunk trackChunk TrackChunk containing events to shift. ITimeSpan distance Distance to shift events by. TempoMap tempoMap Tempo map used for internal distance conversions. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- distance is null. -or- tempoMap is null. ShiftEvents(IEnumerable<TrackChunk>, ITimeSpan, TempoMap) Shifts events forward inside collection of TrackChunk by the specified distance. Declaration public static void ShiftEvents(this IEnumerable<TrackChunk> trackChunks, ITimeSpan distance, TempoMap tempoMap) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk containing events to shift. ITimeSpan distance Distance to shift events by. TempoMap tempoMap Tempo map used for internal distance conversions. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- distance is null. -or- tempoMap is null."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeSpanUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeSpanUtilities.html",
    "title": "Class TimeSpanUtilities | DryWetMIDI",
    "keywords": "Class TimeSpanUtilities Provides useful utilities for working with ITimeSpan . Inheritance Object TimeSpanUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TimeSpanUtilities Methods GetMaxTimeSpan(TimeSpanType) Gets an object that represents maximum value of time span defined by the specified time span type. Declaration public static ITimeSpan GetMaxTimeSpan(TimeSpanType timeSpanType) Parameters Type Name Description TimeSpanType timeSpanType The type of time span to get maximum value. Returns Type Description ITimeSpan An object that represents maximum value of time span defined by timeSpanType . Exceptions Type Condition InvalidEnumArgumentException timeSpanType specified an invalid value. GetZeroTimeSpan(TimeSpanType) Gets an object that represents zero value of time span defined by the specified time span type. Declaration public static ITimeSpan GetZeroTimeSpan(TimeSpanType timeSpanType) Parameters Type Name Description TimeSpanType timeSpanType The type of time span to get zero value. Returns Type Description ITimeSpan An object that represents zero value of time span defined by timeSpanType . Exceptions Type Condition InvalidEnumArgumentException timeSpanType specified an invalid value. GetZeroTimeSpan<TTimeSpan>() Gets an object that represents zero value of time span defined by the specified time span type. Declaration public static TTimeSpan GetZeroTimeSpan<TTimeSpan>() where TTimeSpan : ITimeSpan Returns Type Description TTimeSpan An object that represents zero value of time span defined by TTimeSpan . Type Parameters Name Description TTimeSpan The type of time span to get zero value. Parse(String) Converts the string representation of a time span to its ITimeSpan equivalent. Declaration public static ITimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description ITimeSpan A ITimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. TryParse(String, out ITimeSpan) Converts the string representation of a time span to its ITimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out ITimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. ITimeSpan timeSpan When this method returns, contains the ITimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. TryParse(String, TimeSpanType, out ITimeSpan) Converts the string representation of a time span to its ITimeSpan equivalent using the specified type of time span. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, TimeSpanType timeSpanType, out ITimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. TimeSpanType timeSpanType the type of time span to convert input to. ITimeSpan timeSpan When this method returns, contains the ITimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeSpanType.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeSpanType.html",
    "title": "Enum TimeSpanType | DryWetMIDI",
    "keywords": "Enum TimeSpanType The type of a time span. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum TimeSpanType Fields Name Description BarBeatFraction Bar/beat time span which represents bars and fractional beats (for example, 1.5 beats). BarBeatTicks Bar/beat time span which represents bars, beats and ticks. Metric Metric time span which represents hours, minutes and seconds. Midi MIDI time span which represnts an amount of time measured in units of the time division of a MIDI file. Musical Musical time span which represents a fraction of the whole note's length."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeSpanMode.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeSpanMode.html",
    "title": "Enum TimeSpanMode | DryWetMIDI",
    "keywords": "Enum TimeSpanMode Mode of the arithmetic operation between two ITimeSpan . Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum TimeSpanMode Fields Name Description LengthLength Both time spans represent length. TimeLength First time span represents time and second one represents length. TimeTime Both time spans represent time."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeSpanComparer.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeSpanComparer.html",
    "title": "Class TimeSpanComparer | DryWetMIDI",
    "keywords": "Class TimeSpanComparer Compares two time spans determining relation between them. Inheritance Object TimeSpanComparer Implements IComparer < ITimeSpan > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimeSpanComparer : IComparer<ITimeSpan> Methods Compare(ITimeSpan, ITimeSpan) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration public int Compare(ITimeSpan x, ITimeSpan y) Parameters Type Name Description ITimeSpan x The first object to compare. ITimeSpan y The second object to compare. Returns Type Description Int32 A signed integer that indicates the relative values of x and y , as shown in the following table. ValueMeaning Less than zero x is less than y Zero x equals y Greater than zero x is greater than y Implements System.Collections.Generic.IComparer<T>"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeSignature.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeSignature.html",
    "title": "Class TimeSignature | DryWetMIDI",
    "keywords": "Class TimeSignature Represents time signature which is number of beats of specified length. Inheritance Object TimeSignature Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimeSignature Constructors TimeSignature(Int32, Int32) Initializes a new instance of the TimeSignature with the specified numerator and denominator. Declaration public TimeSignature(int numerator, int denominator) Parameters Type Name Description Int32 numerator Numerator of the time signature which defines number of beats. Int32 denominator Denominator of the time signature which defines beat length. Exceptions Type Condition ArgumentOutOfRangeException numerator is zero or negative. -or- denominator is zero or negative. -or- denominator is not a power of two. Fields Default Default time signature which is 4/4. Declaration public static readonly TimeSignature Default Field Value Type Description TimeSignature Properties Denominator Gets denominator of the time signature which defines beat length. Declaration public int Denominator { get; } Property Value Type Description Int32 Numerator Gets numerator of the time signature which defines number of beats. Declaration public int Numerator { get; } Property Value Type Description Int32 Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(TimeSignature, TimeSignature) Determines if two TimeSignature objects are equal. Declaration public static bool operator ==(TimeSignature timeSignature1, TimeSignature timeSignature2) Parameters Type Name Description TimeSignature timeSignature1 The first TimeSignature to compare. TimeSignature timeSignature2 The second TimeSignature to compare. Returns Type Description Boolean true if the time signatures are equal, false otherwise. Inequality(TimeSignature, TimeSignature) Determines if two TimeSignature objects are not equal. Declaration public static bool operator !=(TimeSignature timeSignature1, TimeSignature timeSignature2) Parameters Type Name Description TimeSignature timeSignature1 The first TimeSignature to compare. TimeSignature timeSignature2 The second TimeSignature to compare. Returns Type Description Boolean false if the time signatures are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.Interaction.LengthConverter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.LengthConverter.html",
    "title": "Class LengthConverter | DryWetMIDI",
    "keywords": "Class LengthConverter Provides a way to convert the length of an object from one representation to another. Inheritance Object LengthConverter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class LengthConverter Methods ConvertFrom(ITimeSpan, ITimeSpan, TempoMap) Converts length from the specified length type to Int64 . Declaration public static long ConvertFrom(ITimeSpan length, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description Int64 Length as Int64 . Exceptions Type Condition ArgumentNullException length is null. -or- time is null. -or- tempoMap is null. ConvertFrom(ITimeSpan, Int64, TempoMap) Converts length from the specified length type to Int64 . Declaration public static long ConvertFrom(ITimeSpan length, long time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description Int64 Length as Int64 . Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException length is null. -or- tempoMap is null. ConvertTo(ITimeSpan, TimeSpanType, ITimeSpan, TempoMap) Converts length from one length type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan length, TimeSpanType lengthType, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. TimeSpanType lengthType Type that will represent the length of an object. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of time span defined by lengthType . Exceptions Type Condition ArgumentNullException length is null. -or- time is null. -or- tempoMap is null. InvalidEnumArgumentException lengthType specified an invalid value. ConvertTo(ITimeSpan, TimeSpanType, Int64, TempoMap) Converts length from one length type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan length, TimeSpanType lengthType, long time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. TimeSpanType lengthType Type that will represent the length of an object. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of time span defined by lengthType . Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException length is null. -or- tempoMap is null. InvalidEnumArgumentException lengthType specified an invalid value. ConvertTo(ITimeSpan, Type, ITimeSpan, TempoMap) Converts length from one length type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan length, Type lengthType, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. Type lengthType Type to convert length to. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of lengthType . Exceptions Type Condition ArgumentNullException length is null. -or- lengthType is null. -or- time is null. -or- tempoMap is null. NotSupportedException lengthType is not supported. ConvertTo(ITimeSpan, Type, Int64, TempoMap) Converts length from one length type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan length, Type lengthType, long time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. Type lengthType Type to convert length to. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of lengthType . Exceptions Type Condition ArgumentNullException length is null. -or- lengthType is null. -or- tempoMap is null. ArgumentOutOfRangeException time is negative. NotSupportedException lengthType is not supported. ConvertTo(Int64, TimeSpanType, ITimeSpan, TempoMap) Converts length from Int64 to the specified length type. Declaration public static ITimeSpan ConvertTo(long length, TimeSpanType lengthType, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description Int64 length Length to convert. TimeSpanType lengthType Type that will represent the length of an object. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of time span defined by lengthType . Exceptions Type Condition ArgumentOutOfRangeException length is negative. ArgumentNullException time is null. -or- tempoMap is null. InvalidEnumArgumentException lengthType specified an invalid value. ConvertTo(Int64, TimeSpanType, Int64, TempoMap) Converts length from Int64 to the specified length type. Declaration public static ITimeSpan ConvertTo(long length, TimeSpanType lengthType, long time, TempoMap tempoMap) Parameters Type Name Description Int64 length Length to convert. TimeSpanType lengthType Type that will represent the length of an object. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of time span defined by lengthType . Exceptions Type Condition ArgumentOutOfRangeException length is negative. -or- time is negative. ArgumentNullException tempoMap is null. InvalidEnumArgumentException lengthType specified an invalid value. ConvertTo<TTimeSpan>(ITimeSpan, ITimeSpan, TempoMap) Converts length from one length type to another one. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(ITimeSpan length, ITimeSpan time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description ITimeSpan length Length to convert. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description TTimeSpan Length as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the length of an object. Exceptions Type Condition ArgumentNullException length is null. -or- time is null. -or- tempoMap is null. NotSupportedException TTimeSpan is not supported. ConvertTo<TTimeSpan>(ITimeSpan, Int64, TempoMap) Converts length from one length type to another one. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(ITimeSpan length, long time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description ITimeSpan length Length to convert. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description TTimeSpan Length as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the length of an object. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException length is null. -or- tempoMap is null. NotSupportedException TTimeSpan is not supported. ConvertTo<TTimeSpan>(Int64, ITimeSpan, TempoMap) Converts length from Int64 to the specified length type. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(long length, ITimeSpan time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description Int64 length Length to convert. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description TTimeSpan Length as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the length of an object. Exceptions Type Condition ArgumentOutOfRangeException length is negative. ArgumentNullException time is null. -or- tempoMap is null. NotSupportedException TTimeSpan is not supported. ConvertTo<TTimeSpan>(Int64, Int64, TempoMap) Converts length from Int64 to the specified length type. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(long length, long time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description Int64 length Length to convert. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description TTimeSpan Length as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the length of an object. Exceptions Type Condition ArgumentOutOfRangeException length is negative. -or- time is negative. ArgumentNullException tempoMap is null. NotSupportedException TTimeSpan is not supported."
  },
  "api/Melanchall.DryWetMidi.Interaction.ITimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ITimeSpan.html",
    "title": "Interface ITimeSpan | DryWetMIDI",
    "keywords": "Interface ITimeSpan Time span that represents time or length. Inherited Members IComparable.CompareTo(Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface ITimeSpan : IComparable Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Interaction.ChordsCollectionChangedEventHandler.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChordsCollectionChangedEventHandler.html",
    "title": "Delegate ChordsCollectionChangedEventHandler | DryWetMIDI",
    "keywords": "Delegate ChordsCollectionChangedEventHandler Represents the method that will handle the CollectionChanged event raised when a ChordsCollection changed. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public delegate void ChordsCollectionChangedEventHandler(ChordsCollection collection, ChordsCollectionChangedEventArgs args); Parameters Type Name Description ChordsCollection collection ChordsCollection that has fired the event. ChordsCollectionChangedEventArgs args A ChordsCollectionChangedEventArgs that contains the event data."
  },
  "api/Melanchall.DryWetMidi.Interaction.ChordsCollectionChangedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChordsCollectionChangedEventArgs.html",
    "title": "Class ChordsCollectionChangedEventArgs | DryWetMIDI",
    "keywords": "Class ChordsCollectionChangedEventArgs Provides data for the CollectionChanged event. Inheritance Object EventArgs ChordsCollectionChangedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordsCollectionChangedEventArgs : EventArgs Constructors ChordsCollectionChangedEventArgs(IEnumerable<Chord>, IEnumerable<Chord>) Initializes a new instance of the ChordsCollectionChangedEventArgs class with the specified added chords and removed ones. Declaration public ChordsCollectionChangedEventArgs(IEnumerable<Chord> addedChords, IEnumerable<Chord> removedChords) Parameters Type Name Description IEnumerable < Chord > addedChords Chords that were added to a ChordsCollection . IEnumerable < Chord > removedChords Chords that were removed from a ChordsCollection . Properties AddedChords Gets chords that were added to a ChordsCollection . Declaration public IEnumerable<Chord> AddedChords { get; } Property Value Type Description IEnumerable < Chord > RemovedChords Gets chords that were removed from a ChordsCollection . Declaration public IEnumerable<Chord> RemovedChords { get; } Property Value Type Description IEnumerable < Chord >"
  },
  "api/Melanchall.DryWetMidi.Interaction.ChordsCollection.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChordsCollection.html",
    "title": "Class ChordsCollection | DryWetMIDI",
    "keywords": "Class ChordsCollection Collection of Chord objects. Inheritance Object TimedObjectsCollection < Chord > ChordsCollection Implements IEnumerable < Chord > IEnumerable Inherited Members TimedObjectsCollection<Chord>._objects TimedObjectsCollection<Chord>.Add(IEnumerable<Chord>) TimedObjectsCollection<Chord>.Add(Chord[]) TimedObjectsCollection<Chord>.Remove(IEnumerable<Chord>) TimedObjectsCollection<Chord>.Remove(Chord[]) TimedObjectsCollection<Chord>.RemoveAll(Predicate<Chord>) TimedObjectsCollection<Chord>.Clear() TimedObjectsCollection<Chord>.GetEnumerator() TimedObjectsCollection<Chord>.IEnumerable.GetEnumerator() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordsCollection : TimedObjectsCollection<Chord>, IEnumerable<Chord>, IEnumerable Methods OnObjectsAdded(IEnumerable<Chord>) Performs an action when objects are added to the collection. Declaration protected override void OnObjectsAdded(IEnumerable<Chord> addedObjects) Parameters Type Name Description IEnumerable < Chord > addedObjects Collection of added objects. Overrides Melanchall.DryWetMidi.Interaction.TimedObjectsCollection<Melanchall.DryWetMidi.Interaction.Chord>.OnObjectsAdded(System.Collections.Generic.IEnumerable<Melanchall.DryWetMidi.Interaction.Chord>) OnObjectsRemoved(IEnumerable<Chord>) Performs an action when objects are removed from the collection. Declaration protected override void OnObjectsRemoved(IEnumerable<Chord> removedObjects) Parameters Type Name Description IEnumerable < Chord > removedObjects Collection of removed objects. Overrides Melanchall.DryWetMidi.Interaction.TimedObjectsCollection<Melanchall.DryWetMidi.Interaction.Chord>.OnObjectsRemoved(System.Collections.Generic.IEnumerable<Melanchall.DryWetMidi.Interaction.Chord>) Events CollectionChanged Occurs when chords collection changes. Declaration public event ChordsCollectionChangedEventHandler CollectionChanged Event Type Type Description ChordsCollectionChangedEventHandler Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods PlaybackUtilities.GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, SevenBitNumber, MidiClockSettings) PlaybackUtilities.GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidiProgram, MidiClockSettings) PlaybackUtilities.GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidi2Program, MidiClockSettings) PlaybackUtilities.Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, SevenBitNumber, MidiClockSettings) PlaybackUtilities.Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidiProgram, MidiClockSettings) PlaybackUtilities.Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidi2Program, MidiClockSettings) ChordsManagingUtilities.ToTrackChunk(IEnumerable<Chord>) ChordsManagingUtilities.ToFile(IEnumerable<Chord>) LengthedObjectUtilities.StartAtTime<TObject>(IEnumerable<TObject>, Int64) LengthedObjectUtilities.EndAtTime<TObject>(IEnumerable<TObject>, Int64) LengthedObjectUtilities.StartAtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap) LengthedObjectUtilities.EndAtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap) LengthedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, Int64, LengthedObjectPart) LengthedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap, LengthedObjectPart) TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, Int64) TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.Chord.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.Chord.html",
    "title": "Class Chord | DryWetMIDI",
    "keywords": "Class Chord Represents a musical chord. Inheritance Object Chord Implements ILengthedObject ITimedObject IMusicalObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Chord : ILengthedObject, ITimedObject, IMusicalObject Constructors Chord() Initializes a new instance of the Chord . Declaration public Chord() Chord(Note[]) Initializes a new instance of the Chord with the specified collection of notes. Declaration public Chord(params Note[] notes) Parameters Type Name Description Note [] notes Notes to combine into a chord. Exceptions Type Condition ArgumentNullException notes is null. Chord(IEnumerable<Note>) Initializes a new instance of the Chord with the specified collection of notes. Declaration public Chord(IEnumerable<Note> notes) Parameters Type Name Description IEnumerable < Note > notes Notes to combine into a chord. Exceptions Type Condition ArgumentNullException notes is null. Chord(IEnumerable<Note>, Int64) Initializes a new instance of the Chord with the specified collection of notes and chord time. Declaration public Chord(IEnumerable<Note> notes, long time) Parameters Type Name Description IEnumerable < Note > notes Notes to combine into a chord. Int64 time Time of the chord which is time of the earliest note of the notes . Exceptions Type Condition ArgumentNullException notes is null. ArgumentOutOfRangeException time is negative. Properties Channel Gets or sets channel to play the chord on. Declaration public FourBitNumber Channel { get; set; } Property Value Type Description FourBitNumber Exceptions Type Condition InvalidOperationException Unable to get channel since a chord doesn't contain notes. -or- Unable to get channel since chord's notes have different Velocity . Length Gets length of the chord in units defined by the time division of a MIDI file. Declaration public long Length { get; set; } Property Value Type Description Int64 Notes Gets a NotesCollection that represents notes of this chord. Declaration public NotesCollection Notes { get; } Property Value Type Description NotesCollection OffVelocity Gets or sets velocity of the underlying NoteOffEvent events of a chord's notes. Declaration public SevenBitNumber OffVelocity { get; set; } Property Value Type Description SevenBitNumber Exceptions Type Condition InvalidOperationException Unable to get off velocity since a chord doesn't contain notes. -or- Unable to get off velocity since chord's notes have different OffVelocity . Time Gets absolute time of the chord in units defined by the time division of a MIDI file. Declaration public long Time { get; set; } Property Value Type Description Int64 Exceptions Type Condition ArgumentOutOfRangeException Time is negative. Velocity Gets or sets velocity of the underlying NoteOnEvent events of a chord's notes. Declaration public SevenBitNumber Velocity { get; set; } Property Value Type Description SevenBitNumber Exceptions Type Condition InvalidOperationException Unable to get velocity since a chord doesn't contain notes. -or- Unable to get velocity since chord's notes have different Velocity . Methods Clone() Clones chord by creating a copy of it. Declaration public Chord Clone() Returns Type Description Chord Copy of the chord. Split(Int64) Splits the current Chord by the specified time. Declaration public SplittedLengthedObject<Chord> Split(long time) Parameters Type Name Description Int64 time Time to split the chord by. Returns Type Description SplittedLengthedObject < Chord > An object containing left and right parts of the splitted Chord . Both parts are instances of Chord too. Remarks If time is less than time of the chord, the left part will be null. If time is greater than end time of the chord, the right part will be null. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Events NotesCollectionChanged Occurs when notes collection changes. Declaration public event NotesCollectionChangedEventHandler NotesCollectionChanged Event Type Type Description NotesCollectionChangedEventHandler Implements ILengthedObject ITimedObject IMusicalObject Extension Methods ChordsManagingUtilities.SetTimeAndLength(Chord, ITimeSpan, ITimeSpan, TempoMap) ChordsManagingUtilities.GetMusicTheoryChord(Chord) LengthedObjectUtilities.LengthAs<TLength>(ILengthedObject, TempoMap) LengthedObjectUtilities.LengthAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.EndTimeAs<TTime>(ILengthedObject, TempoMap) LengthedObjectUtilities.EndTimeAs(ILengthedObject, TimeSpanType, TempoMap) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.BarBeatUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.BarBeatUtilities.html",
    "title": "Class BarBeatUtilities | DryWetMIDI",
    "keywords": "Class BarBeatUtilities Utilities for working with bars and beats. Inheritance Object BarBeatUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class BarBeatUtilities Methods GetBarLength(Int64, TempoMap) Gets the length of a bar (in ticks) that is started at distance of the specified bars. Declaration public static int GetBarLength(long bars, TempoMap tempoMap) Parameters Type Name Description Int64 bars Distance in bars where the bar is started. TempoMap tempoMap Tempo map used for calculations. Returns Type Description Int32 Length of a bar in ticks. Exceptions Type Condition ArgumentOutOfRangeException bars is negative. ArgumentNullException tempoMap is null. GetBeatLength(Int64, TempoMap) Gets the length of a beat (in ticks) of the bar that is started at distance of the specified bars. Declaration public static int GetBeatLength(long bars, TempoMap tempoMap) Parameters Type Name Description Int64 bars Distance in bars where the bar is started. TempoMap tempoMap Tempo map used for calculations. Returns Type Description Int32 Length of a beat in ticks. Exceptions Type Condition ArgumentOutOfRangeException bars is negative. ArgumentNullException tempoMap is null."
  },
  "api/Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpan.html",
    "title": "Class BarBeatTicksTimeSpan | DryWetMIDI",
    "keywords": "Class BarBeatTicksTimeSpan Represents bar/beat time span which represents bars, beats and ticks. Inheritance Object BarBeatTicksTimeSpan Implements ITimeSpan IComparable IComparable < BarBeatTicksTimeSpan > IEquatable < BarBeatTicksTimeSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class BarBeatTicksTimeSpan : ITimeSpan, IComparable, IComparable<BarBeatTicksTimeSpan>, IEquatable<BarBeatTicksTimeSpan> Constructors BarBeatTicksTimeSpan() Initializes a new instance of the BarBeatTicksTimeSpan . Declaration public BarBeatTicksTimeSpan() BarBeatTicksTimeSpan(Int64) Initializes a new instance of the BarBeatTicksTimeSpan with the specified number of bars. Declaration public BarBeatTicksTimeSpan(long bars) Parameters Type Name Description Int64 bars The number of bars. Exceptions Type Condition ArgumentOutOfRangeException bars is negative. BarBeatTicksTimeSpan(Int64, Int64) Initializes a new instance of the BarBeatTicksTimeSpan with the specified number of bars and beats. Declaration public BarBeatTicksTimeSpan(long bars, long beats) Parameters Type Name Description Int64 bars The number of bars. Int64 beats The number of beats. Exceptions Type Condition ArgumentOutOfRangeException bars is negative. -or- beats is negative. BarBeatTicksTimeSpan(Int64, Int64, Int64) Initializes a new instance of the BarBeatTicksTimeSpan with the specified number of bars, beats and ticks. Declaration public BarBeatTicksTimeSpan(long bars, long beats, long ticks) Parameters Type Name Description Int64 bars The number of bars. Int64 beats The number of beats. Int64 ticks The number of ticks. Exceptions Type Condition ArgumentOutOfRangeException bars is negative. -or- beats is negative. -or- ticks is negative. Properties Bars Gets the bars component of the time represented by the current BarBeatTicksTimeSpan . Declaration public long Bars { get; } Property Value Type Description Int64 Beats Gets the beats component of the time represented by the current BarBeatTicksTimeSpan . Declaration public long Beats { get; } Property Value Type Description Int64 Ticks Gets the ticks component of the time represented by the current BarBeatTicksTimeSpan . Declaration public long Ticks { get; } Property Value Type Description Int64 Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(BarBeatTicksTimeSpan) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(BarBeatTicksTimeSpan other) Parameters Type Name Description BarBeatTicksTimeSpan other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions Type Condition ArgumentException obj is not the same type as this instance. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Equals(BarBeatTicksTimeSpan) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(BarBeatTicksTimeSpan other) Parameters Type Name Description BarBeatTicksTimeSpan other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Parse(String) Converts the string representation of a bar/beat time span to its BarBeatTicksTimeSpan equivalent. Declaration public static BarBeatTicksTimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description BarBeatTicksTimeSpan A BarBeatTicksTimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out BarBeatTicksTimeSpan) Converts the string representation of a bar/beat time span to its BarBeatTicksTimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out BarBeatTicksTimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. BarBeatTicksTimeSpan timeSpan When this method returns, contains the BarBeatTicksTimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Operators Addition(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Adds two specified BarBeatTicksTimeSpan instances. Declaration public static BarBeatTicksTimeSpan operator +(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to add. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to add. Returns Type Description BarBeatTicksTimeSpan An object whose value is the sum of the values of timeSpan1 and timeSpan2 . Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Equality(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Determines if two BarBeatTicksTimeSpan objects are equal. Declaration public static bool operator ==(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. GreaterThan(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Indicates whether a specified BarBeatTicksTimeSpan is greater than another one. Declaration public static bool operator>(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. GreaterThanOrEqual(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Indicates whether a specified BarBeatTicksTimeSpan is greater than or equal to another one. Declaration public static bool operator >=(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than or equal to the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Inequality(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Determines if two BarBeatTicksTimeSpan objects are not equal. Declaration public static bool operator !=(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. LessThan(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Indicates whether a specified BarBeatTicksTimeSpan is less than another one. Declaration public static bool operator <(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. LessThanOrEqual(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Indicates whether a specified BarBeatTicksTimeSpan is less than or equal to another one. Declaration public static bool operator <=(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than or equal to the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Subtraction(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Subtracts a specified BarBeatTicksTimeSpan from another one. Declaration public static BarBeatTicksTimeSpan operator -(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The minuend. BarBeatTicksTimeSpan timeSpan2 The subtrahend. Returns Type Description BarBeatTicksTimeSpan An object whose value is the result of the value of timeSpan1 minus the value of timeSpan2 . Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. ArgumentException timeSpan1 is less than timeSpan2 . Implements ITimeSpan System.IComparable System.IComparable<T> System.IEquatable<T>"
  },
  "api/Melanchall.DryWetMidi.Devices.PlaybackEventCallback.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.PlaybackEventCallback.html",
    "title": "Delegate PlaybackEventCallback | DryWetMIDI",
    "keywords": "Delegate PlaybackEventCallback Callback used to modify MIDI event before playing. Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public delegate MidiEvent PlaybackEventCallback(MidiEvent midiEvent, TimeSpan time, long rawTime); Parameters Type Name Description MidiEvent midiEvent MIDI event to modify. TimeSpan time Absolute metric time of the event. Int64 rawTime Absolute time of the event in MIDI ticks. Returns Type Description MidiEvent MIDI event that should be played. It can be modified original event or a new one."
  },
  "api/Melanchall.DryWetMidi.Devices.PlaybackCurrentTimeWatcher.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.PlaybackCurrentTimeWatcher.html",
    "title": "Class PlaybackCurrentTimeWatcher | DryWetMIDI",
    "keywords": "Class PlaybackCurrentTimeWatcher Provides notifications about playback's current time changed. Inheritance Object PlaybackCurrentTimeWatcher Implements IDisposable IClockDrivenObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PlaybackCurrentTimeWatcher : IDisposable, IClockDrivenObject Properties Instance Gets the instance of PlaybackCurrentTimeWatcher . Declaration public static PlaybackCurrentTimeWatcher Instance { get; } Property Value Type Description PlaybackCurrentTimeWatcher IsWatching Gets a value indicating whether the watcher polls playbacks current times or not. Declaration public bool IsWatching { get; } Property Value Type Description Boolean Playbacks Gets playbacks the watcher polls current time of. Declaration public IEnumerable<Playback> Playbacks { get; } Property Value Type Description IEnumerable < Playback > PollingInterval Gets or sets the interval of playbacks current times polling. Declaration public TimeSpan PollingInterval { get; set; } Property Value Type Description TimeSpan Methods AddPlayback(Playback, TimeSpanType) Adds a playback to the list of ones to watch current times of. Declaration public void AddPlayback(Playback playback, TimeSpanType timeType) Parameters Type Name Description Playback playback Playback to watch current time of. TimeSpanType timeType Type of current time to convert to. Exceptions Type Condition ArgumentNullException playback is null. InvalidEnumArgumentException timeType specified an invalid value. ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. Dispose() Releases all resources used by the current PlaybackCurrentTimeWatcher . Declaration public void Dispose() RemoveAllPlaybacks() Removes all playbacks from the list of ones to watch current times of. Declaration public void RemoveAllPlaybacks() Exceptions Type Condition ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. RemovePlayback(Playback) Removes a playback from the list of ones to watch current times of. Declaration public void RemovePlayback(Playback playback) Parameters Type Name Description Playback playback Playback to exclude current time watching of. Exceptions Type Condition ArgumentNullException playback is null. ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. Start() Starts current times watching. Declaration public void Start() Exceptions Type Condition ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. Stop() Stops current times watching. Declaration public void Stop() Exceptions Type Condition ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. TickClock() Ticks internal clock. Declaration public void TickClock() Exceptions Type Condition ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. Events CurrentTimeChanged Occurs when current times of playbacks are changed. Declaration public event EventHandler<PlaybackCurrentTimeChangedEventArgs> CurrentTimeChanged Event Type Type Description EventHandler < PlaybackCurrentTimeChangedEventArgs > Implements System.IDisposable IClockDrivenObject"
  },
  "api/Melanchall.DryWetMidi.Devices.PlaybackCurrentTimeChangedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.PlaybackCurrentTimeChangedEventArgs.html",
    "title": "Class PlaybackCurrentTimeChangedEventArgs | DryWetMIDI",
    "keywords": "Class PlaybackCurrentTimeChangedEventArgs Holds current times of playbacks for CurrentTimeChanged . Inheritance Object EventArgs PlaybackCurrentTimeChangedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PlaybackCurrentTimeChangedEventArgs : EventArgs Properties Times Gets collection of current times of playbacks. Declaration public IEnumerable<PlaybackCurrentTime> Times { get; } Property Value Type Description IEnumerable < PlaybackCurrentTime >"
  },
  "api/Melanchall.DryWetMidi.Devices.PlaybackCurrentTime.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.PlaybackCurrentTime.html",
    "title": "Class PlaybackCurrentTime | DryWetMIDI",
    "keywords": "Class PlaybackCurrentTime Holds the current time of a playback. Inheritance Object PlaybackCurrentTime Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PlaybackCurrentTime Properties Playback Gets the playback which current PlaybackCurrentTime holds current time for. Declaration public Playback Playback { get; } Property Value Type Description Playback Time Gets the current time of a playback. Declaration public ITimeSpan Time { get; } Property Value Type Description ITimeSpan"
  },
  "api/Melanchall.DryWetMidi.Devices.Playback.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.Playback.html",
    "title": "Class Playback | DryWetMIDI",
    "keywords": "Class Playback Provides a way to play MIDI data through the specified output MIDI device. Inheritance Object Playback Implements IDisposable IClockDrivenObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Playback : IDisposable, IClockDrivenObject Constructors Playback(IEnumerable<MidiEvent>, TempoMap, IOutputDevice, MidiClockSettings) Initializes a new instance of the Playback with the specified collection of MIDI events, tempo map and output MIDI device to play events through. Declaration public Playback(IEnumerable<MidiEvent> events, TempoMap tempoMap, IOutputDevice outputDevice, MidiClockSettings clockSettings = null) Parameters Type Name Description IEnumerable < MidiEvent > events Collection of MIDI events to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play events through. MidiClockSettings clockSettings Settings of the internal playback's clock. Exceptions Type Condition ArgumentNullException events is null. -or- tempoMap is null. -or- outputDevice is null. Playback(IEnumerable<MidiEvent>, TempoMap, MidiClockSettings) Initializes a new instance of the Playback with the specified collection of MIDI events and tempo map. Declaration public Playback(IEnumerable<MidiEvent> events, TempoMap tempoMap, MidiClockSettings clockSettings = null) Parameters Type Name Description IEnumerable < MidiEvent > events Collection of MIDI events to play. TempoMap tempoMap Tempo map used to calculate events times. MidiClockSettings clockSettings Settings of the internal playback's clock. Exceptions Type Condition ArgumentNullException events is null. -or- tempoMap is null. Playback(IEnumerable<ITimedObject>, TempoMap, IOutputDevice, MidiClockSettings) Initializes a new instance of the Playback with the specified collection of timed objects, tempo map and output MIDI device to play events through. Declaration public Playback(IEnumerable<ITimedObject> timedObjects, TempoMap tempoMap, IOutputDevice outputDevice, MidiClockSettings clockSettings = null) Parameters Type Name Description IEnumerable < ITimedObject > timedObjects Collection of timed objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play timedObjects through. MidiClockSettings clockSettings Settings of the internal playback's clock. Exceptions Type Condition ArgumentNullException timedObjects is null. -or- tempoMap is null. -or- outputDevice is null. Playback(IEnumerable<ITimedObject>, TempoMap, MidiClockSettings) Initializes a new instance of the Playback with the specified collection of timed objects and tempo map. Declaration public Playback(IEnumerable<ITimedObject> timedObjects, TempoMap tempoMap, MidiClockSettings clockSettings = null) Parameters Type Name Description IEnumerable < ITimedObject > timedObjects Collection of timed objects to play. TempoMap tempoMap Tempo map used to calculate events times. MidiClockSettings clockSettings Settings of the internal playback's clock. Exceptions Type Condition ArgumentNullException timedObjects is null. -or- tempoMap is null. Playback(IEnumerable<IEnumerable<MidiEvent>>, TempoMap, IOutputDevice, MidiClockSettings) Initializes a new instance of the Playback with the specified collection of MIDI events collections, tempo map and output MIDI device to play events through. Declaration public Playback(IEnumerable<IEnumerable<MidiEvent>> events, TempoMap tempoMap, IOutputDevice outputDevice, MidiClockSettings clockSettings = null) Parameters Type Name Description IEnumerable < IEnumerable < MidiEvent >> events Collection of MIDI events collections to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play events through. MidiClockSettings clockSettings Settings of the internal playback's clock. Exceptions Type Condition ArgumentNullException events is null. -or- tempoMap is null. -or- outputDevice is null. Playback(IEnumerable<IEnumerable<MidiEvent>>, TempoMap, MidiClockSettings) Initializes a new instance of the Playback with the specified collection of MIDI events collections and tempo map. Declaration public Playback(IEnumerable<IEnumerable<MidiEvent>> events, TempoMap tempoMap, MidiClockSettings clockSettings = null) Parameters Type Name Description IEnumerable < IEnumerable < MidiEvent >> events Collection of MIDI events collections to play. TempoMap tempoMap Tempo map used to calculate events times. MidiClockSettings clockSettings Settings of the internal playback's clock. Exceptions Type Condition ArgumentNullException events is null. -or- tempoMap is null. Properties EventCallback Gets or sets callback used to process MIDI event to be played. Declaration public EventCallback EventCallback { get; set; } Property Value Type Description EventCallback InterruptNotesOnStop Gets or sets a value indicating whether currently playing notes must be stopped on playback stop or not. Declaration public bool InterruptNotesOnStop { get; set; } Property Value Type Description Boolean IsRunning Gets a value indicating whether playing is currently running or not. Declaration public bool IsRunning { get; } Property Value Type Description Boolean Loop Gets or sets a value indicating whether playing should automatically start from the first event after the last one played. Declaration public bool Loop { get; set; } Property Value Type Description Boolean NoteCallback Gets or sets callback used to process note to be played. Declaration public NoteCallback NoteCallback { get; set; } Property Value Type Description NoteCallback OutputDevice Gets or sets the output MIDI device to play MIDI data through. Declaration public IOutputDevice OutputDevice { get; set; } Property Value Type Description IOutputDevice Snapping Gets an object to manage playback's snap points. Declaration public PlaybackSnapping Snapping { get; } Property Value Type Description PlaybackSnapping Speed Gets or sets the speed of events playing. 1 means normal speed. For example, to play events twice slower this property should be set to 0.5. Declaration public double Speed { get; set; } Property Value Type Description Double Exceptions Type Condition ArgumentOutOfRangeException value is zero or negative. ObjectDisposedException The current Playback is disposed. TempoMap Gets the tempo map used to calculate events times. Declaration public TempoMap TempoMap { get; } Property Value Type Description TempoMap TrackNotes Gets or sets a value indicating whether notes must be tracked or not. If false, notes will be treated as just Note On/Note Off events. Declaration public bool TrackNotes { get; set; } Property Value Type Description Boolean Methods Dispose() Releases all resources used by the current Playback . Declaration public void Dispose() Finalize() Finalizes the current instance of the Playback . Declaration protected void Finalize() GetCurrentTime(TimeSpanType) Retrieves the current time of the playback in the specified format. Declaration public ITimeSpan GetCurrentTime(TimeSpanType timeType) Parameters Type Name Description TimeSpanType timeType Type that will represent the current time. Returns Type Description ITimeSpan The current time of the playback as an instance of time span defined by timeType . Exceptions Type Condition InvalidEnumArgumentException timeType specified an invalid value. GetCurrentTime<TTimeSpan>() Retrieves the current time of the playback in the specified format. Declaration public TTimeSpan GetCurrentTime<TTimeSpan>() where TTimeSpan : ITimeSpan Returns Type Description TTimeSpan The current time of the playback as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the current time. GetDuration(TimeSpanType) Retrieves the duration of the playback in the specified format. Declaration public ITimeSpan GetDuration(TimeSpanType durationType) Parameters Type Name Description TimeSpanType durationType Type that will represent the duration. Returns Type Description ITimeSpan The duration of the playback as an instance of time span defined by durationType . Exceptions Type Condition InvalidEnumArgumentException durationType specified an invalid value. GetDuration<TTimeSpan>() Retrieves the duration of the playback in the specified format. Declaration public TTimeSpan GetDuration<TTimeSpan>() where TTimeSpan : ITimeSpan Returns Type Description TTimeSpan The duration of the playback as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the duration. MoveBack(ITimeSpan) Shifts playback position back by the specified step. Declaration public void MoveBack(ITimeSpan step) Parameters Type Name Description ITimeSpan step Amount of time to shift playback position by. Exceptions Type Condition ArgumentNullException step is null. ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveForward(ITimeSpan) Shifts playback position forward by the specified step. Declaration public void MoveForward(ITimeSpan step) Parameters Type Name Description ITimeSpan step Amount of time to shift playback position by. Exceptions Type Condition ArgumentNullException step is null. ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToNextSnapPoint() Sets playback position to the time of the next snap point (relative to the current time of playback). Declaration public void MoveToNextSnapPoint() Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToNextSnapPoint(SnapPointsGroup) Sets playback position to the time of the next snap point (relative to the current time of playback) that belongs to the specified SnapPointsGroup . Declaration public void MoveToNextSnapPoint(SnapPointsGroup snapPointsGroup) Parameters Type Name Description SnapPointsGroup snapPointsGroup SnapPointsGroup that defines snap points to select the one from. Exceptions Type Condition ArgumentNullException snapPointsGroup is null. ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToPreviousSnapPoint() Sets playback position to the time of the previous snap point (relative to the current time of playback). Declaration public void MoveToPreviousSnapPoint() Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToPreviousSnapPoint(SnapPointsGroup) Sets playback position to the time of the previous snap point (relative to the current time of playback) that belongs to the specified SnapPointsGroup . Declaration public void MoveToPreviousSnapPoint(SnapPointsGroup snapPointsGroup) Parameters Type Name Description SnapPointsGroup snapPointsGroup SnapPointsGroup that defines snap points to select the one from. Exceptions Type Condition ArgumentNullException snapPointsGroup is null. ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToSnapPoint(SnapPoint) Sets playback position to the time of the specified snap point. Declaration public void MoveToSnapPoint(SnapPoint snapPoint) Parameters Type Name Description SnapPoint snapPoint Snap point to move to. Exceptions Type Condition ArgumentNullException snapPoint is null. ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToStart() Sets playback position to the beginning of the MIDI data. Declaration public void MoveToStart() Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToTime(ITimeSpan) Sets playback position to the specified time from the beginning of the MIDI data. Declaration public void MoveToTime(ITimeSpan time) Parameters Type Name Description ITimeSpan time Time from the beginning of the MIDI data to set playback position to. Exceptions Type Condition ArgumentNullException time is null. ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. Play() Starts playing of the MIDI data. This method will block execution of a program until all MIDI data is played. Declaration public void Play() Remarks If Loop is set to true, this method will execute forever. Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. Start() Starts playing of the MIDI data. This method is non-blocking. Declaration public void Start() Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. Stop() Stops playing of the MIDI data. Note that this method doesn't reset playback position. If you call Start() , playing will be resumed from the point where Stop() was called. Declaration public void Stop() Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. TickClock() Ticks internal clock. Declaration public void TickClock() Exceptions Type Condition ObjectDisposedException The current Playback is disposed. Events EventPlayed Occurs when MIDI event played. Declaration public event EventHandler<MidiEventPlayedEventArgs> EventPlayed Event Type Type Description EventHandler < MidiEventPlayedEventArgs > Finished Occurs when playback finished, i.e. last event has been played and no need to restart playback due to value of the Loop . Declaration public event EventHandler Finished Event Type Type Description EventHandler NotesPlaybackFinished Occurs when notes finished to play. It will raised if playback's cursor gets out from notes. Declaration public event EventHandler<NotesEventArgs> NotesPlaybackFinished Event Type Type Description EventHandler < NotesEventArgs > NotesPlaybackStarted Occurs when notes started to play. It will raised if playback's cursor gets in to notes. Declaration public event EventHandler<NotesEventArgs> NotesPlaybackStarted Event Type Type Description EventHandler < NotesEventArgs > Started Occurs when playback started via Start() or Play() methods. Declaration public event EventHandler Started Event Type Type Description EventHandler Stopped Occurs when playback stopped via Stop() method. Declaration public event EventHandler Stopped Event Type Type Description EventHandler Implements System.IDisposable IClockDrivenObject"
  },
  "api/Melanchall.DryWetMidi.Devices.OutputDeviceType.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.OutputDeviceType.html",
    "title": "Enum OutputDeviceType | DryWetMIDI",
    "keywords": "Enum OutputDeviceType Type of an output MIDI device. Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public enum OutputDeviceType : ushort Fields Name Description FmSynth FM synthesizer. MidiMapper Microsoft MIDI mapper. MidiPort MIDI hardware port. SoftwareSynth Software synthesizer. SquareWaveSynth Square wave synthesizer. Synth Synthesizer. WavetableSynth Hardware wavetable synthesizer."
  },
  "api/Melanchall.DryWetMidi.Devices.MidiDeviceException.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.MidiDeviceException.html",
    "title": "Class MidiDeviceException | DryWetMIDI",
    "keywords": "Class MidiDeviceException The exception that is thrown when an error occurred on a MIDI device. Inheritance Object Exception MidiDeviceException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiDeviceException : Exception, ISerializable Constructors MidiDeviceException() Initializes a new instance of the MidiDeviceException . Declaration public MidiDeviceException() MidiDeviceException(String) Initializes a new instance of the MidiDeviceException with the specified error message. Declaration public MidiDeviceException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. MidiDeviceException(String, Exception) Initializes a new instance of the MidiDeviceException class with the specified error message and a reference to the inner exception that is the cause of this exception. Declaration public MidiDeviceException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Devices.MidiDevice.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.MidiDevice.html",
    "title": "Class MidiDevice | DryWetMIDI",
    "keywords": "Class MidiDevice Represents a MIDI device. Inheritance Object MidiDevice InputDevice OutputDevice Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class MidiDevice : IDisposable Fields _disposed Flag to detect redundant disposing. Declaration protected bool _disposed Field Value Type Description Boolean _handle Device handle. Declaration protected IntPtr _handle Field Value Type Description IntPtr Properties DriverManufacturer Gets the manufacturer of MIDI device driver. Declaration public Manufacturer DriverManufacturer { get; } Property Value Type Description Manufacturer DriverVersion Gets the version of MIDI device driver. Declaration public Version DriverVersion { get; } Property Value Type Description Version Id Gets the ID of a MIDI device. Declaration public int Id { get; } Property Value Type Description Int32 Name Gets the name of MIDI device. Declaration public string Name { get; } Property Value Type Description String ProductIdentifier Gets the product identifier of MIDI device. Declaration public ushort ProductIdentifier { get; } Property Value Type Description UInt16 Methods Dispose() Releases all resources used by the MIDI device class instance. Declaration public void Dispose() Dispose(Boolean) Releases the unmanaged resources used by the MIDI device class and optionally releases the managed resources. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. EnsureDeviceIsNotDisposed() Checks that current instance of MIDI device class is not disposed and throws ObjectDisposedException if not. Declaration protected void EnsureDeviceIsNotDisposed() Exceptions Type Condition ObjectDisposedException Current instance of MIDI device class is disposed. Finalize() Finalizes the current instance of the MIDI device class. Declaration protected void Finalize() GetErrorText(UInt32, StringBuilder, UInt32) Gets error description for the specified MMRESULT which is return value of winmm function. Declaration protected abstract uint GetErrorText(uint mmrError, StringBuilder pszText, uint cchText) Parameters Type Name Description UInt32 mmrError MMRESULT which is return value of winmm function. StringBuilder pszText StringBuilder to write error description to. UInt32 cchText Size of pszText buffer. Returns Type Description UInt32 Return value of winmm function which gets error description. OnError(Exception) Raises ErrorOccurred event. Declaration protected void OnError(Exception exception) Parameters Type Name Description Exception exception An exception that represents error occurred. ProcessMmResult(UInt32) Processes MMRESULT which is return value of winmm functions. Declaration protected void ProcessMmResult(uint mmResult) Parameters Type Name Description UInt32 mmResult MMRESULT which is return value of winmm function. Exceptions Type Condition MidiDeviceException mmResult represents error code. SetBasicDeviceInformation(UInt16, UInt16, UInt32, String) Sets the basic information about MIDI device, such as name and driver details. Declaration protected void SetBasicDeviceInformation(ushort manufacturerIdentifier, ushort productIdentifier, uint driverVersion, string name) Parameters Type Name Description UInt16 manufacturerIdentifier Identifier of the manufacturer of MIDI device driver. UInt16 productIdentifier Product identifier of MIDI device. UInt32 driverVersion Version of MIDI device driver. String name Name of MIDI device ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Events ErrorOccurred Occurs when an error occurred on device (for example, during MIDI events parsing). Declaration public event EventHandler<ErrorOccurredEventArgs> ErrorOccurred Event Type Type Description EventHandler < ErrorOccurredEventArgs > Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Devices.MidiClockSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.MidiClockSettings.html",
    "title": "Class MidiClockSettings | DryWetMIDI",
    "keywords": "Class MidiClockSettings Holds settings for MidiClock used by a clock driven object. Inheritance Object MidiClockSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiClockSettings Properties CreateTickGeneratorCallback Gets or sets a callback used to create tick generator for MIDI clock. Declaration public CreateTickGeneratorCallback CreateTickGeneratorCallback { get; set; } Property Value Type Description CreateTickGeneratorCallback Exceptions Type Condition ArgumentNullException value is null."
  },
  "api/Melanchall.DryWetMidi.Devices.MidiClock.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.MidiClock.html",
    "title": "Class MidiClock | DryWetMIDI",
    "keywords": "Class MidiClock MIDI clock used to drive playback or any timer-based object. Inheritance Object MidiClock Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiClock : IDisposable Constructors MidiClock(Boolean, ITickGenerator) Initializes a new instance of the MidiClock with the specified value indicating whether first tick should be generated immediately after clock started, and tick generator. Declaration public MidiClock(bool startImmediately, ITickGenerator tickGenerator) Parameters Type Name Description Boolean startImmediately A value indicating whether first tick should be generated immediately after clock started. ITickGenerator tickGenerator Tick generator used as timer firing at the specified interval. Null for no tick generator. Properties CurrentTime Gets the current time of clock as TimeSpan . Declaration public TimeSpan CurrentTime { get; } Property Value Type Description TimeSpan IsRunning Gets a value indicating whether MIDI clock is currently running or not. Declaration public bool IsRunning { get; } Property Value Type Description Boolean Speed Gets or sets the speed of clock, i.e. the speed of current time changing. Declaration public double Speed { get; set; } Property Value Type Description Double Exceptions Type Condition ArgumentOutOfRangeException value is negative. ObjectDisposedException The current MidiClock is disposed. Methods Dispose() Releases all resources used by the current MidiClock . Declaration public void Dispose() Finalize() Finalizes the current instance of the MidiClock . Declaration protected void Finalize() ResetCurrentTime() Resets the current time of the clock setting it to zero. Declaration public void ResetCurrentTime() Exceptions Type Condition ObjectDisposedException The current MidiClock is disposed. Restart() Stops, sets current time to zero and starts the clock. Declaration public void Restart() Exceptions Type Condition ObjectDisposedException The current MidiClock is disposed. SetCurrentTime(TimeSpan) Sets the current time of the clock. Declaration public void SetCurrentTime(TimeSpan time) Parameters Type Name Description TimeSpan time New current time of the clock. Exceptions Type Condition ObjectDisposedException The current MidiClock is disposed. Start() Starts/resumes the clock. Declaration public void Start() Exceptions Type Condition ObjectDisposedException The current MidiClock is disposed. Stop() Stops the clock.Current time will not be changed. Declaration public void Stop() Exceptions Type Condition ObjectDisposedException The current MidiClock is disposed. Tick() Generates new clock's tick manually without pulse from tick generator. Declaration public void Tick() Events Ticked Occurs when new tick generated. Declaration public event EventHandler Ticked Event Type Type Description EventHandler Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Core.NoHeaderChunkPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoHeaderChunkPolicy.html",
    "title": "Enum NoHeaderChunkPolicy | DryWetMIDI",
    "keywords": "Enum NoHeaderChunkPolicy Specifies how reading engine should react on missing of the header chunk in the MIDI file. The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum NoHeaderChunkPolicy Fields Name Description Abort Abort reading and throw an NoHeaderChunkException . Ignore Ignore missing of the header chunk."
  },
  "api/Melanchall.DryWetMidi.Core.NoHeaderChunkException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoHeaderChunkException.html",
    "title": "Class NoHeaderChunkException | DryWetMIDI",
    "keywords": "Class NoHeaderChunkException The exception that is thrown when a MIDI file doesn't contain a header chunk. Inheritance Object Exception MidiException NoHeaderChunkException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class NoHeaderChunkException : MidiException, ISerializable Remarks Note that this exception will be thrown only if NoHeaderChunkPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Constructors NoHeaderChunkException() Initializes a new instance of the NoHeaderChunkException . Declaration public NoHeaderChunkException() NoHeaderChunkException(String) Initializes a new instance of the NoHeaderChunkException with the specified error message. Declaration public NoHeaderChunkException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.MissedEndOfTrackPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MissedEndOfTrackPolicy.html",
    "title": "Enum MissedEndOfTrackPolicy | DryWetMIDI",
    "keywords": "Enum MissedEndOfTrackPolicy Specifies how reading engine should react on missed End Of Track event. The default is Ignore . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum MissedEndOfTrackPolicy : byte Remarks Although the End Of Track event is not optional and therefore missing of it must be treated as error, you can try to read a track chunk relying on the chunk's size only. Fields Name Description Abort Abort reading and throw an MissedEndOfTrackEventException . Ignore Ignore missing of the End Of Track event and try to read a track chunk relying on the chunk's size."
  },
  "api/Melanchall.DryWetMidi.Core.MissedEndOfTrackEventException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MissedEndOfTrackEventException.html",
    "title": "Class MissedEndOfTrackEventException | DryWetMIDI",
    "keywords": "Class MissedEndOfTrackEventException The exception that is thrown when a MIDI file chunk doesn't end with an End of Track event. Inheritance Object Exception MidiException MissedEndOfTrackEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class MissedEndOfTrackEventException : MidiException, ISerializable Remarks Note that this exception will be thrown only if MissedEndOfTrackPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Constructors MissedEndOfTrackEventException() Initializes a new instance of the MissedEndOfTrackEventException . Declaration public MissedEndOfTrackEventException() Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.MidiReader.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiReader.html",
    "title": "Class MidiReader | DryWetMIDI",
    "keywords": "Class MidiReader Reader of the MIDI data types. Inheritance Object MidiReader Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiReader : IDisposable Constructors MidiReader(Stream) Initializes a new instance of the MidiReader with the specified stream. Declaration public MidiReader(Stream stream) Parameters Type Name Description Stream stream Stream to read MIDI file from. Exceptions Type Condition ArgumentNullException stream is null. ArgumentException stream does not support reading, or is already closed. Properties EndReached Gets a value indicating whether end of the underlying stream is reached. Declaration public bool EndReached { get; } Property Value Type Description Boolean Exceptions Type Condition IOException An I/O error occurred on the underlying stream. ObjectDisposedException Property was called after the reader was disposed. Length Gets length of the underlying stream. Declaration public long Length { get; } Property Value Type Description Int64 Exceptions Type Condition IOException An I/O error occurred on the underlying stream. ObjectDisposedException Property was called after the reader was disposed. Position Gets or sets the position within the underlying stream. Declaration public long Position { get; set; } Property Value Type Description Int64 Exceptions Type Condition IOException An I/O error occurred on the underlying stream. ObjectDisposedException Property was called after the reader was disposed. Methods Dispose() Releases all resources used by the current instance of the MidiReader class. Declaration public void Dispose() Read3ByteDword() Reads a DWORD value (32-bit unsigned integer) presented by 3 bytes from the underlying stream and advances the current position by three bytes. Declaration public uint Read3ByteDword() Returns Type Description UInt32 A 32-bit unsigned integer read from the underlying stream. Exceptions Type Condition ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. NotEnoughBytesException Not enough bytes in the stream to read a 3-byte DWORD. ReadAllBytes() Reads all remaining bytes from the underlying stream and moves the current position to the stream's end. Declaration public byte[] ReadAllBytes() Returns Type Description Byte [] All bytes read from the underlying stream. Exceptions Type Condition EndOfStreamException The end of the underlying stream is reached. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadByte() Reads a byte from the underlying stream and advances the current position by one byte. Declaration public byte ReadByte() Returns Type Description Byte The next byte read from the underlying stream. Exceptions Type Condition EndOfStreamException The end of the underlying stream is reached. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadBytes(Int32) Reads the specified number of bytes from the underlying stream into a byte array and advances the current position by that number of bytes. Declaration public byte[] ReadBytes(int count) Parameters Type Name Description Int32 count The number of bytes to read. This value must be 0 or a non-negative number or an exception will occur. Returns Type Description Byte [] A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached. Exceptions Type Condition ArgumentOutOfRangeException count is negative. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadDword() Reads a DWORD value (32-bit unsigned integer) from the underlying stream and advances the current position by four bytes. Declaration public uint ReadDword() Returns Type Description UInt32 A 32-bit unsigned integer read from the underlying stream. Exceptions Type Condition ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. NotEnoughBytesException Not enough bytes in the stream to read a DWORD. ReadInt16() Reads an INT16 value (16-bit signed integer) from the underlying stream and advances the current position by two bytes. Declaration public short ReadInt16() Returns Type Description Int16 A 16-bit signed integer read from the underlying stream. Exceptions Type Condition ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. NotEnoughBytesException Not enough bytes in the stream to read a INT16. ReadSByte() Reads a signed byte from the underlying stream and advances the current position by one byte. Declaration public sbyte ReadSByte() Returns Type Description SByte A signed byte read from the underlying stream. Exceptions Type Condition EndOfStreamException The end of the underlying stream is reached. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadString(Int32) Reads the specified number of characters from the underlying stream, returns the data as string, and advances the current position by that number of characters. Declaration public string ReadString(int count) Parameters Type Name Description Int32 count The length of string to read. Returns Type Description String The string being read. Exceptions Type Condition ArgumentOutOfRangeException count is negative. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadVlqLongNumber() Reads a 64-bit signed integer presented in compressed format called variable-length quantity (VLQ) to the underlying stream. Declaration public long ReadVlqLongNumber() Returns Type Description Int64 A 64-bit signed integer read from the underlying stream. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte. Exceptions Type Condition NotEnoughBytesException Not enough bytes in the stream to read a variable-length quantity number. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadVlqNumber() Reads a 32-bit signed integer presented in compressed format called variable-length quantity (VLQ) to the underlying stream. Declaration public int ReadVlqNumber() Returns Type Description Int32 A 32-bit signed integer read from the underlying stream. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte. Exceptions Type Condition NotEnoughBytesException Not enough bytes in the stream to read a variable-length quantity number. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadWord() Reads a WORD value (16-bit unsigned integer) from the underlying stream and advances the current position by two bytes. Declaration public ushort ReadWord() Returns Type Description UInt16 A 16-bit unsigned integer read from the underlying stream. Exceptions Type Condition ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. NotEnoughBytesException Not enough bytes in the stream to read a WORD. Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Core.MidiFileUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiFileUtilities.html",
    "title": "Class MidiFileUtilities | DryWetMIDI",
    "keywords": "Class MidiFileUtilities Provides useful methods to manipulate an instance of the MidiFile . Inheritance Object MidiFileUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public static class MidiFileUtilities Methods GetChannels(MidiFile) Gets all channel numbers presented in the specified MidiFile . Declaration public static IEnumerable<FourBitNumber> GetChannels(this MidiFile midiFile) Parameters Type Name Description MidiFile midiFile MidiFile to get channels of. Returns Type Description IEnumerable < FourBitNumber > Collection of channel numbers presented in the midiFile . Exceptions Type Condition ArgumentNullException midiFile is null."
  },
  "api/Melanchall.DryWetMidi.Core.MidiEventToBytesConverter.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiEventToBytesConverter.html",
    "title": "Class MidiEventToBytesConverter | DryWetMIDI",
    "keywords": "Class MidiEventToBytesConverter Inheritance Object MidiEventToBytesConverter Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiEventToBytesConverter : IDisposable Constructors MidiEventToBytesConverter() Declaration public MidiEventToBytesConverter() MidiEventToBytesConverter(Int32) Declaration public MidiEventToBytesConverter(int capacity) Parameters Type Name Description Int32 capacity Properties WritingSettings Declaration public WritingSettings WritingSettings { get; } Property Value Type Description WritingSettings Methods Convert(MidiEvent) Declaration public byte[] Convert(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent Returns Type Description Byte [] Convert(MidiEvent, Int32) Declaration public byte[] Convert(MidiEvent midiEvent, int minSize) Parameters Type Name Description MidiEvent midiEvent Int32 minSize Returns Type Description Byte [] Dispose() Releases all resources used by the current instance of the BytesToMidiEventConverter class. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Core.MidiEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiEvent.html",
    "title": "Class MidiEvent | DryWetMIDI",
    "keywords": "Class MidiEvent Represents a MIDI file event stored in a track chunk. Inheritance Object MidiEvent ChannelEvent MetaEvent SysExEvent SystemCommonEvent SystemRealTimeEvent Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class MidiEvent Constructors MidiEvent(MidiEventType) Initializes a new instance of the MidiEvent with the specified event type. Declaration public MidiEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType The type of event. Exceptions Type Condition InvalidEnumArgumentException eventType specified an invalid value. Fields UnknownContentSize Constant for content's size of events that don't have size information stored. Declaration public const int UnknownContentSize = -1 Field Value Type Description Int32 Properties DeltaTime Gets or sets delta-time of the event. Declaration public long DeltaTime { get; set; } Property Value Type Description Int64 Remarks Delta-time represents the amount of time before the following event. If the first event in a track occurs at the very beginning of a track, or if two events occur simultaneously, a delta-time of zero is used. Delta-time is in some fraction of a beat (or a second, for recording a track with SMPTE times), as specified by the file's time division. Exceptions Type Condition ArgumentOutOfRangeException Delta-time is negative. EventType Gets the type of the event. Declaration public MidiEventType EventType { get; } Property Value Type Description MidiEventType Methods Clone() Clones event by creating a copy of it. Declaration public MidiEvent Clone() Returns Type Description MidiEvent Copy of the event. CloneEvent() Clones event by creating a copy of it. Declaration protected abstract MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event."
  },
  "api/Melanchall.DryWetMidi.Core.KeySignatureEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.KeySignatureEvent.html",
    "title": "Class KeySignatureEvent | DryWetMIDI",
    "keywords": "Class KeySignatureEvent Represents a Key Signature meta event. Inheritance Object MidiEvent MetaEvent KeySignatureEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class KeySignatureEvent : MetaEvent Remarks The MIDI key signature meta message specifies the key signature and scale of a MIDI file. Constructors KeySignatureEvent() Initializes a new instance of the KeySignatureEvent . Declaration public KeySignatureEvent() KeySignatureEvent(SByte, Byte) Initializes a new instance of the KeySignatureEvent with the specified key and scale. Declaration public KeySignatureEvent(sbyte key, byte scale) Parameters Type Name Description SByte key Byte scale Fields DefaultKey Default key (C). Declaration public const sbyte DefaultKey = 0 Field Value Type Description SByte DefaultScale Default scale (major). Declaration public const byte DefaultScale = 0 Field Value Type Description Byte Properties Key Gets or sets key signature in terms of number of flats (if negative) or sharps (if positive). Declaration public sbyte Key { get; set; } Property Value Type Description SByte Exceptions Type Condition ArgumentOutOfRangeException Key is out of range. Scale Gets or sets scale (0 for major or 1 for minor). Declaration public byte Scale { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException Scale is out of range. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValuePolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValuePolicy.html",
    "title": "Enum InvalidSystemCommonEventParameterValuePolicy | DryWetMIDI",
    "keywords": "Enum InvalidSystemCommonEventParameterValuePolicy Specifies how reading engine should react on invalid value of a system common event's parameter value. For example, 255 is the invalid value for the Number and will be processed according with this policy. The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum InvalidSystemCommonEventParameterValuePolicy Fields Name Description Abort Abort reading and throw an InvalidSystemCommonEventParameterValueException . SnapToLimits Read value and snap it to limits of the allowable range if it is out of them."
  },
  "api/Melanchall.DryWetMidi.Core.ExtraTrackChunkPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ExtraTrackChunkPolicy.html",
    "title": "Enum ExtraTrackChunkPolicy | DryWetMIDI",
    "keywords": "Enum ExtraTrackChunkPolicy Specifies how reading engine should react on new track chunk if already read chunks count greater or equals the one declared at the file header. The default is Read . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum ExtraTrackChunkPolicy : byte Fields Name Description Read Read the track chunk anyway. Skip Skip the chunk and go to the next one."
  },
  "api/Melanchall.DryWetMidi.Core.EventTypesCollection.html": {
    "href": "api/Melanchall.DryWetMidi.Core.EventTypesCollection.html",
    "title": "Class EventTypesCollection | DryWetMIDI",
    "keywords": "Class EventTypesCollection Collection of EventType objects which provide identity information of an event. Inheritance Object EventTypesCollection Implements IEnumerable < EventType > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class EventTypesCollection : IEnumerable<EventType>, IEnumerable Methods Add(Type, Byte) Adds event type along with the corresponding status byte. Declaration public void Add(Type type, byte statusByte) Parameters Type Name Description Type type Type of event. Byte statusByte Status byte of event. Exceptions Type Condition ArgumentNullException type is null. ArgumentException Event type specified by type and statusByte already exists in the EventsCollection . GetEnumerator() Returns an enumerator that iterates through a collection. Declaration public IEnumerator<EventType> GetEnumerator() Returns Type Description IEnumerator < EventType > An enumerator that can be used to iterate through the collection. TryGetStatusByte(Type, out Byte) Gets the status byte associated with the specified event type. Declaration public bool TryGetStatusByte(Type type, out byte statusByte) Parameters Type Name Description Type type Event type to get status byte for. Byte statusByte When this method returns, contains the status byte associated with the specified event type, if the type is found; otherwise, 0. This parameter is passed uninitialized. Returns Type Description Boolean true if the EventTypesCollection contains a status byte for the specified event type; otherwise, false. TryGetType(Byte, out Type) Gets the event type associated with the specified status byte. Declaration public bool TryGetType(byte statusByte, out Type type) Parameters Type Name Description Byte statusByte The status byte of the event type to get. Type type When this method returns, contains the event type associated with the specified status byte, if the status byte is found; otherwise, null. This parameter is passed uninitialized. Returns Type Description Boolean true if the EventTypesCollection contains an event type with the specified status byte; otherwise, false. Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An enumerator that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Melanchall.DryWetMidi.Core.CopyrightNoticeEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.CopyrightNoticeEvent.html",
    "title": "Class CopyrightNoticeEvent | DryWetMIDI",
    "keywords": "Class CopyrightNoticeEvent Represents a Copyright Notice meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent CopyrightNoticeEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class CopyrightNoticeEvent : BaseTextEvent Remarks The MIDI copyright notice meta message places a copyright notice in a MIDI file. Constructors CopyrightNoticeEvent() Initializes a new instance of the CopyrightNoticeEvent . Declaration public CopyrightNoticeEvent() CopyrightNoticeEvent(String) Initializes a new instance of the CopyrightNoticeEvent with the specified text of copyright notice. Declaration public CopyrightNoticeEvent(string text) Parameters Type Name Description String text Text of copyright notice. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.ControlUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ControlUtilities.html",
    "title": "Class ControlUtilities | DryWetMIDI",
    "keywords": "Class ControlUtilities Set of extension methods for ControlChangeEvent event. Inheritance Object ControlUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public static class ControlUtilities Methods AsSevenBitNumber(ControlName) Converts ControlName to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this ControlName controlName) Parameters Type Name Description ControlName controlName ControlName to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the controlName . Exceptions Type Condition InvalidEnumArgumentException controlName specified an invalid value. GetControlChangeEvent(ControlName, SevenBitNumber, FourBitNumber) Gets an instance of the ControlChangeEvent corresponding to the specified controller. Declaration public static ControlChangeEvent GetControlChangeEvent(this ControlName controlName, SevenBitNumber controlValue, FourBitNumber channel) Parameters Type Name Description ControlName controlName ControlName to get an event for. SevenBitNumber controlValue Controller value to set to event. FourBitNumber channel Channel an event should be created for. Returns Type Description ControlChangeEvent An instance of the ControlChangeEvent corresponding to the controlName . Exceptions Type Condition InvalidEnumArgumentException controlName specified an invalid value. GetControlName(ControlChangeEvent) Gets name of the controller presented by an instance of ControlChangeEvent . Declaration public static ControlName GetControlName(this ControlChangeEvent controlChangeEvent) Parameters Type Name Description ControlChangeEvent controlChangeEvent Control Change event to get controller name of. Returns Type Description ControlName Controller name of the controlChangeEvent event. Exceptions Type Condition ArgumentNullException controlChangeEvent is null."
  },
  "index.html": {
    "href": "index.html",
    "title": "Features | DryWetMIDI",
    "keywords": "DryWetMIDI is the .NET library to work with MIDI files and MIDI devices. Visit Wiki to learn how to use the DryWetMIDI. The library was tested on 130,000 files taken from here . Thanks midi-man for this great collection. You can get the latest version via NuGet . Features With the DryWetMIDI you can: Read, write and create Standard MIDI Files (SMF) . It is also possible to read RMID files where SMF wrapped to RIFF chunk. Send MIDI events to/ receive them from MIDI devices, play MIDI data and record it. Finely adjust process of reading and writing. It allows, for example, to read corrupted files and repair them, or build MIDI file validators. Implement custom meta events and custom chunks that can be written to and read from MIDI files. Easily catch specific error when reading or writing MIDI file since all possible errors in a MIDI file are presented as separate exception classes. Manage content of a MIDI file either with low-level objects, like event, or high-level ones, like note (read the High-level data managing section of the Wiki). Build musical compositions (see Pattern page of the library Wiki). Perform complex tasks like quantizing, notes splitting or converting MIDI file to CSV representation (see Tools page of the Wiki). Documentation Complete documentation including API reference is available on https://melanchall.github.io/drywetmidi . Projects using DryWetMIDI Here the list of noticeable projects that use DryWetMIDI: Clone Hero Free rhythm game, which can be played with any 5 or 6 button guitar controller, game controllers, or just your standard computer keyboard. The game is a clone of Guitar Hero. SOUNDSTORM VR VR rhythm shooter game. Electrophonics A collection of virtual musical instruments that features real MIDI output. Getting Started There are several articles that can help you dive into API provided by DryWetMIDI: DryWetMIDI: High-Level Processing of MIDI Files DryWetMIDI: Notes Quantization DryWetMIDI: Working with MIDI Devices Let's see some examples of what you can do with DryWetMIDI. To read a MIDI file you have to use Read static method of the MidiFile : var midiFile = MidiFile.Read(\"Some Great Song.mid\"); or, in more advanced form (visit Reading settings page on Wiki to learn more about how to adjust process of reading) var midiFile = MidiFile.Read(\"Some Great Song.mid\", new ReadingSettings { NoHeaderChunkPolicy = NoHeaderChunkPolicy.Abort, CustomChunkTypes = new ChunkTypesCollection { { typeof(MyCustomChunk), \"Cstm\" } } }); To write MIDI data to a file you have to use Write method of the MidiFile : midiFile.Write(\"My Great Song.mid\"); or, in more advanced form (visit Writing settings page on Wiki to learn more about how to adjust process of writing) midiFile.Write(\"My Great Song.mid\", true, MidiFileFormat.SingleTrack, new WritingSettings { CompressionPolicy = CompressionPolicy.Default }); Of course you can create a MIDI file from scratch by creating an instance of the MidiFile and writing it: var midiFile = new MidiFile( new TrackChunk( new SetTempoEvent(500000)), new TrackChunk( new TextEvent(\"It's just single note track...\"), new NoteOnEvent((SevenBitNumber)60, (SevenBitNumber)45), new NoteOffEvent((SevenBitNumber)60, (SevenBitNumber)0) { DeltaTime = 400 })); midiFile.Write(\"My Future Great Song.mid\"); or var midiFile = new MidiFile(); TempoMap tempoMap = midiFile.GetTempoMap(); var trackChunk = new TrackChunk(); using (var notesManager = trackChunk.ManageNotes()) { NotesCollection notes = notesManager.Notes; notes.Add(new Note(NoteName.A, 4, LengthConverter.ConvertFrom(new MetricTimeSpan(hours: 0, minutes: 0, seconds: 10), 0, tempoMap))); } midiFile.Chunks.Add(trackChunk); midiFile.Write(\"My Future Great Song.mid\"); If you want to speed up playing back a MIDI file by two times you can do it with this code: foreach (var trackChunk in midiFile.Chunks.OfType<TrackChunk>()) { foreach (var setTempoEvent in trackChunk.Events.OfType<SetTempoEvent>()) { setTempoEvent.MicrosecondsPerQuarterNote /= 2; } } Of course this code is simplified. In practice a MIDI file may not contain SetTempo event which means it has the default one (500,000 microseconds per beat). Instead of modifying a MIDI file you can use Playback class: using (var outputDevice = OutputDevice.GetByName(\"Microsoft GS Wavetable Synth\")) using (var playback = midiFile.GetPlayback(outputDevice)) { playback.Speed = 2.0; playback.Play(); } To get duration of a MIDI file as TimeSpan use this code: TempoMap tempoMap = midiFile.GetTempoMap(); TimeSpan midiFileDuration = midiFile.GetTimedEvents() .LastOrDefault(e => e.Event is NoteOffEvent) ?.TimeAs<MetricTimeSpan>(tempoMap) ?? new MetricTimeSpan(); Suppose you want to remove all C# notes from a MIDI file. It can be done with this code: foreach (var trackChunk in midiFile.GetTrackChunks()) { using (var notesManager = trackChunk.ManageNotes()) { notesManager.Notes.RemoveAll(n => n.NoteName == NoteName.CSharp); } } or midiFile.RemoveNotes(n => n.NoteName == NoteName.CSharp); To get all chords of a MIDI file at 20 seconds from the start of the file write this: TempoMap tempoMap = midiFile.GetTempoMap(); IEnumerable<Chord> chordsAt20seconds = midiFile.GetChords() .AtTime(new MetricTimeSpan(0, 0, 20), tempoMap, LengthedObjectPart.Entire); To create a MIDI file with single note which length will be equal to length of two triplet eighth notes you can use this code: var midiFile = new MidiFile(); var tempoMap = midiFile.GetTempoMap(); var trackChunk = new TrackChunk(); using (var notesManager = trackChunk.ManageNotes()) { var length = LengthConverter.ConvertFrom(2 * MusicalTimeSpan.Eighth.Triplet(), 0, tempoMap); var note = new Note(NoteName.A, 4, length); notesManager.Notes.Add(note); } midiFile.Chunks.Add(trackChunk); midiFile.Write(\"Single note great song.mid\"); You can even build a musical composition: Pattern pattern = new PatternBuilder() // Insert a pause of 5 seconds .StepForward(new MetricTimeSpan(0, 0, 5)) // Insert an eighth C# note of the 4th octave .Note(Octave.Get(4).CSharp, MusicalTimeSpan.Eighth) // Set default note length to triplet eighth and default octave to 5 .SetNoteLength(MusicalTimeSpan.Eighth.Triplet()) .SetOctave(Octave.Get(5)) // Now we can add triplet eighth notes of the 5th octave in a simple way .Note(NoteName.A) .Note(NoteName.B) .Note(NoteName.GSharp) // Get pattern .Build(); MidiFile midiFile = pattern.ToFile(TempoMap.Default); DryWetMIDI provides devices API allowing to send MIDI events to and receive them from MIDI devices. Following example shows how to send events to MIDI device and handle them as they are received by the device: using System; using Melanchall.DryWetMidi.Devices; using Melanchall.DryWetMidi.Core; // ... using (var outputDevice = OutputDevice.GetByName(\"MIDI Device\")) { outputDevice.EventSent += OnEventSent; using (var inputDevice = InputDevice.GetByName(\"MIDI Device\")) { inputDevice.EventReceived += OnEventReceived; inputDevice.StartEventsListening(); outputDevice.SendEvent(new NoteOnEvent()); outputDevice.SendEvent(new NoteOffEvent()); } } // ... private void OnEventReceived(object sender, MidiEventReceivedEventArgs e) { var midiDevice = (MidiDevice)sender; Console.WriteLine($\"Event received from '{midiDevice.Name}' at {DateTime.Now}: {e.Event}\"); } private void OnEventSent(object sender, MidiEventSentEventArgs e) { var midiDevice = (MidiDevice)sender; Console.WriteLine($\"Event sent to '{midiDevice.Name}' at {DateTime.Now}: {e.Event}\"); }"
  },
  "latest-release-notes.html": {
    "href": "latest-release-notes.html",
    "title": "Breaking changes | DryWetMIDI",
    "keywords": "Breaking changes This version of the library has breaking changes: Melanchall.DryWetMidi.Smf namespace renamed to Melanchall.DryWetMidi.Core . Melanchall.DryWetMidi.Smf.Interaction namespace renamed to Melanchall.DryWetMidi.Interaction . Pattern API moved to new namespace Melanchall.DryWetMidi.Composing . BarBeatTimeSpan renamed to BarBeatTicksTimeSpan . Renamed SetProgram methods of the PatternBuilder class to ProgramChange . Changed type of the parameter of SetOctave method of the PatternBuilder class from int to Octave . Documentation From now you can read complete library documentation on https://melanchall.github.io/drywetmidi . Here you can find information about every class and members of the library. API documentation is placed in API Documentation section. Right now it's not full replacement for the library Wiki so please don't forget to look at Wiki also when you want to get more information on some topic. New features Added Chord class to Melanchall.DryWetMidi.MusicTheory namespace. Added ChordProgression class to Melanchall.DryWetMidi.MusicTheory namespace. Added GetStep method to ScaleUtilities that gets NoteName corresponding to the specified step of a musical scale. Added GetNotesNames method to ScaleUtilities that returns infinite collection of note names that belong to the specified scale. Added IntervalQuality enum to Melanchall.DryWetMidi.MusicTheory namespace. Added Get method to Interval class which accepts interval number and quality. Implemented parsing of Interval by number and quality (for example, \"P8\" which is perfect eight). Added Transpose method to NoteUtilities class which returns the NoteName transposed by the specified interval. Note can be parsed now from string with any number of sharps and flats. Added NoteCallback property to Playback class which allows to modify and filter every note to be played. Added EventCallback property to Playback class which allows to modify and filter every MIDI event to be played. Added EventPlayed event to Playback class to track MIDI events playing. Added PlaybackCurrentTimeWatcher class which allows to watch current time of specified playbacks and report it in the specified units via corresponding event. Added BarBeatFractionTimeSpan which represents a beat as a fraction (for example 0.5 ) instead of number of whole beats and number of MIDI ticks (used by BarBeatTicksTimeSpan ). Added BarBeatUitilities which contains methods: GetBarLength that allows to get length of specified bar in terms of MIDI ticks; GetBeatLength that allows to get length of a beat of specified bar in terms MIDI ticks. Added Filter property to quantizing settings classes to filter out objects that should be quantized. Added Filter property to randomizing settings classes to filter out objects that should be randomized. Added MidiClock class which allows to report ticks with the specified interval and speed. Added NoteId class that repesents a separately sounding note (note number and channel). Added PatternUtilities class with methods: TransformNotes that transforms notes within the specified Pattern producing new pattern; TransformChords that transforms chords within the specified Pattern producing new pattern; SplitAtAnchor that splits a pattern into subpatterns in points where the specified anchor inserted; SplitAtAllAnchors that splits a pattern into subpatterns in points where anchors inserted; SplitAtMarker that splits a pattern into subpatterns in points where the specified marker inserted; SplitAtAllMarkers that splits a pattern into subpatterns in points where markers inserted; CombineInSequence that combines the specified patterns into single one placing them after each other; CombineInParallel that combines the specified patterns into single one starting all them at the same time (i.e. stacking patterns). Added constants to PatternBuilder that holds default values: DefaultVelocity ; DefaultNoteLength ; DefaultStep ; DefaultOctave ; DefaultRootNote . Added properties to PatternBuilder that return current values: Velocity ; NoteLength ; Step ; Octave ; RootNote . Added ReplayPattern method to PatternBuilder class to insert all actions from the specifed pattern. Added PatternBuilder constructor that accepts Pattern to start from the list of actions of the passed pattern. Added Chord methods to PatternBuilder class which accept an instance of the Melanchall.DryWetMidi.MusicTheory.Chord . Added Clone method to Pattern class to create a copy of the current pattern. Small changes and bug fixes Improved GetHashCode implementation for the library classes. Fixed: notes order is invalid on collecting by NotesManager when notes are overlapped. Fixed: PatternBuilder.MoveToPreviousTime doesn't work. Fixed: playback starts immidiately if first event is meta event with delta-time greater than zero (#37)."
  },
  "api/Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings-1.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings-1.html",
    "title": "Class LengthedObjectsQuantizingSettings<TObject> | DryWetMIDI",
    "keywords": "Class LengthedObjectsQuantizingSettings<TObject> Settings according to which lengthed objects should be quantized. Inheritance Object QuantizingSettings <TObject> LengthedObjectsQuantizingSettings<TObject> ChordsQuantizingSettings NotesQuantizingSettings Inherited Members QuantizingSettings<TObject>.DistanceCalculationType QuantizingSettings<TObject>.QuantizingLevel QuantizingSettings<TObject>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class LengthedObjectsQuantizingSettings<TObject> : QuantizingSettings<TObject> where TObject : ILengthedObject Type Parameters Name Description TObject Properties FixOppositeEnd Gets or sets a value indicating whether an opposite side of an object should be fixed or not. The default value is false. Declaration public bool FixOppositeEnd { get; set; } Property Value Type Description Boolean Remarks When an object's side is fixed the length can be changed during quantizing. LengthType Gets or sets the type of an object's length that should be kept in case the opposite side is not fixed. The default value is Midi . Declaration public TimeSpanType LengthType { get; set; } Property Value Type Description TimeSpanType Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. QuantizingBeyondFixedEndPolicy Gets or sets policy according to which a quantizer should act in case of object's side is going to be moved beyond an opposite one that is fixed. The default value is CollapseAndFix . Declaration public QuantizingBeyondFixedEndPolicy QuantizingBeyondFixedEndPolicy { get; set; } Property Value Type Description QuantizingBeyondFixedEndPolicy Remarks When one end of an object is fixed, there is a chance that the object's opposite end will be quantized in a such way that the object will be reversed resulting to negative length. This policy provides options to prevent this situation. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. QuantizingBeyondZeroPolicy Gets or sets policy according to which a quantizer should act in case of an object is going to be moved beyond zero. The default value is FixAtZero . Declaration public QuantizingBeyondZeroPolicy QuantizingBeyondZeroPolicy { get; set; } Property Value Type Description QuantizingBeyondZeroPolicy Remarks When the start time of an object is not fixed, there is a chance that the object's end time will be quantized in a such way that the start time will be negative due to the object is moved to the left. Negative time is invalid so this policy provides options to prevent this situation. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. QuantizingTarget Gets or sets the side of an object that should be quantized. The default value is Start . Declaration public LengthedObjectTarget QuantizingTarget { get; set; } Property Value Type Description LengthedObjectTarget Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizer-2.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizer-2.html",
    "title": "Class LengthedObjectsQuantizer<TObject, TSettings> | DryWetMIDI",
    "keywords": "Class LengthedObjectsQuantizer<TObject, TSettings> Provides methods to quantize lengthed objects time. Inheritance Object Quantizer <TObject, TSettings> LengthedObjectsQuantizer<TObject, TSettings> ChordsQuantizer NotesQuantizer Inherited Members Quantizer<TObject, TSettings>.QuantizeInternal(IEnumerable<TObject>, IGrid, TempoMap, TSettings) Quantizer<TObject, TSettings>.GetObjectTime(TObject, TSettings) Quantizer<TObject, TSettings>.SetObjectTime(TObject, Int64, TSettings) Quantizer<TObject, TSettings>.OnObjectQuantizing(TObject, QuantizedTime, IGrid, TempoMap, TSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class LengthedObjectsQuantizer<TObject, TSettings> : Quantizer<TObject, TSettings> where TObject : ILengthedObject where TSettings : LengthedObjectsQuantizingSettings<TObject>, new() Type Parameters Name Description TObject The type of objects to quantize. TSettings The type of quantizer's settings. Methods GetObjectTime(TObject, TSettings) Gets the time of an object that should be quantized. Declaration protected override sealed long GetObjectTime(TObject obj, TSettings settings) Parameters Type Name Description TObject obj Object to get time of. TSettings settings Settings according to which the object's time should be gotten. Returns Type Description Int64 The time of obj that should be quantized. Overrides Melanchall.DryWetMidi.Tools.Quantizer<TObject, TSettings>.GetObjectTime(TObject, TSettings) OnObjectQuantizing(TObject, QuantizedTime, IGrid, TempoMap, TSettings) Performs additional actions before the new time will be set to an object. Declaration protected override TimeProcessingInstruction OnObjectQuantizing(TObject obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TSettings settings) Parameters Type Name Description TObject obj Object to quantize. QuantizedTime quantizedTime Holds information about new time for an object. IGrid grid Grid to quantize object by. TempoMap tempoMap Tempo map used to quantize object. TSettings settings Settings according to which object should be quantized. Returns Type Description TimeProcessingInstruction An object indicating whether the new time should be set to the object or not. Also returned object contains that new time. Overrides Melanchall.DryWetMidi.Tools.Quantizer<TObject, TSettings>.OnObjectQuantizing(TObject, Melanchall.DryWetMidi.Tools.QuantizedTime, Melanchall.DryWetMidi.Interaction.IGrid, Melanchall.DryWetMidi.Interaction.TempoMap, TSettings) Remarks Inside this method the new time can be changed or quantizing of an object can be cancelled. Quantize(IEnumerable<TObject>, IGrid, TempoMap, TSettings) Quantizes objects time using the specified grid and settings. Declaration public void Quantize(IEnumerable<TObject> objects, IGrid grid, TempoMap tempoMap, TSettings settings = null) Parameters Type Name Description IEnumerable <TObject> objects Objects to quantize. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. TSettings settings Settings according to which objects should be quantized. Exceptions Type Condition ArgumentNullException objects is null. -or- grid is null. -or- tempoMap is null. SetObjectTime(TObject, Int64, TSettings) Sets the new time of an object. Declaration protected override sealed void SetObjectTime(TObject obj, long time, TSettings settings) Parameters Type Name Description TObject obj Object to set time for. Int64 time New time after quantizing. TSettings settings Settings according to which the object's time should be set. Overrides Melanchall.DryWetMidi.Tools.Quantizer<TObject, TSettings>.SetObjectTime(TObject, System.Int64, TSettings)"
  },
  "api/Melanchall.DryWetMidi.Tools.IBounds.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.IBounds.html",
    "title": "Interface IBounds | DryWetMIDI",
    "keywords": "Interface IBounds Represents time range used in time processing tools. Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public interface IBounds Methods GetBounds(Int64, TempoMap) Gets minimum and maximum times in MIDI ticks for the current time range. Declaration Tuple<long, long> GetBounds(long time, TempoMap tempoMap) Parameters Type Name Description Int64 time Time bounds should be calculated relative to. TempoMap tempoMap Tempo map used to calculate bounds. Returns Type Description Tuple < Int64 , Int64 > Pair where first item is minimum time and the second one is maximum time."
  },
  "api/Melanchall.DryWetMidi.Tools.CsvConverter.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.CsvConverter.html",
    "title": "Class CsvConverter | DryWetMIDI",
    "keywords": "Class CsvConverter Provides methods to convert MIDI objects to CSV representation and vice versa. Inheritance Object CsvConverter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class CsvConverter Methods ConvertCsvToMidiFile(Stream, MidiFileCsvConversionSettings) Converts CSV representation of a MIDI file to MidiFile reading CSV data from a stream. Declaration public MidiFile ConvertCsvToMidiFile(Stream stream, MidiFileCsvConversionSettings settings = null) Parameters Type Name Description Stream stream Stream to read MIDI file from. MidiFileCsvConversionSettings settings Settings according to which CSV data must be converted. Pass null to use default settings. Returns Type Description MidiFile An instance of the MidiFile representing a MIDI file written in CSV format. Exceptions Type Condition ArgumentNullException stream is null. ArgumentException stream doesn't support reading. IOException An I/O error occurred while reading from the stream. ObjectDisposedException stream is disposed. ConvertCsvToMidiFile(String, MidiFileCsvConversionSettings) Converts CSV representation of a MIDI file to MidiFile reading CSV data from a file. Declaration public MidiFile ConvertCsvToMidiFile(string filePath, MidiFileCsvConversionSettings settings = null) Parameters Type Name Description String filePath Path of the file with CSV representation of a MIDI file. MidiFileCsvConversionSettings settings Settings according to which CSV data must be converted. Pass null to use default settings. Returns Type Description MidiFile An instance of the MidiFile representing a MIDI file written in CSV format. Remarks Note that CSV representation of a MIDI file can be different. You can specify expected CSV layout via settings using CsvLayout property. Exceptions Type Condition ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException filePath is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). IOException An I/O error occurred while reading the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException This operation is not supported on the current platform. -or- filePath specified a directory. -or- The caller does not have the required permission. ConvertCsvToNotes(Stream, TempoMap, NoteCsvConversionSettings) Converts CSV representation of notes to collection of MidiFile reading CSV data from a stream. Declaration public IEnumerable<Note> ConvertCsvToNotes(Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings = null) Parameters Type Name Description Stream stream Stream to read notes from. TempoMap tempoMap Tempo map used to convert notes from CSV. NoteCsvConversionSettings settings Settings according to which CSV data must be converted. Pass null to use default settings. Returns Type Description IEnumerable < Note > Collection of Note representing notes written in CSV format. Exceptions Type Condition ArgumentNullException stream is null. -or- tempoMap is null. ArgumentException stream doesn't support reading. IOException An I/O error occurred while reading from the stream. ObjectDisposedException stream is disposed. ConvertCsvToNotes(String, TempoMap, NoteCsvConversionSettings) Converts CSV representation of notes to collection of Note reading CSV data from a file. Declaration public IEnumerable<Note> ConvertCsvToNotes(string filePath, TempoMap tempoMap, NoteCsvConversionSettings settings = null) Parameters Type Name Description String filePath Path of the file with CSV representation of notes. TempoMap tempoMap Tempo map used to convert notes from CSV. NoteCsvConversionSettings settings Settings according to which CSV data must be converted. Pass null to use default settings. Returns Type Description IEnumerable < Note > Collection of Note representing notes written in CSV format. Exceptions Type Condition ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException filePath is null. -or- tempoMap is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). IOException An I/O error occurred while reading the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException This operation is not supported on the current platform. -or- filePath specified a directory. -or- The caller does not have the required permission. ConvertMidiFileToCsv(MidiFile, Stream, MidiFileCsvConversionSettings) Converts the specified MidiFile to CSV represenattion and writes it to a stream. Declaration public void ConvertMidiFileToCsv(MidiFile midiFile, Stream stream, MidiFileCsvConversionSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to convert to CSV. Stream stream Stream to write CSV representation to. MidiFileCsvConversionSettings settings Settings according to which midiFile must be converted. Pass null to use default settings. Remarks Note that MidiFile can be converted to different CSV representations. You can specify desired CSV layout via settings using CsvLayout property. Exceptions Type Condition ArgumentNullException midiFile is null. -or- stream is null. ArgumentException stream doesn't support writing. IOException An I/O error occurred while writing to the stream. ObjectDisposedException stream is disposed. ConvertMidiFileToCsv(MidiFile, String, Boolean, MidiFileCsvConversionSettings) Converts the specified MidiFile to CSV represenattion and writes it to a file. Declaration public void ConvertMidiFileToCsv(MidiFile midiFile, string filePath, bool overwriteFile = false, MidiFileCsvConversionSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to convert to CSV. String filePath Path of the output CSV file. Boolean overwriteFile If true and file specified by filePath already exists it will be overwritten; if false and the file exists, exception will be thrown. MidiFileCsvConversionSettings settings Settings according to which midiFile must be converted. Pass null to use default settings. Remarks Note that MidiFile can be converted to different CSV representations. You can specify desired CSV layout via settings using CsvLayout property. Exceptions Type Condition ArgumentNullException midiFile is null. ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException filePath is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). IOException An I/O error occurred while writing the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException This operation is not supported on the current platform.-or- filePath specified a directory.-or- The caller does not have the required permission. ConvertNotesToCsv(IEnumerable<Note>, Stream, TempoMap, NoteCsvConversionSettings) Converts the specified collection of Note to CSV represenattion and writes it to a stream. Declaration public void ConvertNotesToCsv(IEnumerable<Note> notes, Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings = null) Parameters Type Name Description IEnumerable < Note > notes Collection of Note to convert to CSV. Stream stream Stream to write CSV representation to. TempoMap tempoMap Tempo map used to convert notes to CSV. NoteCsvConversionSettings settings Settings according to which notes must be converted. Pass null to use default settings. Exceptions Type Condition ArgumentNullException notes is null. -or- stream is null. -or- tempoMap is null. ArgumentException stream doesn't support writing. IOException An I/O error occurred while writing to the stream. ObjectDisposedException stream is disposed. ConvertNotesToCsv(IEnumerable<Note>, String, TempoMap, Boolean, NoteCsvConversionSettings) Converts the specified collection of Note to CSV represenattion and writes it to a file. Declaration public void ConvertNotesToCsv(IEnumerable<Note> notes, string filePath, TempoMap tempoMap, bool overwriteFile = false, NoteCsvConversionSettings settings = null) Parameters Type Name Description IEnumerable < Note > notes Collection of Note to convert to CSV. String filePath Path of the output CSV file. TempoMap tempoMap Tempo map used to convert notes to CSV. Boolean overwriteFile If true and file specified by filePath already exists it will be overwritten; if false and the file exists, exception will be thrown. NoteCsvConversionSettings settings Settings according to which notes must be converted. Pass null to use default settings. Exceptions Type Condition ArgumentNullException notes is null. -or- tempoMap is null. ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException filePath is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). IOException An I/O error occurred while writing the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException This operation is not supported on the current platform.-or- filePath specified a directory.-or- The caller does not have the required permission."
  },
  "api/Melanchall.DryWetMidi.Tools.ConstantBounds.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ConstantBounds.html",
    "title": "Class ConstantBounds | DryWetMIDI",
    "keywords": "Class ConstantBounds Time range which is constant for each object to be processed. Inheritance Object ConstantBounds Implements IBounds Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ConstantBounds : IBounds Constructors ConstantBounds(ITimeSpan) Initializes a new instance of the ConstantBounds with the specified size so time range will span for equal length to the left and to the right from time to calculate bounds relative to. Declaration public ConstantBounds(ITimeSpan size) Parameters Type Name Description ITimeSpan size Size of the time range. The length of time range will be 2 * size . Exceptions Type Condition ArgumentNullException size is null. ConstantBounds(ITimeSpan, ITimeSpan) Initializes a new instance of the ConstantBounds with the specified size of left and right parts so time range will span for different length to the left and to the right from time to calculate bounds relative to. Declaration public ConstantBounds(ITimeSpan leftSize, ITimeSpan rightSize) Parameters Type Name Description ITimeSpan leftSize Left part's size of the time range. ITimeSpan rightSize Right part's size of the time range. Exceptions Type Condition ArgumentNullException leftSize is null. -or- rightSize is null. Properties LeftSize Gets the size of left part of the time range represented by the current ConstantBounds . Declaration public ITimeSpan LeftSize { get; } Property Value Type Description ITimeSpan RightSize Gets the size of right part of the time range represented by the current ConstantBounds . Declaration public ITimeSpan RightSize { get; } Property Value Type Description ITimeSpan Methods GetBounds(Int64, TempoMap) Gets minimum and maximum times in MIDI ticks for the current time range. Declaration public Tuple<long, long> GetBounds(long time, TempoMap tempoMap) Parameters Type Name Description Int64 time Time bounds should be calculated relative to. TempoMap tempoMap Tempo map used to calculate bounds. Returns Type Description Tuple < Int64 , Int64 > Pair where first item is minimum time and the second one is maximum time. Implements IBounds"
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.html",
    "title": "Class ChordsSplitterUtilities | DryWetMIDI",
    "keywords": "Class ChordsSplitterUtilities Provides methods for splitting chords. Inheritance Object ChordsSplitterUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class ChordsSplitterUtilities Methods SplitChordsAtDistance(MidiFile, ITimeSpan, LengthedObjectTarget, Int64) Splits chords contained in the specified MidiFile at the specified distance from a chord's start or end. Declaration public static void SplitChordsAtDistance(this MidiFile midiFile, ITimeSpan distance, LengthedObjectTarget from, long notesTolerance = 0L) Parameters Type Name Description MidiFile midiFile MidiFile to split chords in. ITimeSpan distance Distance to split chords at. LengthedObjectTarget from Point of a chord distance should be measured from. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException midiFile is null. -or- distance is null. InvalidEnumArgumentException from specified an invalid value. ArgumentOutOfRangeException notesTolerance is negative. SplitChordsAtDistance(MidiFile, Double, TimeSpanType, LengthedObjectTarget, Int64) Splits chords contained in the specified MidiFile by the specified ratio of a chord's length measuring it from the chord's start or end. For example, 0.5 means splitting at the center of a chord. Declaration public static void SplitChordsAtDistance(this MidiFile midiFile, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, long notesTolerance = 0L) Parameters Type Name Description MidiFile midiFile MidiFile to split chords in. Double ratio Ratio of a chord's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a chord's length should be processed according to. LengthedObjectTarget from Point of a chord distance should be measured from. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException midiFile is null. ArgumentOutOfRangeException ratio is out of valid range. -or- notesTolerance is negative. InvalidEnumArgumentException lengthType specified an invalid value. -or- from specified an invalid value. SplitChordsAtDistance(TrackChunk, ITimeSpan, LengthedObjectTarget, TempoMap, Int64) Splits chords contained in the specified TrackChunk at the specified distance from a chord's start or end. Declaration public static void SplitChordsAtDistance(this TrackChunk trackChunk, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, long notesTolerance = 0L) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split chords in. ITimeSpan distance Distance to split chords at. LengthedObjectTarget from Point of a chord distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- distance is null. -or- tempoMap is null. InvalidEnumArgumentException from specified an invalid value. ArgumentOutOfRangeException notesTolerance is negative. SplitChordsAtDistance(TrackChunk, Double, TimeSpanType, LengthedObjectTarget, TempoMap, Int64) Splits chords contained in the specified TrackChunk by the specified ratio of a chord's length measuring it from the chord's start or end. For example, 0.5 means splitting at the center of a chord. Declaration public static void SplitChordsAtDistance(this TrackChunk trackChunk, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, long notesTolerance = 0L) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split chords in. Double ratio Ratio of a chord's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a chord's length should be processed according to. LengthedObjectTarget from Point of a chord distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- tempoMap is null. ArgumentOutOfRangeException ratio is out of valid range. -or- notesTolerance is negative. InvalidEnumArgumentException lengthType specified an invalid value. -or- from specified an invalid value. SplitChordsAtDistance(IEnumerable<TrackChunk>, ITimeSpan, LengthedObjectTarget, TempoMap, Int64) Splits chords contained in the specified collection of TrackChunk at the specified distance from a chord's start or end. Declaration public static void SplitChordsAtDistance(this IEnumerable<TrackChunk> trackChunks, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, long notesTolerance = 0L) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split chords in. ITimeSpan distance Distance to split chords at. LengthedObjectTarget from Point of a chord distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- distance is null. -or- tempoMap is null. InvalidEnumArgumentException from specified an invalid value. ArgumentOutOfRangeException notesTolerance is negative. SplitChordsAtDistance(IEnumerable<TrackChunk>, Double, TimeSpanType, LengthedObjectTarget, TempoMap, Int64) Splits chords contained in the specified collection of TrackChunk by the specified ratio of a chord's length measuring it from the chord's start or end. For example, 0.5 means splitting at the center of a chord. Declaration public static void SplitChordsAtDistance(this IEnumerable<TrackChunk> trackChunks, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, long notesTolerance = 0L) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split chords in. Double ratio Ratio of a chord's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a chord's length should be processed according to. LengthedObjectTarget from Point of a chord distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- tempoMap is null. ArgumentOutOfRangeException ratio is out of valid range. -or- notesTolerance is negative. InvalidEnumArgumentException lengthType specified an invalid value. -or- from specified an invalid value. SplitChordsByGrid(MidiFile, IGrid, Int64) Splits chords contained in the specified MidiFile by the specified grid. Declaration public static void SplitChordsByGrid(this MidiFile midiFile, IGrid grid, long notesTolerance = 0L) Parameters Type Name Description MidiFile midiFile MidiFile to split chords in. IGrid grid Grid to split chords by. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException grid is null. ArgumentOutOfRangeException notesTolerance is negative. SplitChordsByGrid(TrackChunk, IGrid, TempoMap, Int64) Splits chords contained in the specified TrackChunk by the specified grid. Declaration public static void SplitChordsByGrid(this TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, long notesTolerance = 0L) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split chords in. IGrid grid Grid to split chords by. TempoMap tempoMap Tempo map used to calculate times to split by. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- grid is null. -or- tempoMap is null. ArgumentOutOfRangeException notesTolerance is negative. SplitChordsByGrid(IEnumerable<TrackChunk>, IGrid, TempoMap, Int64) Splits chords contained in the specified collection of TrackChunk by the specified grid. Declaration public static void SplitChordsByGrid(this IEnumerable<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, long notesTolerance = 0L) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split chords in. IGrid grid Grid to split chords by. TempoMap tempoMap Tempo map used to calculate times to split by. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- grid is null. -or- tempoMap is null. ArgumentOutOfRangeException notesTolerance is negative. SplitChordsByPartsNumber(MidiFile, Int32, TimeSpanType, Int64) Splits chords contained in the specified MidiFile into the specified number of parts of the equal length. Declaration public static void SplitChordsByPartsNumber(this MidiFile midiFile, int partsNumber, TimeSpanType lengthType, long notesTolerance = 0L) Parameters Type Name Description MidiFile midiFile MidiFile to split chords in. Int32 partsNumber The number of parts to split chords into. TimeSpanType lengthType Type of a part's length. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Remarks If a chord has zero length, it will be splitted into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException midiFile is null. ArgumentOutOfRangeException partsNumber is zero or negative. -or- notesTolerance is negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitChordsByPartsNumber(TrackChunk, Int32, TimeSpanType, TempoMap, Int64) Splits chords contained in the specified TrackChunk into the specified number of parts of the equal length. Declaration public static void SplitChordsByPartsNumber(this TrackChunk trackChunk, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, long notesTolerance = 0L) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split chords in. Int32 partsNumber The number of parts to split chords into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Remarks If a chord has zero length, it will be splitted into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- tempoMap is null. ArgumentOutOfRangeException partsNumber is zero or negative. -or- notesTolerance is negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitChordsByPartsNumber(IEnumerable<TrackChunk>, Int32, TimeSpanType, TempoMap, Int64) Splits chords contained in the specified collection of TrackChunk into the specified number of parts of the equal length. Declaration public static void SplitChordsByPartsNumber(this IEnumerable<TrackChunk> trackChunks, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, long notesTolerance = 0L) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split chords in. Int32 partsNumber The number of parts to split chords into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Remarks If a chord has zero length, it will be splitted into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- tempoMap is null. ArgumentOutOfRangeException partsNumber is zero or negative. -or- notesTolerance is negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitChordsByStep(MidiFile, ITimeSpan, Int64) Splits chords contained in the specified MidiFile by the specified step so every chord will be splitted at points equally distanced from each other starting from the chord's start time. Declaration public static void SplitChordsByStep(this MidiFile midiFile, ITimeSpan step, long notesTolerance = 0L) Parameters Type Name Description MidiFile midiFile MidiFile to split chords in. ITimeSpan step Step to split chords by. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Remarks Chords with zero length and chords with length smaller than step will not be splitted. Exceptions Type Condition ArgumentNullException midiFile is null. -or- step is null. ArgumentOutOfRangeException notesTolerance is negative. SplitChordsByStep(TrackChunk, ITimeSpan, TempoMap, Int64) Splits chords contained in the specified TrackChunk by the specified step so every chord will be splitted at points equally distanced from each other starting from the chord's start time. Declaration public static void SplitChordsByStep(this TrackChunk trackChunk, ITimeSpan step, TempoMap tempoMap, long notesTolerance = 0L) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split chords in. ITimeSpan step Step to split chords by. TempoMap tempoMap Tempo map used to calculate times to split by. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Remarks Chords with zero length and chords with length smaller than step will not be splitted. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- step is null. -or- tempoMap is null. ArgumentOutOfRangeException notesTolerance is negative. SplitChordsByStep(IEnumerable<TrackChunk>, ITimeSpan, TempoMap, Int64) Splits chords contained in the specified collection of TrackChunk by the specified step so every chord will be splitted at points equally distanced from each other starting from the chord's start time. Declaration public static void SplitChordsByStep(this IEnumerable<TrackChunk> trackChunks, ITimeSpan step, TempoMap tempoMap, long notesTolerance = 0L) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split chords in. ITimeSpan step Step to split chords by. TempoMap tempoMap Tempo map used to calculate times to split by. Int64 notesTolerance Notes tolerance that defines maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be considered as a chord. Remarks Chords with zero length and chords with length smaller than step will not be splitted. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- step is null. -or- tempoMap is null. ArgumentOutOfRangeException notesTolerance is negative."
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsSplitter.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsSplitter.html",
    "title": "Class ChordsSplitter | DryWetMIDI",
    "keywords": "Class ChordsSplitter Provides methods for splitting chords. Inheritance Object LengthedObjectsSplitter < Chord > ChordsSplitter Inherited Members LengthedObjectsSplitter<Chord>.SplitByStep(IEnumerable<Chord>, ITimeSpan, TempoMap) LengthedObjectsSplitter<Chord>.SplitByPartsNumber(IEnumerable<Chord>, Int32, TimeSpanType, TempoMap) LengthedObjectsSplitter<Chord>.SplitByGrid(IEnumerable<Chord>, IGrid, TempoMap) LengthedObjectsSplitter<Chord>.SplitAtDistance(IEnumerable<Chord>, ITimeSpan, LengthedObjectTarget, TempoMap) LengthedObjectsSplitter<Chord>.SplitAtDistance(IEnumerable<Chord>, Double, TimeSpanType, LengthedObjectTarget, TempoMap) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordsSplitter : LengthedObjectsSplitter<Chord> Methods CloneObject(Chord) Clones an object by creating a copy of it. Declaration protected override Chord CloneObject(Chord obj) Parameters Type Name Description Chord obj Object to clone. Returns Type Description Chord Copy of the obj . Overrides Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter<Melanchall.DryWetMidi.Interaction.Chord>.CloneObject(Melanchall.DryWetMidi.Interaction.Chord) SplitObject(Chord, Int64) Splits an object by the specified time. Declaration protected override SplittedLengthedObject<Chord> SplitObject(Chord obj, long time) Parameters Type Name Description Chord obj Object to split. Int64 time Time to split obj by. Returns Type Description SplittedLengthedObject < Chord > An object containing left and right parts of the splitted object. Overrides Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter<Melanchall.DryWetMidi.Interaction.Chord>.SplitObject(Melanchall.DryWetMidi.Interaction.Chord, System.Int64)"
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsRandomizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsRandomizingSettings.html",
    "title": "Class ChordsRandomizingSettings | DryWetMIDI",
    "keywords": "Class ChordsRandomizingSettings Settings according to which chords should be randomized. Inheritance Object RandomizingSettings < Chord > LengthedObjectsRandomizingSettings < Chord > ChordsRandomizingSettings Inherited Members LengthedObjectsRandomizingSettings<Chord>.RandomizingTarget LengthedObjectsRandomizingSettings<Chord>.FixOppositeEnd RandomizingSettings<Chord>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordsRandomizingSettings : LengthedObjectsRandomizingSettings<Chord>"
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsRandomizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsRandomizerUtilities.html",
    "title": "Class ChordsRandomizerUtilities | DryWetMIDI",
    "keywords": "Class ChordsRandomizerUtilities Provides methods to randomize chords time. Inheritance Object ChordsRandomizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class ChordsRandomizerUtilities Methods RandomizeChords(MidiFile, IBounds, Int64, ChordsRandomizingSettings) Randomizes chords contained in the specified MidiFile . Declaration public static void RandomizeChords(this MidiFile midiFile, IBounds bounds, long notesTolerance = 0L, ChordsRandomizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to randomize chords in. IBounds bounds Bounds to randomize time within. Int64 notesTolerance Chords tolerance that defines maximum distance of chords from the start of the first chord of a chord. Chords within this tolerance will be considered as a chord. ChordsRandomizingSettings settings Settings according to which chords should be randomized. Exceptions Type Condition ArgumentNullException midiFile is null. -or- bounds is null. ArgumentOutOfRangeException notesTolerance is negative. RandomizeChords(TrackChunk, IBounds, TempoMap, Int64, ChordsRandomizingSettings) Randomizes chords contained in the specified TrackChunk . Declaration public static void RandomizeChords(this TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, long notesTolerance = 0L, ChordsRandomizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to randomize chords in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. Int64 notesTolerance Chords tolerance that defines maximum distance of chords from the start of the first chord of a chord. Chords within this tolerance will be considered as a chord. ChordsRandomizingSettings settings Settings according to which chords should be randomized. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- bounds is null. -or- tempoMap is null. ArgumentOutOfRangeException notesTolerance is negative. RandomizeChords(IEnumerable<TrackChunk>, IBounds, TempoMap, Int64, ChordsRandomizingSettings) Randomizes chords contained in the specified collection of TrackChunk . Declaration public static void RandomizeChords(this IEnumerable<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, long notesTolerance = 0L, ChordsRandomizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to randomize chords in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. Int64 notesTolerance Chords tolerance that defines maximum distance of chords from the start of the first chord of a chord. Chords within this tolerance will be considered as a chord. ChordsRandomizingSettings settings Settings according to which chords should be randomized. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- bounds is null. -or- tempoMap is null. ArgumentOutOfRangeException notesTolerance is negative."
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsRandomizer.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsRandomizer.html",
    "title": "Class ChordsRandomizer | DryWetMIDI",
    "keywords": "Class ChordsRandomizer Provides methods to randomize chords time. Inheritance Object Randomizer < Chord , ChordsRandomizingSettings > LengthedObjectsRandomizer < Chord , ChordsRandomizingSettings > ChordsRandomizer Inherited Members LengthedObjectsRandomizer<Chord, ChordsRandomizingSettings>.Randomize(IEnumerable<Chord>, IBounds, TempoMap, ChordsRandomizingSettings) LengthedObjectsRandomizer<Chord, ChordsRandomizingSettings>.GetObjectTime(Chord, ChordsRandomizingSettings) LengthedObjectsRandomizer<Chord, ChordsRandomizingSettings>.SetObjectTime(Chord, Int64, ChordsRandomizingSettings) LengthedObjectsRandomizer<Chord, ChordsRandomizingSettings>.OnObjectRandomizing(Chord, Int64, ChordsRandomizingSettings) Randomizer<Chord, ChordsRandomizingSettings>.RandomizeInternal(IEnumerable<Chord>, IBounds, TempoMap, ChordsRandomizingSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordsRandomizer : LengthedObjectsRandomizer<Chord, ChordsRandomizingSettings>"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Octave.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Octave.html",
    "title": "Class Octave | DryWetMIDI",
    "keywords": "Class Octave Represents an octave defined by its number. Inheritance Object Octave Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Octave Fields MaxOctaveNumber The largest possible value of an octave's number. Declaration public static readonly int MaxOctaveNumber Field Value Type Description Int32 Middle The octave which contains the middle C note (C4). Declaration public static readonly Octave Middle Field Value Type Description Octave MinOctaveNumber The smalles possible value of an octave's number. Declaration public static readonly int MinOctaveNumber Field Value Type Description Int32 OctaveSize The size of an octave, i.e. number of notes within an octave. Declaration public const int OctaveSize = 12 Field Value Type Description Int32 Properties A Gets the A note of an octave defined by the current Octave . Declaration public Note A { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. ASharp Gets the A# note of an octave defined by the current Octave . Declaration public Note ASharp { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. B Gets the B note of an octave defined by the current Octave . Declaration public Note B { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. C Gets the C note of an octave defined by the current Octave . Declaration public Note C { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. CSharp Gets the C# note of an octave defined by the current Octave . Declaration public Note CSharp { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. D Gets the D note of an octave defined by the current Octave . Declaration public Note D { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. DSharp Gets the D# note of an octave defined by the current Octave . Declaration public Note DSharp { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. E Gets the E note of an octave defined by the current Octave . Declaration public Note E { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. F Gets the F note of an octave defined by the current Octave . Declaration public Note F { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. FSharp Gets the F# note of an octave defined by the current Octave . Declaration public Note FSharp { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. G Gets the G note of an octave defined by the current Octave . Declaration public Note G { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. GSharp Gets the G# note of an octave defined by the current Octave . Declaration public Note GSharp { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. Number Gets the number of an octave represented by the current Octave . Declaration public int Number { get; } Property Value Type Description Int32 Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) Get(Int32) Gets an octave by the specified octave number. Declaration public static Octave Get(int octaveNumber) Parameters Type Name Description Int32 octaveNumber The number of an octave. Returns Type Description Octave An octave with the specified number. Exceptions Type Condition ArgumentOutOfRangeException octaveNumber is out of valid range. GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() GetNote(NoteName) Gets a note by the specified note name using current octave. Declaration public Note GetNote(NoteName noteName) Parameters Type Name Description NoteName noteName The name of a note. Returns Type Description Note Note with the specified note name and current octave. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. InvalidOperationException Unable to get a note for the noteName . ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(Octave, Octave) Determines if two Octave objects are equal. Declaration public static bool operator ==(Octave octave1, Octave octave2) Parameters Type Name Description Octave octave1 The first Octave to compare. Octave octave2 The second Octave to compare. Returns Type Description Boolean true if the octaves are equal, false otherwise. Inequality(Octave, Octave) Determines if two Octave objects are not equal. Declaration public static bool operator !=(Octave octave1, Octave octave2) Parameters Type Name Description Octave octave1 The first Octave to compare. Octave octave2 The second Octave to compare. Returns Type Description Boolean false if the octaves are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.NoteUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.NoteUtilities.html",
    "title": "Class NoteUtilities | DryWetMIDI",
    "keywords": "Class NoteUtilities Provides utilities for working with the Note . Inheritance Object NoteUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public static class NoteUtilities Methods GetNoteName(SevenBitNumber) Gets name of the note presented by note number. Declaration public static NoteName GetNoteName(SevenBitNumber noteNumber) Parameters Type Name Description SevenBitNumber noteNumber Note number to get note name of. Returns Type Description NoteName Name of the note presented by noteNumber . GetNoteNumber(NoteName, Int32) Gets the note number for the specified note name and octave. Declaration public static SevenBitNumber GetNoteNumber(NoteName noteName, int octave) Parameters Type Name Description NoteName noteName Name of the note. Int32 octave Number of the octave in scientific pitch notation. Returns Type Description SevenBitNumber Number of the note represented by specified name and octave. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the number of the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. GetNoteOctave(SevenBitNumber) Gets octave number of the note presented by note number in scientific pitch notation. Declaration public static int GetNoteOctave(SevenBitNumber noteNumber) Parameters Type Name Description SevenBitNumber noteNumber Note number to get octave of. Returns Type Description Int32 Octave of the note presented by noteNumber . Remarks Octave number will be returned in scientific pitch notation which means that 4 will be returned for 60 note number. Transpose(NoteName, Interval) Transposes note name by the specified interval. Declaration public static NoteName Transpose(this NoteName noteName, Interval interval) Parameters Type Name Description NoteName noteName NoteName to transpose. Interval interval Interval to transpose by. Returns Type Description NoteName Note name which is noteName transposed by interval . Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentNullException interval is null."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Notes.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Notes.html",
    "title": "Class Notes | DryWetMIDI",
    "keywords": "Class Notes Contains all available MIDI notes. Inheritance Object Notes Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public static class Notes Fields A0 A0 note. Declaration public static readonly Note A0 Field Value Type Description Note A1 A1 note. Declaration public static readonly Note A1 Field Value Type Description Note A2 A2 note. Declaration public static readonly Note A2 Field Value Type Description Note A3 A3 note. Declaration public static readonly Note A3 Field Value Type Description Note A4 A4 note. Declaration public static readonly Note A4 Field Value Type Description Note A5 A5 note. Declaration public static readonly Note A5 Field Value Type Description Note A6 A6 note. Declaration public static readonly Note A6 Field Value Type Description Note A7 A7 note. Declaration public static readonly Note A7 Field Value Type Description Note A8 A8 note. Declaration public static readonly Note A8 Field Value Type Description Note AMinus1 A-1 note. Declaration public static readonly Note AMinus1 Field Value Type Description Note ASharp0 A#0 note. Declaration public static readonly Note ASharp0 Field Value Type Description Note ASharp1 A#1 note. Declaration public static readonly Note ASharp1 Field Value Type Description Note ASharp2 A#2 note. Declaration public static readonly Note ASharp2 Field Value Type Description Note ASharp3 A#3 note. Declaration public static readonly Note ASharp3 Field Value Type Description Note ASharp4 A#4 note. Declaration public static readonly Note ASharp4 Field Value Type Description Note ASharp5 A#5 note. Declaration public static readonly Note ASharp5 Field Value Type Description Note ASharp6 A#6 note. Declaration public static readonly Note ASharp6 Field Value Type Description Note ASharp7 A#7 note. Declaration public static readonly Note ASharp7 Field Value Type Description Note ASharp8 A#8 note. Declaration public static readonly Note ASharp8 Field Value Type Description Note ASharpMinus1 A#-1 note. Declaration public static readonly Note ASharpMinus1 Field Value Type Description Note B0 B0 note. Declaration public static readonly Note B0 Field Value Type Description Note B1 B1 note. Declaration public static readonly Note B1 Field Value Type Description Note B2 B2 note. Declaration public static readonly Note B2 Field Value Type Description Note B3 B3 note. Declaration public static readonly Note B3 Field Value Type Description Note B4 B4 note. Declaration public static readonly Note B4 Field Value Type Description Note B5 B5 note. Declaration public static readonly Note B5 Field Value Type Description Note B6 B6 note. Declaration public static readonly Note B6 Field Value Type Description Note B7 B7 note. Declaration public static readonly Note B7 Field Value Type Description Note B8 B8 note. Declaration public static readonly Note B8 Field Value Type Description Note BMinus1 B-1 note. Declaration public static readonly Note BMinus1 Field Value Type Description Note C0 C0 note. Declaration public static readonly Note C0 Field Value Type Description Note C1 C1 note. Declaration public static readonly Note C1 Field Value Type Description Note C2 C2 note. Declaration public static readonly Note C2 Field Value Type Description Note C3 C3 note. Declaration public static readonly Note C3 Field Value Type Description Note C4 C4 note. Declaration public static readonly Note C4 Field Value Type Description Note C5 C5 note. Declaration public static readonly Note C5 Field Value Type Description Note C6 C6 note. Declaration public static readonly Note C6 Field Value Type Description Note C7 C7 note. Declaration public static readonly Note C7 Field Value Type Description Note C8 C8 note. Declaration public static readonly Note C8 Field Value Type Description Note C9 C9 note. Declaration public static readonly Note C9 Field Value Type Description Note CMinus1 C-1 note. Declaration public static readonly Note CMinus1 Field Value Type Description Note CSharp0 C#0 note. Declaration public static readonly Note CSharp0 Field Value Type Description Note CSharp1 C#1 note. Declaration public static readonly Note CSharp1 Field Value Type Description Note CSharp2 C#2 note. Declaration public static readonly Note CSharp2 Field Value Type Description Note CSharp3 C#3 note. Declaration public static readonly Note CSharp3 Field Value Type Description Note CSharp4 C#4 note. Declaration public static readonly Note CSharp4 Field Value Type Description Note CSharp5 C#5 note. Declaration public static readonly Note CSharp5 Field Value Type Description Note CSharp6 C#6 note. Declaration public static readonly Note CSharp6 Field Value Type Description Note CSharp7 C#7 note. Declaration public static readonly Note CSharp7 Field Value Type Description Note CSharp8 C#8 note. Declaration public static readonly Note CSharp8 Field Value Type Description Note CSharp9 C#9 note. Declaration public static readonly Note CSharp9 Field Value Type Description Note CSharpMinus1 C#-1 note. Declaration public static readonly Note CSharpMinus1 Field Value Type Description Note D0 D0 note. Declaration public static readonly Note D0 Field Value Type Description Note D1 D1 note. Declaration public static readonly Note D1 Field Value Type Description Note D2 D2 note. Declaration public static readonly Note D2 Field Value Type Description Note D3 D3 note. Declaration public static readonly Note D3 Field Value Type Description Note D4 D4 note. Declaration public static readonly Note D4 Field Value Type Description Note D5 D5 note. Declaration public static readonly Note D5 Field Value Type Description Note D6 D6 note. Declaration public static readonly Note D6 Field Value Type Description Note D7 D7 note. Declaration public static readonly Note D7 Field Value Type Description Note D8 D8 note. Declaration public static readonly Note D8 Field Value Type Description Note D9 D9 note. Declaration public static readonly Note D9 Field Value Type Description Note DMinus1 D-1 note. Declaration public static readonly Note DMinus1 Field Value Type Description Note DSharp0 D#0 note. Declaration public static readonly Note DSharp0 Field Value Type Description Note DSharp1 D#1 note. Declaration public static readonly Note DSharp1 Field Value Type Description Note DSharp2 D#2 note. Declaration public static readonly Note DSharp2 Field Value Type Description Note DSharp3 D#3 note. Declaration public static readonly Note DSharp3 Field Value Type Description Note DSharp4 D#4 note. Declaration public static readonly Note DSharp4 Field Value Type Description Note DSharp5 D#5 note. Declaration public static readonly Note DSharp5 Field Value Type Description Note DSharp6 D#6 note. Declaration public static readonly Note DSharp6 Field Value Type Description Note DSharp7 D#7 note. Declaration public static readonly Note DSharp7 Field Value Type Description Note DSharp8 D#8 note. Declaration public static readonly Note DSharp8 Field Value Type Description Note DSharp9 D#9 note. Declaration public static readonly Note DSharp9 Field Value Type Description Note DSharpMinus1 D#-1 note. Declaration public static readonly Note DSharpMinus1 Field Value Type Description Note E0 E0 note. Declaration public static readonly Note E0 Field Value Type Description Note E1 E1 note. Declaration public static readonly Note E1 Field Value Type Description Note E2 E2 note. Declaration public static readonly Note E2 Field Value Type Description Note E3 E3 note. Declaration public static readonly Note E3 Field Value Type Description Note E4 E4 note. Declaration public static readonly Note E4 Field Value Type Description Note E5 E5 note. Declaration public static readonly Note E5 Field Value Type Description Note E6 E6 note. Declaration public static readonly Note E6 Field Value Type Description Note E7 E7 note. Declaration public static readonly Note E7 Field Value Type Description Note E8 E8 note. Declaration public static readonly Note E8 Field Value Type Description Note E9 E9 note. Declaration public static readonly Note E9 Field Value Type Description Note EMinus1 E-1 note. Declaration public static readonly Note EMinus1 Field Value Type Description Note F0 F0 note. Declaration public static readonly Note F0 Field Value Type Description Note F1 F1 note. Declaration public static readonly Note F1 Field Value Type Description Note F2 F2 note. Declaration public static readonly Note F2 Field Value Type Description Note F3 F3 note. Declaration public static readonly Note F3 Field Value Type Description Note F4 F4 note. Declaration public static readonly Note F4 Field Value Type Description Note F5 F5 note. Declaration public static readonly Note F5 Field Value Type Description Note F6 F6 note. Declaration public static readonly Note F6 Field Value Type Description Note F7 F7 note. Declaration public static readonly Note F7 Field Value Type Description Note F8 F8 note. Declaration public static readonly Note F8 Field Value Type Description Note F9 F9 note. Declaration public static readonly Note F9 Field Value Type Description Note FMinus1 F-1 note. Declaration public static readonly Note FMinus1 Field Value Type Description Note FSharp0 F#0 note. Declaration public static readonly Note FSharp0 Field Value Type Description Note FSharp1 F#1 note. Declaration public static readonly Note FSharp1 Field Value Type Description Note FSharp2 F#2 note. Declaration public static readonly Note FSharp2 Field Value Type Description Note FSharp3 F#3 note. Declaration public static readonly Note FSharp3 Field Value Type Description Note FSharp4 F#4 note. Declaration public static readonly Note FSharp4 Field Value Type Description Note FSharp5 F#5 note. Declaration public static readonly Note FSharp5 Field Value Type Description Note FSharp6 F#6 note. Declaration public static readonly Note FSharp6 Field Value Type Description Note FSharp7 F#7 note. Declaration public static readonly Note FSharp7 Field Value Type Description Note FSharp8 F#8 note. Declaration public static readonly Note FSharp8 Field Value Type Description Note FSharp9 F#9 note. Declaration public static readonly Note FSharp9 Field Value Type Description Note FSharpMinus1 F#-1 note. Declaration public static readonly Note FSharpMinus1 Field Value Type Description Note G0 G0 note. Declaration public static readonly Note G0 Field Value Type Description Note G1 G1 note. Declaration public static readonly Note G1 Field Value Type Description Note G2 G2 note. Declaration public static readonly Note G2 Field Value Type Description Note G3 G3 note. Declaration public static readonly Note G3 Field Value Type Description Note G4 G4 note. Declaration public static readonly Note G4 Field Value Type Description Note G5 G5 note. Declaration public static readonly Note G5 Field Value Type Description Note G6 G6 note. Declaration public static readonly Note G6 Field Value Type Description Note G7 G7 note. Declaration public static readonly Note G7 Field Value Type Description Note G8 G8 note. Declaration public static readonly Note G8 Field Value Type Description Note G9 G9 note. Declaration public static readonly Note G9 Field Value Type Description Note GMinus1 G-1 note. Declaration public static readonly Note GMinus1 Field Value Type Description Note GSharp0 G#0 note. Declaration public static readonly Note GSharp0 Field Value Type Description Note GSharp1 G#1 note. Declaration public static readonly Note GSharp1 Field Value Type Description Note GSharp2 G#2 note. Declaration public static readonly Note GSharp2 Field Value Type Description Note GSharp3 G#3 note. Declaration public static readonly Note GSharp3 Field Value Type Description Note GSharp4 G#4 note. Declaration public static readonly Note GSharp4 Field Value Type Description Note GSharp5 G#5 note. Declaration public static readonly Note GSharp5 Field Value Type Description Note GSharp6 G#6 note. Declaration public static readonly Note GSharp6 Field Value Type Description Note GSharp7 G#7 note. Declaration public static readonly Note GSharp7 Field Value Type Description Note GSharp8 G#8 note. Declaration public static readonly Note GSharp8 Field Value Type Description Note GSharpMinus1 G#-1 note. Declaration public static readonly Note GSharpMinus1 Field Value Type Description Note"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.NoteName.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.NoteName.html",
    "title": "Enum NoteName | DryWetMIDI",
    "keywords": "Enum NoteName Name of a note of the 12-tone chromatic scale. Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public enum NoteName Fields Name Description A A (La) note. ASharp Half-stepped A (La) note. B B (Si) note. C C (Do) note. CSharp Half-stepped C (Do) note. D D (Re) note. DSharp Half-stepped D (Re) note. E E (Mi) note. F F (Fa) note. FSharp Half-stepped F (Fa) note. G G (Sol) note. GSharp Half-stepped G (Sol) note. Extension Methods NoteUtilities.Transpose(Interval)"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Note.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Note.html",
    "title": "Class Note | DryWetMIDI",
    "keywords": "Class Note Represents a note, i.e. note name and octave. Inheritance Object Note Implements IComparable < Note > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Note : IComparable<Note> Properties NoteName Gets the note name. Declaration public NoteName NoteName { get; } Property Value Type Description NoteName NoteNumber Gets the note number. Declaration public SevenBitNumber NoteNumber { get; } Property Value Type Description SevenBitNumber Octave Gets the octave number of a note. Declaration public int Octave { get; } Property Value Type Description Int32 Methods CompareTo(Note) Declaration public int CompareTo(Note other) Parameters Type Name Description Note other Returns Type Description Int32 Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) Get(SevenBitNumber) Returns a Note for the specified note number. Declaration public static Note Get(SevenBitNumber noteNumber) Parameters Type Name Description SevenBitNumber noteNumber The number of a note (60 is middle C). Returns Type Description Note A Note for the noteNumber . Get(NoteName, Int32) Returns a Note for the specified note name and octave number. Declaration public static Note Get(NoteName noteName, int octave) Parameters Type Name Description NoteName noteName The name of a note. Int32 octave The octave number. Returns Type Description Note A Note for the noteName and octave . Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() Parse(String) Converts the string representation of a musical note to its Note equivalent. Declaration public static Note Parse(string input) Parameters Type Name Description String input A string containing a note to convert. Returns Type Description Note A Note equivalent to the musical note contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Transpose(Interval) Returns the current Note transposed by the specified Interval . Declaration public Note Transpose(Interval interval) Parameters Type Name Description Interval interval The Interval to transpose the current Note by. Returns Type Description Note The current Note transposed by the interval . Exceptions Type Condition ArgumentOutOfRangeException Result note's number is out of valid range. TryParse(String, out Note) Converts the string representation of a musical note to its Note equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out Note note) Parameters Type Name Description String input A string containing a note to convert. Note note When this method returns, contains the Note equivalent of the musical note contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Operators Addition(Note, Int32) Transposes the specified Note . Declaration public static Note operator +(Note note, int halfSteps) Parameters Type Name Description Note note The Note to transpose. Int32 halfSteps The number of half steps to transpose the note by. Returns Type Description Note The Note which is the note transposed by the halfSteps . Exceptions Type Condition ArgumentNullException note is null. ArgumentOutOfRangeException Result note's number is out of valid range. Equality(Note, Note) Determines if two Note objects are equal. Declaration public static bool operator ==(Note note1, Note note2) Parameters Type Name Description Note note1 The first Note to compare. Note note2 The second Note to compare. Returns Type Description Boolean true if the notes are equal, false otherwise. Inequality(Note, Note) Determines if two Note objects are not equal. Declaration public static bool operator !=(Note note1, Note note2) Parameters Type Name Description Note note1 The first Note to compare. Note note2 The second Note to compare. Returns Type Description Boolean false if the notes are equal, true otherwise. Subtraction(Note, Int32) Transposes the specified Note . Declaration public static Note operator -(Note note, int halfSteps) Parameters Type Name Description Note note The Note to transpose. Int32 halfSteps The number of half steps to transpose the note by. Returns Type Description Note The Note which is the note transposed by the halfSteps . Exceptions Type Condition ArgumentNullException note is null. ArgumentOutOfRangeException Result note's number is out of valid range. Implements System.IComparable<T>"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.IntervalQuality.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.IntervalQuality.html",
    "title": "Enum IntervalQuality | DryWetMIDI",
    "keywords": "Enum IntervalQuality Represents an interval's quality. Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public enum IntervalQuality Fields Name Description Augmented Augmented interval. Diminished Diminished interval. Major Major interval. Minor Minor interval. Perfect Perfect interval."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.IntervalDirection.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.IntervalDirection.html",
    "title": "Enum IntervalDirection | DryWetMIDI",
    "keywords": "Enum IntervalDirection Direction of a musical interval represented by the Interval . The default is Up . Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public enum IntervalDirection Fields Name Description Down Downward interval (for example, 5 half steps down). Up Upward interval (for example, 5 half steps up)."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.IntervalDefinition.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.IntervalDefinition.html",
    "title": "Class IntervalDefinition | DryWetMIDI",
    "keywords": "Class IntervalDefinition Inheritance Object IntervalDefinition Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class IntervalDefinition Constructors IntervalDefinition(Int32, IntervalQuality) Declaration public IntervalDefinition(int number, IntervalQuality quality) Parameters Type Name Description Int32 number IntervalQuality quality Properties Number Declaration public int Number { get; } Property Value Type Description Int32 Quality Declaration public IntervalQuality Quality { get; } Property Value Type Description IntervalQuality Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators Equality(IntervalDefinition, IntervalDefinition) Declaration public static bool operator ==(IntervalDefinition intervalDefinition1, IntervalDefinition intervalDefinition2) Parameters Type Name Description IntervalDefinition intervalDefinition1 IntervalDefinition intervalDefinition2 Returns Type Description Boolean Inequality(IntervalDefinition, IntervalDefinition) Declaration public static bool operator !=(IntervalDefinition intervalDefinition1, IntervalDefinition intervalDefinition2) Parameters Type Name Description IntervalDefinition intervalDefinition1 IntervalDefinition intervalDefinition2 Returns Type Description Boolean"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Interval.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Interval.html",
    "title": "Class Interval | DryWetMIDI",
    "keywords": "Class Interval Represents a musical interval in terms of half steps number. Inheritance Object Interval Implements IComparable < Interval > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Interval : IComparable<Interval> Fields Eight Interval of eight half steps up. Declaration public static readonly Interval Eight Field Value Type Description Interval Eleven Interval of eleven half steps up. Declaration public static readonly Interval Eleven Field Value Type Description Interval Five Interval of five half steps up. Declaration public static readonly Interval Five Field Value Type Description Interval Four Interval of four half steps up. Declaration public static readonly Interval Four Field Value Type Description Interval Nine Interval of nine half steps up. Declaration public static readonly Interval Nine Field Value Type Description Interval One Interval of one half step up. Declaration public static readonly Interval One Field Value Type Description Interval Seven Interval of seven half steps up. Declaration public static readonly Interval Seven Field Value Type Description Interval Six Interval of six half steps up. Declaration public static readonly Interval Six Field Value Type Description Interval Ten Interval of ten half steps up. Declaration public static readonly Interval Ten Field Value Type Description Interval Three Interval of three half steps up. Declaration public static readonly Interval Three Field Value Type Description Interval Twelve Interval of twelve half steps up (one octave up). Declaration public static readonly Interval Twelve Field Value Type Description Interval Two Interval of two half steps up. Declaration public static readonly Interval Two Field Value Type Description Interval Zero Interval of zero half steps up. Declaration public static readonly Interval Zero Field Value Type Description Interval Properties Direction Gets the direction of the interval represented by the current Interval . Declaration public IntervalDirection Direction { get; } Property Value Type Description IntervalDirection HalfSteps Gets signed half steps number which represents an interval of the current Interval . Declaration public int HalfSteps { get; } Property Value Type Description Int32 Size Gets the size of interval represented by the current Interval as a number of half steps away. Declaration public SevenBitNumber Size { get; } Property Value Type Description SevenBitNumber Methods CompareTo(Interval) Declaration public int CompareTo(Interval other) Parameters Type Name Description Interval other Returns Type Description Int32 Down() Returns downward version of the current Interval . Declaration public Interval Down() Returns Type Description Interval A downward version of the current Interval . Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) FromDefinition(IntervalDefinition) Declaration public static Interval FromDefinition(IntervalDefinition intervalDefinition) Parameters Type Name Description IntervalDefinition intervalDefinition Returns Type Description Interval FromHalfSteps(Int32) Returns an Interval by the specified signed number of half steps where negative one means downward interval. Declaration public static Interval FromHalfSteps(int halfSteps) Parameters Type Name Description Int32 halfSteps The number of half steps. Returns Type Description Interval An Interval represented by the halfSteps . Exceptions Type Condition ArgumentOutOfRangeException halfSteps is out of range (result interval is out of the [-127,127] range). Get(SevenBitNumber, IntervalDirection) Returns an Interval by the specified half steps number and interval's direction. Declaration public static Interval Get(SevenBitNumber intervalSize, IntervalDirection direction) Parameters Type Name Description SevenBitNumber intervalSize The size of an interval as a number of half steps away. IntervalDirection direction The direction of an interval (up or down). Returns Type Description Interval An Interval with the specified interval and direction. Exceptions Type Condition InvalidEnumArgumentException direction specified an invalid value. Get(IntervalQuality, Int32) Gets an instance of the Interval by the specified interval quality and number. Declaration public static Interval Get(IntervalQuality intervalQuality, int intervalNumber) Parameters Type Name Description IntervalQuality intervalQuality Interval quality. Int32 intervalNumber Interval number. Returns Type Description Interval An instance of the Interval which represents intervalNumber along with intervalQuality . Exceptions Type Condition InvalidEnumArgumentException intervalQuality specified an invalid value. ArgumentOutOfRangeException intervalNumber is less than 1. ArgumentException intervalQuality is not applicable to intervalNumber . GetDown(SevenBitNumber) Returns a downward Interval by the specified half steps number. Declaration public static Interval GetDown(SevenBitNumber intervalSize) Parameters Type Name Description SevenBitNumber intervalSize The size of an interval as a number of half steps away. Returns Type Description Interval A downward Interval with the specified interval. GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() GetIntervalDefinitions() Declaration public IReadOnlyCollection<IntervalDefinition> GetIntervalDefinitions() Returns Type Description IReadOnlyCollection < IntervalDefinition > GetUp(SevenBitNumber) Returns an upward Interval by the specified half steps number. Declaration public static Interval GetUp(SevenBitNumber intervalSize) Parameters Type Name Description SevenBitNumber intervalSize The size of an interval as a number of half steps away. Returns Type Description Interval An upward Interval with the specified interval. IsPerfect(Int32) Gets a value indicating whether the specified interval number (1 and greater) is perfect or not. Declaration public static bool IsPerfect(int intervalNumber) Parameters Type Name Description Int32 intervalNumber Interval number to determine whether it's perfect or not. Returns Type Description Boolean true if intervalNumber is perfect; otherwise, false. Exceptions Type Condition ArgumentOutOfRangeException intervalNumber is less than 1. IsQualityApplicable(IntervalQuality, Int32) Gets a value indicating whether quality is applicable to the specified interval number (1 and greater) or not. Declaration public static bool IsQualityApplicable(IntervalQuality intervalQuality, int intervalNumber) Parameters Type Name Description IntervalQuality intervalQuality Interval quality to check whether it's applicable to intervalNumber or not. Int32 intervalNumber Interval number to check whether intervalQuality is applicable to it or not. Returns Type Description Boolean true if intervalQuality is applicable to intervalNumber ; otherwise, false. Exceptions Type Condition InvalidEnumArgumentException intervalQuality specified an invalid value. ArgumentOutOfRangeException intervalNumber is less than 1. Parse(String) Converts the string representation of a musical interval to its Scale equivalent. Declaration public static Interval Parse(string input) Parameters Type Name Description String input A string containing an interval to convert. Returns Type Description Interval A Scale equivalent to the musical interval contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out Interval) Converts the string representation of a musical interval to its Interval equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out Interval interval) Parameters Type Name Description String input A string containing an interval to convert. Interval interval When this method returns, contains the Interval equivalent of the musical interval contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Up() Returns upward version of the current Interval . Declaration public Interval Up() Returns Type Description Interval An upward version of the current Interval . Operators Addition(Interval, Int32) Adds the specified number of half steps to an Interval . Declaration public static Interval operator +(Interval interval, int halfSteps) Parameters Type Name Description Interval interval The interval to add half steps to. Int32 halfSteps The number of half steps to add to the interval . Returns Type Description Interval The Interval which is the interval shifted by the halfSteps . Exceptions Type Condition ArgumentNullException interval is null. ArgumentOutOfRangeException halfSteps is out of range (result interval is out of the [-127,127] range). Division(Interval, Int32) Shrinks the specified Interval by dividing it by an integer number. Declaration public static Interval operator /(Interval interval, int divisor) Parameters Type Name Description Interval interval The interval to shrink. Int32 divisor The number to divide the interval by. Returns Type Description Interval The Interval which is the interval shrinked by the divisor . Exceptions Type Condition ArgumentNullException interval is null. ArgumentOutOfRangeException divisor is zero. Equality(Interval, Interval) Determines if two Interval objects are equal. Declaration public static bool operator ==(Interval interval1, Interval interval2) Parameters Type Name Description Interval interval1 The first Interval to compare. Interval interval2 The second Interval to compare. Returns Type Description Boolean true if the intervals are equal, false otherwise. Implicit(SevenBitNumber to Interval) Converts the value of a SevenBitNumber to a Interval . Declaration public static implicit operator Interval(SevenBitNumber interval) Parameters Type Name Description SevenBitNumber interval SevenBitNumber object to convert to an Interval . Returns Type Description Interval Implicit(Interval to Int32) Converts the value of a Interval to a Int32 . Declaration public static implicit operator int (Interval interval) Parameters Type Name Description Interval interval Interval object to convert to an Int32 . Returns Type Description Int32 Inequality(Interval, Interval) Determines if two Interval objects are not equal. Declaration public static bool operator !=(Interval interval1, Interval interval2) Parameters Type Name Description Interval interval1 The first Interval to compare. Interval interval2 The second Interval to compare. Returns Type Description Boolean false if the intervals are equal, true otherwise. Multiply(Interval, Int32) Stretches the specified Interval by multiplying it by an integer number. Declaration public static Interval operator *(Interval interval, int multiplier) Parameters Type Name Description Interval interval The interval to stretch. Int32 multiplier The number to multiply the interval by. Returns Type Description Interval The Interval which is the interval stretched by the multiplier . Exceptions Type Condition ArgumentNullException interval is null. ArgumentOutOfRangeException multiplier is out of range (result interval is out of the [-127,127] range). Subtraction(Interval, Int32) Subtracts the specified number of half steps from an Interval . Declaration public static Interval operator -(Interval interval, int halfSteps) Parameters Type Name Description Interval interval The interval to subtract half steps from. Int32 halfSteps The number of half steps to subtract from the interval . Returns Type Description Interval The Interval which is the interval shifted by the halfSteps . Exceptions Type Condition ArgumentNullException interval is null. ArgumentOutOfRangeException halfSteps is out of range (result interval is out of the [-127,127] range). UnaryNegation(Interval) Returns downward version of the specified Interval . Declaration public static Interval operator -(Interval interval) Parameters Type Name Description Interval interval The Interval to get downward version of. Returns Type Description Interval A downward version of the interval . Remarks This operator produces the same result as the Down() method. Exceptions Type Condition ArgumentNullException interval is null. UnaryPlus(Interval) Returns upward version of the specified Interval . Declaration public static Interval operator +(Interval interval) Parameters Type Name Description Interval interval The Interval to get upward version of. Returns Type Description Interval An upward version of the interval . Remarks This operator produces the same result as the Up() method. Exceptions Type Condition ArgumentNullException interval is null. Implements System.IComparable<T>"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ChordUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ChordUtilities.html",
    "title": "Class ChordUtilities | DryWetMIDI",
    "keywords": "Class ChordUtilities Utilities for working with Chord . Inheritance Object ChordUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public static class ChordUtilities Methods GetIntervalsBetweenNotes(Chord) Gets intervals between notes of the specified chord. For example, +4 and +3 for C major (+4 for C and E, +3 for E and G). Declaration public static IEnumerable<Interval> GetIntervalsBetweenNotes(this Chord chord) Parameters Type Name Description Chord chord Chord to get intervals between notes. Returns Type Description IEnumerable < Interval > Intervals between notes of the chord . Exceptions Type Condition ArgumentNullException chord is null. GetIntervalsFromRootNote(Chord) Gets intervals from the root note of the specified chord. For example, +4 and +7 for C major (+4 for C and E, +7 for C and G). Declaration public static IEnumerable<Interval> GetIntervalsFromRootNote(this Chord chord) Parameters Type Name Description Chord chord Chord to get intervals from root note. Returns Type Description IEnumerable < Interval > Intervals from the root note of the chord . Exceptions Type Condition ArgumentNullException chord is null. InvalidOperationException Some intervals are greater than MaxValue . GetInversions(Chord) Gets the collection of chord's inversions. Declaration public static IEnumerable<Chord> GetInversions(this Chord chord) Parameters Type Name Description Chord chord Returns Type Description IEnumerable < Chord > Collection of chord's inversions. ResolveNotes(Chord, Octave) Resolves notes of the specified chord. Declaration public static IEnumerable<Note> ResolveNotes(this Chord chord, Octave octave) Parameters Type Name Description Chord chord Chord to resolve notes. Octave octave Octave to resolve notes of the chord . Returns Type Description IEnumerable < Note > Notes of the chord regarding to octave . Exceptions Type Condition ArgumentNullException chord is null. -or- octave is null. ResolveRootNote(Chord, Octave) Resolves root note of the specified chord. Declaration public static Note ResolveRootNote(this Chord chord, Octave octave) Parameters Type Name Description Chord chord Chord to resolve root note. Octave octave Octave to resolve root note of the chord . Returns Type Description Note Root note of the chord regarding to octave . Exceptions Type Condition ArgumentNullException chord is null. -or- octave is null."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ChordQuality.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ChordQuality.html",
    "title": "Enum ChordQuality | DryWetMIDI",
    "keywords": "Enum ChordQuality Represents a chord's quality. Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public enum ChordQuality Fields Name Description Augmented Augmented chord. Diminished Diminished chord. Major Major chord. Minor Minor chord."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ChordProgression.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ChordProgression.html",
    "title": "Class ChordProgression | DryWetMIDI",
    "keywords": "Class ChordProgression Represents a chord progression as a set of chords. Inheritance Object ChordProgression Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordProgression Constructors ChordProgression(Chord[]) Initializes a new instance of the ChordProgression with the specified chords. Declaration public ChordProgression(params Chord[] chords) Parameters Type Name Description Chord [] chords Chords of the chord progression. Exceptions Type Condition ArgumentNullException chords is null. ArgumentException chords contains null. ChordProgression(IEnumerable<Chord>) Initializes a new instance of the ChordProgression with the specified chords. Declaration public ChordProgression(IEnumerable<Chord> chords) Parameters Type Name Description IEnumerable < Chord > chords Chords of the chord progression. Exceptions Type Condition ArgumentNullException chords is null. ArgumentException chords contains null. Properties Chords Gets the chords of the chord progression. Declaration public IEnumerable<Chord> Chords { get; } Property Value Type Description IEnumerable < Chord > Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() Parse(String, Scale) Converts the string representation of a chord progression to its ChordProgression equivalent. Declaration public static ChordProgression Parse(string input, Scale scale) Parameters Type Name Description String input A string containing a chord progression to convert. Scale scale Scale to resolve chords. Returns Type Description ChordProgression A ChordProgression equivalent to the chord progression contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, Scale, out ChordProgression) Converts the string representation of a chord progression to its ChordProgression equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, Scale scale, out ChordProgression chordProgression) Parameters Type Name Description String input A string containing a chord progression to convert. Scale scale Scale to resolve chords. ChordProgression chordProgression When this method returns, contains the ChordProgression equivalent of the chord progression contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Operators Equality(ChordProgression, ChordProgression) Determines if two ChordProgression objects are equal. Declaration public static bool operator ==(ChordProgression chordProgression1, ChordProgression chordProgression2) Parameters Type Name Description ChordProgression chordProgression1 The first ChordProgression to compare. ChordProgression chordProgression2 The second ChordProgression to compare. Returns Type Description Boolean true if the chord progressions are equal, false otherwise. Inequality(ChordProgression, ChordProgression) Determines if two ChordProgression objects are not equal. Declaration public static bool operator !=(ChordProgression chordProgression1, ChordProgression chordProgression2) Parameters Type Name Description ChordProgression chordProgression1 The first ChordProgression to compare. ChordProgression chordProgression2 The second ChordProgression to compare. Returns Type Description Boolean false if the chord progressions are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Chord.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Chord.html",
    "title": "Class Chord | DryWetMIDI",
    "keywords": "Class Chord Represents a chord as a set of notes names. Inheritance Object Chord Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Chord Constructors Chord(NoteName, Interval[]) Initializes a new instance of the Chord with the specified root note name and intervals from root one. Declaration public Chord(NoteName rootNoteName, params Interval[] intervalsFromRoot) Parameters Type Name Description NoteName rootNoteName The root note's name. Interval [] intervalsFromRoot Intervals from root note. Exceptions Type Condition InvalidEnumArgumentException rootNoteName specified an invalid value. ArgumentNullException intervalsFromRoot is null. Chord(NoteName, NoteName[]) Initializes a new instance of the Chord with the specified root note name and names of the notes above root one (for example, C and E G). Declaration public Chord(NoteName rootNoteName, params NoteName[] notesNamesAboveRoot) Parameters Type Name Description NoteName rootNoteName The root note's name. NoteName [] notesNamesAboveRoot The set of names of the notes above root one. Exceptions Type Condition InvalidEnumArgumentException rootNoteName specified an invalid value. -or- notesNamesAboveRoot contains an invalid value. Chord(NoteName, IEnumerable<Interval>) Initializes a new instance of the Chord with the specified root note name and intervals from root one. Declaration public Chord(NoteName rootNoteName, IEnumerable<Interval> intervalsFromRoot) Parameters Type Name Description NoteName rootNoteName The root note's name. IEnumerable < Interval > intervalsFromRoot Intervals from root note. Exceptions Type Condition InvalidEnumArgumentException rootNoteName specified an invalid value. ArgumentNullException intervalsFromRoot is null. Chord(ICollection<NoteName>) Initializes a new instance of the Chord with the specified notes names (for example, C E G). Declaration public Chord(ICollection<NoteName> notesNames) Parameters Type Name Description ICollection < NoteName > notesNames The set of notes names. Exceptions Type Condition ArgumentNullException notesNames is null. InvalidEnumArgumentException notesNames contains an invalid value. ArgumentException notesNames is empty collection. Properties NotesNames Gets the chord's notes names. Declaration public ICollection<NoteName> NotesNames { get; } Property Value Type Description ICollection < NoteName > RootNoteName Gets the root note's name of the chord. Declaration public NoteName RootNoteName { get; } Property Value Type Description NoteName Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetByTriad(NoteName, ChordQuality, Interval[]) Creates an instance of the Chord as triad with possible addition of another notes by intervals from the root one. Declaration public static Chord GetByTriad(NoteName rootNoteName, ChordQuality chordQuality, params Interval[] intervalsFromRoot) Parameters Type Name Description NoteName rootNoteName The root note's name. ChordQuality chordQuality Chord's quality. Interval [] intervalsFromRoot Intervals from root note. Returns Type Description Chord Chord created by triad with addition of notes defined by intervalsFromRoot . Exceptions Type Condition InvalidEnumArgumentException rootNoteName specified an invalid value. -or- chordQuality specified an invalid value. ArgumentNullException intervalsFromRoot is null. GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() GetNames() Declaration public IReadOnlyCollection<string> GetNames() Returns Type Description IReadOnlyCollection < String > Parse(String) Converts the string representation of a musical chord to its Chord equivalent. Declaration public static Chord Parse(string input) Parameters Type Name Description String input A string containing a chord to convert. Returns Type Description Chord A Chord equivalent to the musical chord contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out Chord) Converts the string representation of a musical chord to its Chord equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out Chord chord) Parameters Type Name Description String input A string containing a chord to convert. Chord chord When this method returns, contains the Chord equivalent of the musical chord contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Operators Equality(Chord, Chord) Determines if two Chord objects are equal. Declaration public static bool operator ==(Chord chord1, Chord chord2) Parameters Type Name Description Chord chord1 The first Chord to compare. Chord chord2 The second Chord to compare. Returns Type Description Boolean true if the chords are equal, false otherwise. Inequality(Chord, Chord) Determines if two Chord objects are not equal. Declaration public static bool operator !=(Chord chord1, Chord chord2) Parameters Type Name Description Chord chord1 The first Chord to compare. Chord chord2 The second Chord to compare. Returns Type Description Boolean false if the chords are equal, true otherwise. Extension Methods ChordUtilities.GetIntervalsFromRootNote(Chord) ChordUtilities.GetIntervalsBetweenNotes(Chord) ChordUtilities.ResolveRootNote(Chord, Octave) ChordUtilities.ResolveNotes(Chord, Octave) ChordUtilities.GetInversions(Chord)"
  },
  "api/Melanchall.DryWetMidi.Interaction.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.html",
    "title": "Namespace Melanchall.DryWetMidi.Interaction | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Interaction Classes ArbitraryGrid Grid where points in time are distributed arbitrarily according to provided collection of times. BarBeatFractionTimeSpan Represents bar/beat time span which represents bars and fractional beats. BarBeatTicksTimeSpan Represents bar/beat time span which represents bars, beats and ticks. BarBeatUtilities Utilities for working with bars and beats. Chord Represents a musical chord. ChordsCollection Collection of Chord objects. ChordsCollectionChangedEventArgs Provides data for the CollectionChanged event. ChordsManager Provides a way to manage chords of a MIDI file. ChordsManagingUtilities Extension methods for chords managing. GetNotesAndRestsUtilities Provides methods for getting single collection of notes and rests by the specified collection of notes. GetTimedEventsAndNotesUtilities Provides a way to iterate through a collection of TimedEvent returning Note for Note On/Note Off event pairs and original TimedEvent for all other events. LengthConverter Provides a way to convert the length of an object from one representation to another. LengthedObjectUtilities Extension methods for objects that implement the ILengthedObject interface. MathTimeSpan Represents a result of summation or subtraction of two ITimeSpan . MetricTimeSpan Represents metric time span which represents hours, minutes and seconds. MidiFileUtilities Utility methods for MidiFile . MidiTimeSpan Represents a time span as an amount of time measured in units of the time division of a MIDI file. MusicalTimeSpan Represents a time span as a fraction of the whole note's length. Note Represents a musical note. NoteId A class representing the ID of a musical note. NoteIdUtilities Utilities related to the IDs of musical notes. NotesCollection Collection of Note objects. NotesCollectionChangedEventArgs Provides data for the CollectionChanged event. NotesManager Provides a way to manage notes of a MIDI file. NotesManagingUtilities Extension methods for notes managing. ResizeNotesUtilities Provides ways to resize collection of notes. Rest Represents a musical rest. SplittedLengthedObject<TObject> Container for left and right parts of splitted lengthed object. SteppedGrid Grid where points in time are distributed with the specified step or collection of steps. Tempo Represents tempo expressed in microseconds per quarter note or beats per minute. TempoMap Represents a tempo map of a MIDI file. TempoMapManager Provides a way to manage tempo map of a MIDI file. TempoMapManagingUtilities Extension methods for managing tempo map. TimeConverter Provides a way to convert the time of an object from one representation to another. TimedEvent Represents wrapper for the MidiEvent that provides absolute time of an event. TimedEventsCollection Collection of the TimedEvent objects that wrap MIDI events providing a way to manage their absolute time. TimedEventsManager Provides a way to manage events of a MIDI file by their absolute time. TimedEventsManagingUtilities Extension methods for managing MIDI events by their absolute time. TimedObjectsCollection<TObject> Represents a basic collection of the ITimedObject . TimedObjectUtilities Extension methods for objects that implement the ITimedObject interface. TimeSignature Represents time signature which is number of beats of specified length. TimeSpanComparer Compares two time spans determining relation between them. TimeSpanUtilities Provides useful utilities for working with ITimeSpan . TrackChunkUtilities Utility methods for TrackChunk . ValueChange<TValue> Represents a change of a parameter's value at some time. ValueLine<TValue> Represents timeline of a parameter's value. Interfaces IGrid Represents a time grid which is the set of points in time. ILengthedObject Represents an object that has length. IMusicalObject Musical objects that can be played. ITimedObject Represents an object that has start time. ITimeSpan Time span that represents time or length. Enums LengthedObjectPart Part of an ILengthedObject . MathOperation Represents a simple math operation used by the MathTimeSpan . The default is Add . RestSeparationPolicy Determines a rule for creating rests. The default value is NoSeparation . TimeSpanMode Mode of the arithmetic operation between two ITimeSpan . TimeSpanType The type of a time span. Delegates ChordsCollectionChangedEventHandler Represents the method that will handle the CollectionChanged event raised when a ChordsCollection changed. NotesCollectionChangedEventHandler Represents the method that will handle the CollectionChanged event raised when a NotesCollection changed."
  },
  "api/Melanchall.DryWetMidi.Interaction.ValueLine-1.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ValueLine-1.html",
    "title": "Class ValueLine<TValue> | DryWetMIDI",
    "keywords": "Class ValueLine<TValue> Represents timeline of a parameter's value. Inheritance Object ValueLine<TValue> Implements IEnumerable < ValueChange <TValue>> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ValueLine<TValue> : IEnumerable<ValueChange<TValue>>, IEnumerable where TValue : class Type Parameters Name Description TValue Type of values. Methods AtTime(Int64) Gets value at specified time. Declaration public TValue AtTime(long time) Parameters Type Name Description Int64 time Time to get a value at. Returns Type Description TValue Parameter's value at the time . Exceptions Type Condition ArgumentOutOfRangeException time is negative. GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<ValueChange<TValue>> GetEnumerator() Returns Type Description IEnumerator < ValueChange <TValue>> An enumerator that can be used to iterate through the collection. Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, Int64) TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.ValueChange-1.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ValueChange-1.html",
    "title": "Class ValueChange<TValue> | DryWetMIDI",
    "keywords": "Class ValueChange<TValue> Represents a change of a parameter's value at some time. Inheritance Object ValueChange<TValue> Implements ITimedObject Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ValueChange<TValue> : ITimedObject Type Parameters Name Description TValue Type of value. Properties Time Gets the MIDI time when value is changed. Declaration public long Time { get; } Property Value Type Description Int64 Value Gets the new value that will last until next value change. Declaration public TValue Value { get; } Property Value Type Description TValue Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(ValueChange<TValue>, ValueChange<TValue>) Determines if two ValueChange<TValue> objects are equal. Declaration public static bool operator ==(ValueChange<TValue> change1, ValueChange<TValue> change2) Parameters Type Name Description ValueChange <TValue> change1 The first ValueChange<TValue> to compare. ValueChange <TValue> change2 The second ValueChange<TValue> to compare. Returns Type Description Boolean true if the value changes are equal, false otherwise. Inequality(ValueChange<TValue>, ValueChange<TValue>) Determines if two ValueChange<TValue> objects are not equal. Declaration public static bool operator !=(ValueChange<TValue> change1, ValueChange<TValue> change2) Parameters Type Name Description ValueChange <TValue> change1 The first ValueChange<TValue> to compare. ValueChange <TValue> change2 The second ValueChange<TValue> to compare. Returns Type Description Boolean false if the value changes are equal, true otherwise. Implements ITimedObject Extension Methods TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.Tempo.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.Tempo.html",
    "title": "Class Tempo | DryWetMIDI",
    "keywords": "Class Tempo Represents tempo expressed in microseconds per quarter note or beats per minute. Inheritance Object Tempo Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Tempo Constructors Tempo(Int64) Initializes a new instance of the Tempo with the specified number of microseconds per quarter note. Declaration public Tempo(long microsecondsPerQuarterNote) Parameters Type Name Description Int64 microsecondsPerQuarterNote Number of microseconds per quarter note. Exceptions Type Condition ArgumentOutOfRangeException microsecondsPerQuarterNote is zero or negative. Fields Default Default tempo which is 500,000 microseconds per quarter note or 120 beats per minute. Declaration public static readonly Tempo Default Field Value Type Description Tempo Properties BeatsPerMinute Gets number of beats per minute. Declaration public long BeatsPerMinute { get; } Property Value Type Description Int64 MicrosecondsPerQuarterNote Gets number of microseconds per quarter note. Declaration public long MicrosecondsPerQuarterNote { get; } Property Value Type Description Int64 Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) FromBeatsPerMinute(Int32) Creates an instance of the Tempo with the specified number of beats per minute. Declaration public static Tempo FromBeatsPerMinute(int beatsPerMinute) Parameters Type Name Description Int32 beatsPerMinute Number of beats per minute. Returns Type Description Tempo An instance of the Tempo which represents tempo as specified number of beats per minute. Exceptions Type Condition ArgumentOutOfRangeException beatsPerMinute is zero or negative. FromMillisecondsPerQuarterNote(Int64) Creates an instance of the Tempo with the specified number of milliseconds per quarter note. Declaration public static Tempo FromMillisecondsPerQuarterNote(long millisecondsPerQuarterNote) Parameters Type Name Description Int64 millisecondsPerQuarterNote Number of milliseconds per quarter note. Returns Type Description Tempo An instance of the Tempo which represents tempo as specified number of milliseconds per quarter note. Exceptions Type Condition ArgumentOutOfRangeException millisecondsPerQuarterNote is zero or negative. GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(Tempo, Tempo) Determines if two Tempo objects are equal. Declaration public static bool operator ==(Tempo tempo1, Tempo tempo2) Parameters Type Name Description Tempo tempo1 The first Tempo to compare. Tempo tempo2 The second Tempo to compare. Returns Type Description Boolean true if the tempos are equal, false otherwise. Inequality(Tempo, Tempo) Determines if two Tempo objects are not equal. Declaration public static bool operator !=(Tempo tempo1, Tempo tempo2) Parameters Type Name Description Tempo tempo1 The first Tempo to compare. Tempo tempo2 The second Tempo to compare. Returns Type Description Boolean false if the tempos are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.Interaction.SteppedGrid.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.SteppedGrid.html",
    "title": "Class SteppedGrid | DryWetMIDI",
    "keywords": "Class SteppedGrid Grid where points in time are distributed with the specified step or collection of steps. Inheritance Object SteppedGrid Implements IGrid Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SteppedGrid : IGrid Constructors SteppedGrid(ITimeSpan) Initializes a new instance of the SteppedGrid with the specified step so all grid's times will be distributed with equal distance between adjacent ones starting from zero. Declaration public SteppedGrid(ITimeSpan step) Parameters Type Name Description ITimeSpan step Distance between adjacent times. Exceptions Type Condition ArgumentNullException step is null. SteppedGrid(ITimeSpan, ITimeSpan) Initializes a new instance of the SteppedGrid with the specified start time and step so all grid's times will be distributed with equal distance between adjacent ones starting from the specified start time. Declaration public SteppedGrid(ITimeSpan start, ITimeSpan step) Parameters Type Name Description ITimeSpan start Start time of the grid. ITimeSpan step Distance between adjacent times. Exceptions Type Condition ArgumentNullException start is null. -or- step is null. SteppedGrid(ITimeSpan, IEnumerable<ITimeSpan>) Initializes a new instance of the SteppedGrid with the specified start time and steps so all grid's times will be stepped according to those steps. Declaration public SteppedGrid(ITimeSpan start, IEnumerable<ITimeSpan> steps) Parameters Type Name Description ITimeSpan start Start time of the grid. IEnumerable < ITimeSpan > steps Collection of grid's steps. Remarks Grid's times will be distributed according to provided steps. So distance between first adjacent times will be equal to first step, distance between second adjacent times will be equal to second step and so on. When last step reached steps will go from the first one. Exceptions Type Condition ArgumentNullException start is null. -or- steps is null. ArgumentException steps contains null. SteppedGrid(IEnumerable<ITimeSpan>) Initializes a new instance of the SteppedGrid with the specified steps so all grid's times will be stepped according to those steps. Declaration public SteppedGrid(IEnumerable<ITimeSpan> steps) Parameters Type Name Description IEnumerable < ITimeSpan > steps Collection of grid's steps. Remarks Grid's times will be distributed according to provided steps. So distance between first adjacent times will be equal to first step, distance between second adjacent times will be equal to second step and so on. When last step reached, steps will go from the first one. Exceptions Type Condition ArgumentNullException steps is null. ArgumentException steps contains null. Properties Start Start time of the current grid. Declaration public ITimeSpan Start { get; } Property Value Type Description ITimeSpan Steps Steps of the current grid. Declaration public IEnumerable<ITimeSpan> Steps { get; } Property Value Type Description IEnumerable < ITimeSpan > Methods GetTimes(TempoMap) Gets points in time of the current grid. Declaration public IEnumerable<long> GetTimes(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map used to get grid's times. Returns Type Description IEnumerable < Int64 > Collection of points in time of the current grid. Exceptions Type Condition ArgumentNullException tempoMap is null. Implements IGrid"
  },
  "api/Melanchall.DryWetMidi.Interaction.SplittedLengthedObject-1.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.SplittedLengthedObject-1.html",
    "title": "Class SplittedLengthedObject<TObject> | DryWetMIDI",
    "keywords": "Class SplittedLengthedObject<TObject> Container for left and right parts of splitted lengthed object. Inheritance Object SplittedLengthedObject<TObject> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SplittedLengthedObject<TObject> where TObject : ILengthedObject Type Parameters Name Description TObject The type of splitted object. Properties LeftPart The left part of a splitted object. Declaration public TObject LeftPart { get; } Property Value Type Description TObject RightPart The right part of a splitted object. Declaration public TObject RightPart { get; } Property Value Type Description TObject"
  },
  "api/Melanchall.DryWetMidi.Interaction.RestSeparationPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.RestSeparationPolicy.html",
    "title": "Enum RestSeparationPolicy | DryWetMIDI",
    "keywords": "Enum RestSeparationPolicy Determines a rule for creating rests. The default value is NoSeparation . Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum RestSeparationPolicy Fields Name Description NoSeparation Rests should be constructed only when there are no notes at all on any channel. SeparateByChannel Rests should be constructed individually for each channel ignoring note number. SeparateByChannelAndNoteNumber Rests should be constructed individually for each channel and note number. SeparateByNoteNumber Rests should be constructed individually for each note number ignoring channel."
  },
  "api/Melanchall.DryWetMidi.Interaction.Rest.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.Rest.html",
    "title": "Class Rest | DryWetMIDI",
    "keywords": "Class Rest Represents a musical rest. Inheritance Object Rest Implements ILengthedObject ITimedObject Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Rest : ILengthedObject, ITimedObject Properties Channel Gets a channel the rest was constructed for. Declaration public FourBitNumber? Channel { get; } Property Value Type Description Nullable < FourBitNumber > Length Gets length of an object. Declaration public long Length { get; } Property Value Type Description Int64 NoteNumber Gets a note number the rest was constructed for. Declaration public SevenBitNumber? NoteNumber { get; } Property Value Type Description Nullable < SevenBitNumber > Time Gets start time of an object. Declaration public long Time { get; } Property Value Type Description Int64 Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(Rest, Rest) Determines if two Rest objects are equal. Declaration public static bool operator ==(Rest rest1, Rest rest2) Parameters Type Name Description Rest rest1 The first Rest to compare. Rest rest2 The second Rest to compare. Returns Type Description Boolean true if the rests are equal, false otherwise. Inequality(Rest, Rest) Determines if two Rest objects are not equal. Declaration public static bool operator !=(Rest rest1, Rest rest2) Parameters Type Name Description Rest rest1 The first Rest to compare. Rest rest2 The second Rest to compare. Returns Type Description Boolean false if the rests are equal, true otherwise. Implements ILengthedObject ITimedObject Extension Methods LengthedObjectUtilities.LengthAs<TLength>(ILengthedObject, TempoMap) LengthedObjectUtilities.LengthAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.EndTimeAs<TTime>(ILengthedObject, TempoMap) LengthedObjectUtilities.EndTimeAs(ILengthedObject, TimeSpanType, TempoMap) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.ResizeNotesUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ResizeNotesUtilities.html",
    "title": "Class ResizeNotesUtilities | DryWetMIDI",
    "keywords": "Class ResizeNotesUtilities Provides ways to resize collection of notes. Inheritance Object ResizeNotesUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class ResizeNotesUtilities Methods ResizeNotes(IEnumerable<Note>, ITimeSpan, TimeSpanType, TempoMap) Resizes group of notes to the specified length treating all notes as single object. Declaration public static void ResizeNotes(this IEnumerable<Note> notes, ITimeSpan length, TimeSpanType distanceCalculationType, TempoMap tempoMap) Parameters Type Name Description IEnumerable < Note > notes Notes to resize. ITimeSpan length New length of the notes collection. TimeSpanType distanceCalculationType Type of distance calculations. TempoMap tempoMap Exceptions Type Condition ArgumentNullException notes is null. -or- length is null. -or- tempoMap is null. ArgumentException BarBeatTicks or BarBeatFraction is used for distanceCalculationType which is unsupported. InvalidEnumArgumentException distanceCalculationType specified an invalid value. ResizeNotes(IEnumerable<Note>, Double, TimeSpanType, TempoMap) Resizes group of notes by the specified ratio treating all notes as single object. For example, resizing by ratio of 0.5 shrinks group of notes by two times. Declaration public static void ResizeNotes(this IEnumerable<Note> notes, double ratio, TimeSpanType distanceCalculationType, TempoMap tempoMap) Parameters Type Name Description IEnumerable < Note > notes Notes to resize. Double ratio Ratio to resize notes by. TimeSpanType distanceCalculationType Type of distance calculations. TempoMap tempoMap Exceptions Type Condition ArgumentNullException notes is null. -or- tempoMap is null. ArgumentException BarBeatTicks or BarBeatFraction is used for distanceCalculationType which is unsupported. ArgumentOutOfRangeException ratio is negative. InvalidEnumArgumentException distanceCalculationType specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Devices.MidiEventReceivedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.MidiEventReceivedEventArgs.html",
    "title": "Class MidiEventReceivedEventArgs | DryWetMIDI",
    "keywords": "Class MidiEventReceivedEventArgs Provides data for the EventReceived event. Inheritance Object EventArgs MidiEventReceivedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiEventReceivedEventArgs : EventArgs Properties Event Gets MIDI event received by InputDevice . Declaration public MidiEvent Event { get; } Property Value Type Description MidiEvent"
  },
  "api/Melanchall.DryWetMidi.Devices.MidiEventPlayedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.MidiEventPlayedEventArgs.html",
    "title": "Class MidiEventPlayedEventArgs | DryWetMIDI",
    "keywords": "Class MidiEventPlayedEventArgs Holds an instance of MidiEvent for EventPlayed event. Inheritance Object EventArgs MidiEventPlayedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiEventPlayedEventArgs : EventArgs Properties Event Gets a MIDI event played. Declaration public MidiEvent Event { get; } Property Value Type Description MidiEvent"
  },
  "api/Melanchall.DryWetMidi.Devices.Manufacturer.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.Manufacturer.html",
    "title": "Enum Manufacturer | DryWetMIDI",
    "keywords": "Enum Manufacturer Manufacturer of MIDI device driver. Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public enum Manufacturer : ushort Fields Name Description Antex Antex Electronics Corporation. Apps APPS Software. Apt Audio Processing Technology. Artisoft Artisoft, Inc. Ast AST Research, Inc. Ati ATI Technologies, Inc. Audiofile Audio, Inc. Audiopt Audio Processing Technology. Auravision Auravision Corporation. Aztech Aztech Labs, Inc. Canopus Canopus, Co., Ltd. Cat Computer Aided Technology, Inc. Compusic Compusic. ComputerFriends Computer Friends, Inc. Controlres Control Resources Corporation. Creative Creative Labs, Inc. Dialogic Dialogic Corporation. Dolby Dolby Laboratories, Inc. DspGroup DSP Group, Inc. DspSolutions DSP Solutions, Inc. Echo Echo Speech Corporation. Epson Seiko Epson Corporation, Inc. Ess ESS Technology, Inc. Everex Everex Systems, Inc. Exan EXAN, Ltd. Fujitsu Fujitsu, Ltd. Gravis Advanced Gravis Computer Technology, Ltd. Ibm International Business Machines. IclPs ICL Personal Systems. Ics Integrated Circuit Systems, Inc. Intel Intel Corporation. Interactive InterActive, Inc. Iomagic I/O Magic Corporation. Iteratedsys Iterated Systems, Inc. Korg Toshihiko Okuhura, Korg, Inc. Logitech Logitech, Inc. Lyrrus Lyrrus, Inc. Matsushita Matsushita Electric Corporation of America. Mediavision Media Vision, Inc. Melabs microEngineering Labs. Metheus Metheus Corporation. Microsoft Microsoft Corporation. Moscom MOSCOM Corporation. Motorola Motorola, Inc. Ncr NCR Corporation. Nec NEC Corporation. Newmedia New Media Corporation. Nms Natural MicroSystems Corporation. Oki OKI. Olivetti Ing. C. Olivetti & C., S.p.A. Opti OPTi, Inc. Roland Roland Corporation. Scalacs SCALACS. Sierra Sierra Semiconductor Corporation. Siliconsoft Silicon Software, Inc. Sonicfoundry Sonic Foundry. Speechcomp Speech Compression. Supermac Supermac Technology, Inc. Tandy Tandy Corporation. Truevision Truevision, Inc. TurtleBeach Turtle Beach Systems. Unknown Unknown manufacturer. Val Video Associates Labs, Inc. Videologic VideoLogic, Inc. Vitec Visual Information Technologies, Inc. Vocaltec VocalTec, Inc. Voyetra Voyetra Technologies. Wanglabs Wang Laboratories. Willowpond Willow Pond Corporation. Winnov Winnov, LP. Xebec Xebec Multimedia Solutions Limited. Yamaha Yamaha Corporation of America."
  },
  "api/Melanchall.DryWetMidi.Devices.ITickGenerator.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.ITickGenerator.html",
    "title": "Interface ITickGenerator | DryWetMIDI",
    "keywords": "Interface ITickGenerator Tick generator which provides ticking with the specified interval. Inherited Members IDisposable.Dispose() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public interface ITickGenerator : IDisposable Methods TryStart() Starts the tick generator if it's not started; otherwise does nothing. Declaration void TryStart() Events TickGenerated Occurs when new tick generated. Declaration event EventHandler TickGenerated Event Type Type Description EventHandler"
  },
  "api/Melanchall.DryWetMidi.Devices.IOutputDevice.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.IOutputDevice.html",
    "title": "Interface IOutputDevice | DryWetMIDI",
    "keywords": "Interface IOutputDevice Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public interface IOutputDevice Methods PrepareForEventsSending() Declaration void PrepareForEventsSending() SendEvent(MidiEvent) Declaration void SendEvent(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent Events EventSent Occurs when a MIDI event is sent. Declaration event EventHandler<MidiEventSentEventArgs> EventSent Event Type Type Description EventHandler < MidiEventSentEventArgs >"
  },
  "api/Melanchall.DryWetMidi.Devices.InvalidSysExEventReceivedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.InvalidSysExEventReceivedEventArgs.html",
    "title": "Class InvalidSysExEventReceivedEventArgs | DryWetMIDI",
    "keywords": "Class InvalidSysExEventReceivedEventArgs Provides data for the InvalidSysExEventReceived event. Inheritance Object EventArgs InvalidSysExEventReceivedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class InvalidSysExEventReceivedEventArgs : EventArgs Properties Data Gets the data of invalid system exclusive event received by InputDevice . Declaration public byte[] Data { get; } Property Value Type Description Byte []"
  },
  "api/Melanchall.DryWetMidi.Devices.InvalidShortEventReceivedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.InvalidShortEventReceivedEventArgs.html",
    "title": "Class InvalidShortEventReceivedEventArgs | DryWetMIDI",
    "keywords": "Class InvalidShortEventReceivedEventArgs Provides data for the InvalidShortEventReceived event. Inheritance Object EventArgs InvalidShortEventReceivedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class InvalidShortEventReceivedEventArgs : EventArgs Properties FirstDataByte Gets the first data byte of an invalid MIDI event. Declaration public byte FirstDataByte { get; } Property Value Type Description Byte SecondDataByte Gets the second data byte of an invalid MIDI event. Declaration public byte SecondDataByte { get; } Property Value Type Description Byte StatusByte Gets the status byte of an invalid MIDI event. Declaration public byte StatusByte { get; } Property Value Type Description Byte"
  },
  "api/Melanchall.DryWetMidi.Devices.InputDevice.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.InputDevice.html",
    "title": "Class InputDevice | DryWetMIDI",
    "keywords": "Class InputDevice Represents an input MIDI device. Inheritance Object MidiDevice InputDevice Implements IDisposable IInputDevice Inherited Members MidiDevice.ErrorOccurred MidiDevice._handle MidiDevice._disposed MidiDevice.Id MidiDevice.Name MidiDevice.DriverManufacturer MidiDevice.ProductIdentifier MidiDevice.DriverVersion MidiDevice.SetBasicDeviceInformation(UInt16, UInt16, UInt32, String) MidiDevice.EnsureDeviceIsNotDisposed() MidiDevice.ProcessMmResult(UInt32) MidiDevice.OnError(Exception) MidiDevice.ToString() MidiDevice.Dispose() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class InputDevice : MidiDevice, IDisposable, IInputDevice Properties IsListeningForEvents Gets a value that indicates whether InputDevice is currently listening for incoming MIDI events. Declaration public bool IsListeningForEvents { get; } Property Value Type Description Boolean RaiseMidiTimeCodeReceived Gets or sets a value indicating if MidiTimeCodeReceived event should be raised or not. Declaration public bool RaiseMidiTimeCodeReceived { get; set; } Property Value Type Description Boolean Methods Dispose(Boolean) Releases the unmanaged resources used by the MIDI device class and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides MidiDevice.Dispose(Boolean) Finalize() Finalizes the current instance of the InputDevice . Declaration protected void Finalize() GetAll() Retrieves all input MIDI devices presented in the system. Declaration public static IEnumerable<InputDevice> GetAll() Returns Type Description IEnumerable < InputDevice > All input MIDI devices presented in the system. GetById(Int32) Retrieves input MIDI device with the specified ID. Declaration public static InputDevice GetById(int id) Parameters Type Name Description Int32 id Device ID which is number from 0 to GetDevicesCount() minus 1. Returns Type Description InputDevice Input MIDI device with the specified ID. Exceptions Type Condition ArgumentOutOfRangeException id is out of valid range. GetByName(String) Retrieves a first input MIDI device with the specified name. Declaration public static InputDevice GetByName(string name) Parameters Type Name Description String name The name of an input MIDI device to retrieve. Returns Type Description InputDevice Input MIDI device with the specified name. Exceptions Type Condition ArgumentException name is null or contains white-spaces only. -or- name specifies an input MIDI device which is not presented in the system. GetDevicesCount() Retrieves the number of input MIDI devices presented in the system. Declaration public static int GetDevicesCount() Returns Type Description Int32 Number of input MIDI devices presented in the system. GetErrorText(UInt32, StringBuilder, UInt32) Gets error description for the specified MMRESULT which is return value of winmm function. Declaration protected override uint GetErrorText(uint mmrError, StringBuilder pszText, uint cchText) Parameters Type Name Description UInt32 mmrError MMRESULT which is return value of winmm function. StringBuilder pszText StringBuilder to write error description to. UInt32 cchText Size of pszText buffer. Returns Type Description UInt32 Return value of winmm function which gets error description. Overrides MidiDevice.GetErrorText(UInt32, StringBuilder, UInt32) Reset() Stops listening for incoming MIDI events on the current InputDevice and flushes all pending data. Declaration public void Reset() Exceptions Type Condition ObjectDisposedException The current InputDevice is disposed. MidiDeviceException An error occurred on device. StartEventsListening() Starts listening for incoming MIDI events on the current InputDevice . Declaration public void StartEventsListening() Exceptions Type Condition ObjectDisposedException The current InputDevice is disposed. MidiDeviceException An error occurred on device. StopEventsListening() Stops listening for incoming MIDI events on the current InputDevice . Declaration public void StopEventsListening() Exceptions Type Condition ObjectDisposedException The current InputDevice is disposed. MidiDeviceException An error occurred on device. Events EventReceived Occurs when a MIDI event is received. Declaration public event EventHandler<MidiEventReceivedEventArgs> EventReceived Event Type Type Description EventHandler < MidiEventReceivedEventArgs > InvalidShortEventReceived Occurs when invalid channel, system common or system real-time event received. Declaration public event EventHandler<InvalidShortEventReceivedEventArgs> InvalidShortEventReceived Event Type Type Description EventHandler < InvalidShortEventReceivedEventArgs > InvalidSysExEventReceived Occurs when invalid system exclusive event is received. Declaration public event EventHandler<InvalidSysExEventReceivedEventArgs> InvalidSysExEventReceived Event Type Type Description EventHandler < InvalidSysExEventReceivedEventArgs > MidiTimeCodeReceived Occurs when MIDI time code received, i.e. all MIDI events to complete MIDI time code are received. Declaration public event EventHandler<MidiTimeCodeReceivedEventArgs> MidiTimeCodeReceived Event Type Type Description EventHandler < MidiTimeCodeReceivedEventArgs > Remarks This event will be raised only if RaiseMidiTimeCodeReceived is set to true. Implements System.IDisposable IInputDevice Extension Methods DevicesConnectorUtilities.Connect(InputDevice, IOutputDevice[])"
  },
  "api/Melanchall.DryWetMidi.Devices.IInputDevice.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.IInputDevice.html",
    "title": "Interface IInputDevice | DryWetMIDI",
    "keywords": "Interface IInputDevice Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public interface IInputDevice Properties IsListeningForEvents Declaration bool IsListeningForEvents { get; } Property Value Type Description Boolean Methods StartEventsListening() Declaration void StartEventsListening() StopEventsListening() Declaration void StopEventsListening() Events EventReceived Occurs when a MIDI event is received. Declaration event EventHandler<MidiEventReceivedEventArgs> EventReceived Event Type Type Description EventHandler < MidiEventReceivedEventArgs >"
  },
  "api/Melanchall.DryWetMidi.Devices.IClockDrivenObject.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.IClockDrivenObject.html",
    "title": "Interface IClockDrivenObject | DryWetMIDI",
    "keywords": "Interface IClockDrivenObject Represents an object driven by clock (timer). Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public interface IClockDrivenObject Methods TickClock() Advances current object's clock time. Declaration void TickClock()"
  },
  "api/Melanchall.DryWetMidi.Devices.HighPrecisionTickGenerator.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.HighPrecisionTickGenerator.html",
    "title": "Class HighPrecisionTickGenerator | DryWetMIDI",
    "keywords": "Class HighPrecisionTickGenerator Tick generator providing most accurate ticking, allowing firing intervals of 1 ms which is the smallest possible one. Inheritance Object HighPrecisionTickGenerator Implements ITickGenerator IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class HighPrecisionTickGenerator : ITickGenerator, IDisposable Constructors HighPrecisionTickGenerator(TimeSpan) Initializes a new instance of the HighPrecisionTickGenerator with the specified interval. Declaration public HighPrecisionTickGenerator(TimeSpan interval) Parameters Type Name Description TimeSpan interval Interval of ticking. Exceptions Type Condition ArgumentOutOfRangeException interval is out of valid range. Fields MaxInterval The largest possible interval. Declaration public static readonly TimeSpan MaxInterval Field Value Type Description TimeSpan MinInterval The smallest possible interval. Declaration public static readonly TimeSpan MinInterval Field Value Type Description TimeSpan Methods Dispose() Releases all resources used by the current HighPrecisionTickGenerator . Declaration public void Dispose() Finalize() Finalizes the current instance of the HighPrecisionTickGenerator . Declaration protected void Finalize() TryStart() Starts the tick generator if it's not started; otherwise does nothing. Declaration public void TryStart() Exceptions Type Condition MidiDeviceException An error occurred on tick generator. Events TickGenerated Occurs when new tick generated. Declaration public event EventHandler TickGenerated Event Type Type Description EventHandler Implements ITickGenerator System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Devices.EventCallback.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.EventCallback.html",
    "title": "Delegate EventCallback | DryWetMIDI",
    "keywords": "Delegate EventCallback Callback used to process MIDI event to be played by Playback . Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public delegate MidiEvent EventCallback(MidiEvent rawEvent, long rawTime, TimeSpan playbackTime); Parameters Type Name Description MidiEvent rawEvent MIDI event to process. Int64 rawTime Absolute time of rawEvent . TimeSpan playbackTime Current time of the playback. Returns Type Description MidiEvent New MIDI event which is rawEvent processed by the callback; or null if event should be ignored."
  },
  "api/Melanchall.DryWetMidi.Devices.ErrorOccurredEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.ErrorOccurredEventArgs.html",
    "title": "Class ErrorOccurredEventArgs | DryWetMIDI",
    "keywords": "Class ErrorOccurredEventArgs Provides data for the ErrorOccurred event. Inheritance Object EventArgs ErrorOccurredEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ErrorOccurredEventArgs : EventArgs Properties Exception Gets the exception caused an error. Declaration public Exception Exception { get; } Property Value Type Description Exception"
  },
  "api/Melanchall.DryWetMidi.Devices.DevicesConnectorUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.DevicesConnectorUtilities.html",
    "title": "Class DevicesConnectorUtilities | DryWetMIDI",
    "keywords": "Class DevicesConnectorUtilities Provides methods to connect MIDI devices. Inheritance Object DevicesConnectorUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public static class DevicesConnectorUtilities Methods Connect(InputDevice, IOutputDevice[]) Connects an input device to the specified output device. Declaration public static DevicesConnector Connect(this InputDevice inputDevice, params IOutputDevice[] outputDevices) Parameters Type Name Description InputDevice inputDevice Input MIDI device to connect to outputDevices . IOutputDevice [] outputDevices Output MIDI devices to connect inputDevice to. Returns Type Description DevicesConnector Exceptions Type Condition ArgumentNullException inputDevice is null. -or- outputDevices is null. ArgumentException outputDevices contains null."
  },
  "api/Melanchall.DryWetMidi.Devices.DevicesConnector.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.DevicesConnector.html",
    "title": "Class DevicesConnector | DryWetMIDI",
    "keywords": "Class DevicesConnector Provides a way to connect an input MIDI device to an output MIDI device. Inheritance Object DevicesConnector Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class DevicesConnector : IDisposable Constructors DevicesConnector(InputDevice, IOutputDevice[]) Initializes a new instance of the DevicesConnector with the specified input and output MIDI devices. Declaration public DevicesConnector(InputDevice inputDevice, params IOutputDevice[] outputDevices) Parameters Type Name Description InputDevice inputDevice Input MIDI device to connect to outputDevices . IOutputDevice [] outputDevices Output MIDI devices to connect inputDevice to. Remarks inputDevice will not be actually connected to outputDevices after an instance of DevicesConnector is created. You must call Connect() method to establish connection between devices. Exceptions Type Condition ArgumentNullException inputDevice is null. -or- outputDevices is null. ArgumentException outputDevices contains null. Properties InputDevice Gets an input MIDI device to connect to OutputDevices . Declaration public InputDevice InputDevice { get; } Property Value Type Description InputDevice OutputDevices Gets output MIDI devices to connect InputDevice to. Declaration public IReadOnlyCollection<IOutputDevice> OutputDevices { get; } Property Value Type Description IReadOnlyCollection < IOutputDevice > Methods Connect() Connects InputDevice to OutputDevices . Declaration public void Connect() Disconnect() Disconnects InputDevice from OutputDevices . Declaration public void Disconnect() Dispose() Releases all resources used by the current instance of DevicesConnector . Declaration public void Dispose() Finalize() Finalizes the current instance of the DevicesConnector . Declaration protected void Finalize() Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Devices.CreateTickGeneratorCallback.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.CreateTickGeneratorCallback.html",
    "title": "Delegate CreateTickGeneratorCallback | DryWetMIDI",
    "keywords": "Delegate CreateTickGeneratorCallback Callback used to create tick generator for MidiClock . Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public delegate ITickGenerator CreateTickGeneratorCallback(TimeSpan interval); Parameters Type Name Description TimeSpan interval Interval between two consecutive ticks. Returns Type Description ITickGenerator Tick generator created by the callback."
  },
  "api/Melanchall.DryWetMidi.Core.html": {
    "href": "api/Melanchall.DryWetMidi.Core.html",
    "title": "Namespace Melanchall.DryWetMidi.Core | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Core Classes ActiveSensingEvent Represents Active Sensing event. BaseTextEvent Represents a text meta event. BytesToMidiEventConverter ChannelAftertouchEvent Represents a Channel Pressure (Aftertouch) message. ChannelEvent Represents a MIDI file channel event. ChannelPrefixEvent Represents a MIDI Channel Prefix meta event. ChunksCollection Collection of MidiChunk objects. ChunkType Represents a chunk's identity described by its type and corresponding ID. ChunkTypesCollection Collection of ChunkType objects which provide identity information of a chunk. ContinueEvent Represents Continue event. ControlChangeEvent Represents a Control Change message. ControlUtilities Set of extension methods for ControlChangeEvent event. CopyrightNoticeEvent Represents a Copyright Notice meta event. CuePointEvent Represents a Cue Point meta event. DeviceNameEvent Represents a Device Name meta event. EscapeSysExEvent Reprsents an \"escape\" system exclusive event which defines an escape sequence. EventsCollection Collection of MidiEvent objects. EventType Represents an event's identity described by its type and corresponding status byte. EventTypesCollection Collection of EventType objects which provide identity information of an event. InstrumentNameEvent Represents an Instrument Name meta event. InvalidChannelEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a channel event. InvalidChunkSizeException The exception that is thrown when the actual size of a MIDI file chunk differs from the one declared in its header. InvalidMetaEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a meta event. InvalidMidiTimeCodeComponentException The exception that is thrown when the reading engine has encountered an invalid MIDI time code component (i.e. a value that doesn't belong to values of MidiTimeCodeComponent ) during reading MidiTimeCodeEvent . InvalidSystemCommonEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a system common event. KeySignatureEvent Represents a Key Signature meta event. LyricEvent Represents a Lyric meta event. MarkerEvent Represents a Marker meta event. MetaEvent Represents a MIDI file meta event. MidiChunk Represents a chunk of Standard MIDI file. MidiEvent Represents a MIDI file event stored in a track chunk. MidiEventToBytesConverter MidiException Base MIDI exception class. MidiFile Class that represents a MIDI file. MidiFileUtilities Provides useful methods to manipulate an instance of the MidiFile . MidiReader Reader of the MIDI data types. MidiTimeCodeEvent Represents MIDI Time Code (MIDI Quarter Frame) event. MidiWriter Writer of the MIDI data types. MissedEndOfTrackEventException The exception that is thrown when a MIDI file chunk doesn't end with an End of Track event. NoHeaderChunkException The exception that is thrown when a MIDI file doesn't contain a header chunk. NormalSysExEvent Represents a normal system exclusive event. NoteAftertouchEvent Represents a Polyphonic Key Pressure (Aftertouch) message. NoteEvent Base class that represents a Note On or a Note Off message. NoteEventUtilities Set of extension methods for NoteOnEvent and NoteOffEvent events. NotEnoughBytesException The exception that is thrown when a MIDI file doesn't contain enough bytes to read a value. NoteOffEvent Represents a Note Off message. NoteOnEvent Represents a Note On message. PitchBendEvent Represents a Pitch Bend Change message. PortPrefixEvent Represents a MIDI Port meta event. ProgramChangeEvent Represents a Program Change message. ProgramNameEvent Represents a Program Name meta event. ReadingSettings Settings of the reading engine. ResetEvent Represents Reset event. SequenceNumberEvent Represents a Sequence Number meta event. SequencerSpecificEvent Represents a Sequencer Specific meta event. SequenceTrackNameEvent Represents a Sequence/Track Name meta event. SetTempoEvent Represents a Set Tempo meta event. SmfConstants Constants related to Standard MIDI Files. SmpteOffsetEvent Represents a SMPTE Offset meta event. SmpteTimeDivision Time division that represents subdivisions of a second, in a way consistent with SMPTE and MIDI time code. SongPositionPointerEvent Represents Song Position Pointer event. SongSelectEvent Represents Song Select event. StartEvent Represents Start event. StopEvent Represents Stop event. SysExEvent Represents a MIDI file system exclusive event. SystemCommonEvent Represents a system common event. SystemRealTimeEvent Represents a system real-time event. TextEvent Represents a Text meta event. TicksPerQuarterNoteTimeDivision Time division that represents number of delta-time \"ticks\" which make up a quarter-note. TimeDivision MIDI file time division. TimeSignatureEvent Represents a Time Signature meta event. TimingClockEvent Represents Timing Clock event. TooManyTrackChunksException The exception that is thrown while writing a MIDI file when the ChunksCollection contains more than 4294967295 track chunks which is the maximum allowed count for chunks of this type. TrackChunk Represents a track chunk of a standard MIDI file. TrackChunkUtilities Provides extension methods for TrackChunk . TuneRequestEvent Represents Tune Request event. UnexpectedRunningStatusException The exception that is thrown when the reading engine encountered unexpected running status. UnexpectedTrackChunksCountException The exception that is thrown when count of track chunks in a MIDI file differs from the one declared in the header chunk of this file. UnknownChannelEventException The exception that is thrown when the reading engine encountered unknown channel event. UnknownChunk Represents an unknown chunk. UnknownChunkException The exception that is thrown when the reading engine encountered a chunk with unknown ID. UnknownFileFormatException The exception that is thrown when a MIDI file format is unknown. UnknownMetaEvent Represents an unknown meta event. WritingSettings Settings of the writing engine. Enums CompressionPolicy Specifies how writing engine should compress MIDI data. The default is NoCompression . ExtraTrackChunkPolicy Specifies how reading engine should react on new track chunk if already read chunks count greater or equals the one declared at the file header. The default is Read . InvalidChannelEventParameterValuePolicy Specifies how reading engine should react on invalid value of a channel event's parameter value. Valid values are 0-127 so, for example, 128 is the invalid one and will be processed according with this policy. The default is Abort . InvalidChunkSizePolicy Specifies how reading engine should react on difference between actual chunk's size and the one declared in its header. The default is Abort . InvalidEventSizePolicy Specifies how reading engine should react on invalid expected size of an event. The default is Ignore . InvalidMetaEventParameterValuePolicy Specifies how reading engine should react on invalid value of a meta event's parameter value. For example, 255 is the invalid value for the Scale and will be processed according with this policy. The default is Abort . InvalidSystemCommonEventParameterValuePolicy Specifies how reading engine should react on invalid value of a system common event's parameter value. For example, 255 is the invalid value for the Number and will be processed according with this policy. The default is Abort . MidiEventType The type of a MIDI event. MidiFileFormat Format of a Standard MIDI file which specifies overall structure of the file. MidiTimeCodeComponent MIDI time code component. MidiTimeCodeType MIDI time code type (frames per second). MissedEndOfTrackPolicy Specifies how reading engine should react on missed End Of Track event. The default is Ignore . NoHeaderChunkPolicy Specifies how reading engine should react on missing of the header chunk in the MIDI file. The default is Abort . NotEnoughBytesPolicy Specifies how reading engine should react on lack of bytes in the underlying stream that are needed to read some value (for example, DWORD requires 4 bytes available). The default is Abort . SilentNoteOnPolicy Specifies how reading engine should react on Note On events with velocity 0. The default is NoteOff . UnexpectedTrackChunksCountPolicy Specifies how reading engine should react on unexpected track chunks count. The default is Ignore . UnknownChunkIdPolicy Specifies how reading engine should react on chunk with unknown ID. The default is ReadAsUnknownChunk . UnknownFileFormatPolicy Specifies how reading engine should react on file format which doesn't belong to the MidiFileFormat . Delegates DecodeTextCallback Callback used to decode a string from the specified bytes during reading a text-based meta event."
  },
  "api/Melanchall.DryWetMidi.Core.WritingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Core.WritingSettings.html",
    "title": "Class WritingSettings | DryWetMIDI",
    "keywords": "Class WritingSettings Settings of the writing engine. Inheritance Object WritingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public class WritingSettings Properties CompressionPolicy Gets or sets compression rules for the writing engine. The default is NoCompression . Declaration public CompressionPolicy CompressionPolicy { get; set; } Property Value Type Description CompressionPolicy CustomMetaEventTypes Gets or sets collection of custom meta events types. These types must be derived from the MetaEvent class and have parameterless constructor. No exception will be thrown while writing a MIDI file if some types don't meet these requirements. Declaration public EventTypesCollection CustomMetaEventTypes { get; set; } Property Value Type Description EventTypesCollection TextEncoding Gets or sets an Encoding that will be used to write the text of a text-based meta event. The default is ASCII . Declaration public Encoding TextEncoding { get; set; } Property Value Type Description Encoding"
  },
  "api/Melanchall.DryWetMidi.Core.UnknownMetaEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownMetaEvent.html",
    "title": "Class UnknownMetaEvent | DryWetMIDI",
    "keywords": "Class UnknownMetaEvent Represents an unknown meta event. Inheritance Object MidiEvent MetaEvent UnknownMetaEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class UnknownMetaEvent : MetaEvent Remarks Structure of meta eventa allows custom ones be implemented and stored within a MIDI file. Any meta event DryWetMIDI doesn't know about will be read as an instance of the UnknownMetaEvent . Properties Data Gets the content of the meta event as array of bytes. Declaration public byte[] Data { get; } Property Value Type Description Byte [] StatusByte Gets the status byte of the meta event. Declaration public byte StatusByte { get; } Property Value Type Description Byte Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) Exceptions Type Condition ArgumentOutOfRangeException Unknown meta event cannot be read since the size is negative number. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.UnknownFileFormatPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownFileFormatPolicy.html",
    "title": "Enum UnknownFileFormatPolicy | DryWetMIDI",
    "keywords": "Enum UnknownFileFormatPolicy Specifies how reading engine should react on file format which doesn't belong to the MidiFileFormat . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum UnknownFileFormatPolicy Fields Name Description Abort Abort reading and throw an UnknownFileFormatException . Ignore Ignore unknown file format and try to read chunks."
  },
  "api/Melanchall.DryWetMidi.Core.UnknownFileFormatException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownFileFormatException.html",
    "title": "Class UnknownFileFormatException | DryWetMIDI",
    "keywords": "Class UnknownFileFormatException The exception that is thrown when a MIDI file format is unknown. Inheritance Object Exception MidiException UnknownFileFormatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class UnknownFileFormatException : MidiException, ISerializable Remarks Note that this exception will be thrown only if UnknownFileFormatPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Constructors UnknownFileFormatException() Initializes a new instance of the UnknownFileFormatException . Declaration public UnknownFileFormatException() UnknownFileFormatException(String) Initializes a new instance of the UnknownFileFormatException with the specified error message. Declaration public UnknownFileFormatException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. UnknownFileFormatException(String, UInt16) Initializes a new instance of the UnknownFileFormatException with the specified error message and format of a MIDI file. Declaration public UnknownFileFormatException(string message, ushort fileFormat) Parameters Type Name Description String message The error message that explains the reason for the exception. UInt16 fileFormat Number that represents format of a MIDI file. Properties FileFormat Gets the number that represents format of a MIDI file. Declaration public ushort FileFormat { get; } Property Value Type Description UInt16 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChunkIdPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChunkIdPolicy.html",
    "title": "Enum UnknownChunkIdPolicy | DryWetMIDI",
    "keywords": "Enum UnknownChunkIdPolicy Specifies how reading engine should react on chunk with unknown ID. The default is ReadAsUnknownChunk . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum UnknownChunkIdPolicy : byte Fields Name Description Abort Abort reading and throw an UnknownChunkException . ReadAsUnknownChunk Read the chunk as UnknownChunk . Skip Skip this chunk and go to the next one."
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChunkException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChunkException.html",
    "title": "Class UnknownChunkException | DryWetMIDI",
    "keywords": "Class UnknownChunkException The exception that is thrown when the reading engine encountered a chunk with unknown ID. Inheritance Object Exception MidiException UnknownChunkException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class UnknownChunkException : MidiException, ISerializable Remarks Note that this exception will be thrown only if UnknownChunkIdPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Constructors UnknownChunkException() Initializes a new instance of the UnknownChunkException . Declaration public UnknownChunkException() UnknownChunkException(String) Initializes a new instance of the UnknownChunkException with the specified error message. Declaration public UnknownChunkException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. UnknownChunkException(String, Exception) Initializes a new instance of the UnknownChunkException class with the specified error message and a reference to the inner exception that is the cause of this exception. Declaration public UnknownChunkException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. UnknownChunkException(String, String) Initializes a new instance of the UnknownChunkException with the specified error message and the ID of a chunk. Declaration public UnknownChunkException(string message, string chunkId) Parameters Type Name Description String message The error message that explains the reason for the exception. String chunkId ID of a chunk. Properties ChunkId Gets the ID of a chunk. Declaration public string ChunkId { get; } Property Value Type Description String Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChunk.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChunk.html",
    "title": "Class UnknownChunk | DryWetMIDI",
    "keywords": "Class UnknownChunk Represents an unknown chunk. Inheritance Object MidiChunk UnknownChunk Inherited Members MidiChunk.IdLength MidiChunk.ChunkId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class UnknownChunk : MidiChunk Remarks Structure of MIDI file chunks allows custom chunks be implemented and written to a MIDI file. Chunks DryWetMIDI doesn't know about will be read as an instances of the UnknownChunk . Properties Data Gets data contained in the current UnknownChunk . Declaration public byte[] Data { get; } Property Value Type Description Byte [] Methods Clone() Clones chunk by creating a copy of it. Declaration public override MidiChunk Clone() Returns Type Description MidiChunk Copy of the chunk. Overrides MidiChunk.Clone() GetContentSize(WritingSettings) Gets size of UnknownChunk 's content as number of bytes required to write it according to the specified WritingSettings . Declaration protected override uint GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the chunk's content will be written. Returns Type Description UInt32 Number of bytes required to write UnknownChunk 's content. Overrides MidiChunk.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, UInt32) Reads content of a UnknownChunk . Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, uint size) Parameters Type Name Description MidiReader reader Reader to read the chunk's content with. ReadingSettings settings Settings according to which the chunk's content must be read. UInt32 size Expected size of the content taken from the chunk's header. Overrides MidiChunk.ReadContent(MidiReader, ReadingSettings, UInt32) Remarks Content of an UnknownChunk is array of bytes. Exceptions Type Condition ObjectDisposedException Method was called after the reader's underlying stream was disposed. IOException An I/O error occurred on the reader's underlying stream. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a UnknownChunk . Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the chunk's content with. WritingSettings settings Settings according to which the chunk's content must be written. Overrides MidiChunk.WriteContent(MidiWriter, WritingSettings) Remarks Content of an UnknownChunk is array of bytes. Exceptions Type Condition ObjectDisposedException Method was called after the writer's underlying stream was disposed. IOException An I/O error occurred on the writer's underlying stream."
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChannelEventException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChannelEventException.html",
    "title": "Class UnknownChannelEventException | DryWetMIDI",
    "keywords": "Class UnknownChannelEventException The exception that is thrown when the reading engine encountered unknown channel event. Inheritance Object Exception MidiException UnknownChannelEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class UnknownChannelEventException : MidiException, ISerializable Constructors UnknownChannelEventException() Initializes a new instance of the UnknownChannelEventException . Declaration public UnknownChannelEventException() UnknownChannelEventException(FourBitNumber, FourBitNumber) Initializes a new instance of the UnknownChannelEventException with the specified status byte and channel. Declaration public UnknownChannelEventException(FourBitNumber statusByte, FourBitNumber channel) Parameters Type Name Description FourBitNumber statusByte Status byte of an unknown channel event. FourBitNumber channel Channel of an unknown channel event. Properties Channel Gets the channel of an unknown channel event. Declaration public FourBitNumber Channel { get; } Property Value Type Description FourBitNumber StatusByte Gets the status byte of an unknown channel event. Declaration public FourBitNumber StatusByte { get; } Property Value Type Description FourBitNumber Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountPolicy.html",
    "title": "Enum UnexpectedTrackChunksCountPolicy | DryWetMIDI",
    "keywords": "Enum UnexpectedTrackChunksCountPolicy Specifies how reading engine should react on unexpected track chunks count. The default is Ignore . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum UnexpectedTrackChunksCountPolicy Fields Name Description Abort Abort reading and throw an UnexpectedTrackChunksCountException . Ignore Ignore unexpected track chunks count."
  },
  "api/Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountException.html",
    "title": "Class UnexpectedTrackChunksCountException | DryWetMIDI",
    "keywords": "Class UnexpectedTrackChunksCountException The exception that is thrown when count of track chunks in a MIDI file differs from the one declared in the header chunk of this file. Inheritance Object Exception MidiException UnexpectedTrackChunksCountException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class UnexpectedTrackChunksCountException : MidiException, ISerializable Remarks Note that this exception will be thrown only if UnexpectedTrackChunksCountPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Constructors UnexpectedTrackChunksCountException() Initializes a new instance of the UnexpectedTrackChunksCountException . Declaration public UnexpectedTrackChunksCountException() UnexpectedTrackChunksCountException(String, Int32, Int32) Initializes a new instance of the UnexpectedTrackChunksCountException with the specified error message, expected count of track chunks read from the header chunk, and the actual one. Declaration public UnexpectedTrackChunksCountException(string message, int expectedCount, int actualCount) Parameters Type Name Description String message The error message that explains the reason for the exception. Int32 expectedCount Expected count of track chunks read from the header chunk. Int32 actualCount Actual count of track chunks read from a MIDI file. Properties ActualCount Gets the actual count of track chunks read from a MIDI file. Declaration public int ActualCount { get; } Property Value Type Description Int32 ExpectedCount Gets the expected count of track chunks read from the header chunk. Declaration public int ExpectedCount { get; } Property Value Type Description Int32 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.UnexpectedRunningStatusException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnexpectedRunningStatusException.html",
    "title": "Class UnexpectedRunningStatusException | DryWetMIDI",
    "keywords": "Class UnexpectedRunningStatusException The exception that is thrown when the reading engine encountered unexpected running status. Inheritance Object Exception MidiException UnexpectedRunningStatusException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class UnexpectedRunningStatusException : MidiException, ISerializable Constructors UnexpectedRunningStatusException() Initializes a new instance of the UnexpectedRunningStatusException . Declaration public UnexpectedRunningStatusException() Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.TuneRequestEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TuneRequestEvent.html",
    "title": "Class TuneRequestEvent | DryWetMIDI",
    "keywords": "Class TuneRequestEvent Represents Tune Request event. Inheritance Object MidiEvent SystemCommonEvent TuneRequestEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TuneRequestEvent : SystemCommonEvent Remarks A MIDI event that carries the MIDI tune request message tells a MIDI device to tune itself. Constructors TuneRequestEvent() Initializes a new instance of the TuneRequestEvent . Declaration public TuneRequestEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.TrackChunkUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TrackChunkUtilities.html",
    "title": "Class TrackChunkUtilities | DryWetMIDI",
    "keywords": "Class TrackChunkUtilities Provides extension methods for TrackChunk . Inheritance Object TrackChunkUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public static class TrackChunkUtilities Methods Explode(TrackChunk) Splits a track chunk into multiple ones that correspond to MultiTrack . Declaration public static IEnumerable<TrackChunk> Explode(this TrackChunk trackChunk) Parameters Type Name Description TrackChunk trackChunk Track chunk to split into multiple ones. Returns Type Description IEnumerable < TrackChunk > Multiple track chunks that represent trackChunk . Remarks Note that events will be cloned so events in the result track chunks will not be equal by reference to events in the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null. GetChannels(TrackChunk) Gets all channel numbers presented in the specified TrackChunk . Declaration public static IEnumerable<FourBitNumber> GetChannels(this TrackChunk trackChunk) Parameters Type Name Description TrackChunk trackChunk TrackChunk to get channels of. Returns Type Description IEnumerable < FourBitNumber > Collection of channel numbers presented in the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null. GetChannels(IEnumerable<TrackChunk>) Gets all channel numbers presented in the specified collection of TrackChunk . Declaration public static IEnumerable<FourBitNumber> GetChannels(this IEnumerable<TrackChunk> trackChunks) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to get channels of. Returns Type Description IEnumerable < FourBitNumber > Collection of channel numbers presented in the trackChunks . Exceptions Type Condition ArgumentNullException trackChunks is null. GetTrackChunks(MidiFile) Gets all track chunks of a MIDI file. Declaration public static IEnumerable<TrackChunk> GetTrackChunks(this MidiFile midiFile) Parameters Type Name Description MidiFile midiFile MIDI file to get track chunks of. Returns Type Description IEnumerable < TrackChunk > Collection of track chunks contained in the midiFile . Exceptions Type Condition ArgumentNullException midiFile is null. Merge(IEnumerable<TrackChunk>) Merges multiple track chunks into one that corresponds to SingleTrack . Declaration public static TrackChunk Merge(this IEnumerable<TrackChunk> trackChunks) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Track chunks to merge into one. Returns Type Description TrackChunk Track chunk that containes all events from the trackChunks . Remarks Note that events will be cloned so events in the result track chunk will not be equal by reference to events in the trackChunks . Exceptions Type Condition ArgumentNullException trackChunks is null."
  },
  "api/Melanchall.DryWetMidi.Core.TrackChunk.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TrackChunk.html",
    "title": "Class TrackChunk | DryWetMIDI",
    "keywords": "Class TrackChunk Represents a track chunk of a standard MIDI file. Inheritance Object MidiChunk TrackChunk Inherited Members MidiChunk.IdLength MidiChunk.ChunkId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TrackChunk : MidiChunk Remarks Track chunk contains actual MIDI data as set of events. Constructors TrackChunk() Initializes a new instance of the TrackChunk . Declaration public TrackChunk() TrackChunk(MidiEvent[]) Initializes a new instance of the TrackChunk with the specified events. Declaration public TrackChunk(params MidiEvent[] events) Parameters Type Name Description MidiEvent [] events Events to add to the track chunk. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException events is null. ArgumentException events contain an instance of Melanchall.DryWetMidi.Core.EndOfTrackEvent ; or events contain null. TrackChunk(IEnumerable<MidiEvent>) Initializes a new instance of the TrackChunk with the specified events. Declaration public TrackChunk(IEnumerable<MidiEvent> events) Parameters Type Name Description IEnumerable < MidiEvent > events Events to add to the track chunk. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException events is null. Fields Id ID of the track chunk. This field is constsnt. Declaration public const string Id = \"MTrk\" Field Value Type Description String Properties Events Gets the collection of events contained in the track chunk. Declaration public EventsCollection Events { get; } Property Value Type Description EventsCollection Methods Clone() Clones chunk by creating a copy of it. Declaration public override MidiChunk Clone() Returns Type Description MidiChunk Copy of the chunk. Overrides MidiChunk.Clone() GetContentSize(WritingSettings) Gets size of TrackChunk 's content as number of bytes required to write it according to specified WritingSettings . Declaration protected override uint GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the chunk's content will be written. Returns Type Description UInt32 Number of bytes required to write TrackChunk 's content. Overrides MidiChunk.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, UInt32) Reads content of a TrackChunk . Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, uint size) Parameters Type Name Description MidiReader reader Reader to read the chunk's content with. ReadingSettings settings Settings according to which the chunk's content must be read. UInt32 size Expected size of the content taken from the chunk's header. Overrides MidiChunk.ReadContent(MidiReader, ReadingSettings, UInt32) Remarks Content of a TrackChunk is collection of MIDI events. Exceptions Type Condition ObjectDisposedException Method was called after the writer's underlying stream was disposed. IOException An I/O error occurred on the writer's underlying stream. UnexpectedRunningStatusException Unexpected running status is encountered. UnknownChannelEventException Reader has encountered an unknown channel event. NotEnoughBytesException Not enough bytes to read an event. InvalidChannelEventParameterValueException Value of a channel event's parameter just read is invalid. MissedEndOfTrackEventException Track chunk doesn't end with End Of Track event. WriteContent(MidiWriter, WritingSettings) Writes content of a TrackChunk . Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the chunk's content with. WritingSettings settings Settings according to which the chunk's content must be written. Overrides MidiChunk.WriteContent(MidiWriter, WritingSettings) Remarks Content of a TrackChunk is collection of MIDI events. Exceptions Type Condition ObjectDisposedException Method was called after the writer's underlying stream was disposed. IOException An I/O error occurred on the writer's underlying stream. Extension Methods TrackChunkUtilities.Explode(TrackChunk) TrackChunkUtilities.GetChannels(TrackChunk) PlaybackUtilities.GetPlayback(TrackChunk, TempoMap, IOutputDevice, MidiClockSettings) PlaybackUtilities.GetPlayback(TrackChunk, TempoMap, MidiClockSettings) PlaybackUtilities.Play(TrackChunk, TempoMap, IOutputDevice, MidiClockSettings) ChordsManagingUtilities.ManageChords(TrackChunk, Int64, Comparison<MidiEvent>) ChordsManagingUtilities.GetChords(TrackChunk, Int64) ChordsManagingUtilities.ProcessChords(TrackChunk, Action<Chord>, Predicate<Chord>, Int64) ChordsManagingUtilities.RemoveChords(TrackChunk, Predicate<Chord>, Int64) ChordsManagingUtilities.AddChords(TrackChunk, IEnumerable<Chord>) NotesManagingUtilities.ManageNotes(TrackChunk, Comparison<MidiEvent>) NotesManagingUtilities.GetNotes(TrackChunk) NotesManagingUtilities.ProcessNotes(TrackChunk, Action<Note>, Predicate<Note>) NotesManagingUtilities.RemoveNotes(TrackChunk, Predicate<Note>) NotesManagingUtilities.AddNotes(TrackChunk, IEnumerable<Note>) GetNotesAndRestsUtilities.GetNotesAndRests(TrackChunk, RestSeparationPolicy) GetTimedEventsAndNotesUtilities.GetTimedEventsAndNotes(TrackChunk) TimedEventsManagingUtilities.ManageTimedEvents(TrackChunk, Comparison<MidiEvent>) TimedEventsManagingUtilities.GetTimedEvents(TrackChunk) TimedEventsManagingUtilities.ProcessTimedEvents(TrackChunk, Action<TimedEvent>, Predicate<TimedEvent>) TimedEventsManagingUtilities.RemoveTimedEvents(TrackChunk, Predicate<TimedEvent>) TimedEventsManagingUtilities.AddTimedEvents(TrackChunk, IEnumerable<TimedEvent>) TrackChunkUtilities.ShiftEvents(TrackChunk, ITimeSpan, TempoMap) ChordsSplitterUtilities.SplitChordsByStep(TrackChunk, ITimeSpan, TempoMap, Int64) ChordsSplitterUtilities.SplitChordsByPartsNumber(TrackChunk, Int32, TimeSpanType, TempoMap, Int64) ChordsSplitterUtilities.SplitChordsByGrid(TrackChunk, IGrid, TempoMap, Int64) ChordsSplitterUtilities.SplitChordsAtDistance(TrackChunk, ITimeSpan, LengthedObjectTarget, TempoMap, Int64) ChordsSplitterUtilities.SplitChordsAtDistance(TrackChunk, Double, TimeSpanType, LengthedObjectTarget, TempoMap, Int64) NotesSplitterUtilities.SplitNotesByStep(TrackChunk, ITimeSpan, TempoMap) NotesSplitterUtilities.SplitNotesByPartsNumber(TrackChunk, Int32, TimeSpanType, TempoMap) NotesSplitterUtilities.SplitNotesByGrid(TrackChunk, IGrid, TempoMap) NotesSplitterUtilities.SplitNotesAtDistance(TrackChunk, ITimeSpan, LengthedObjectTarget, TempoMap) NotesSplitterUtilities.SplitNotesAtDistance(TrackChunk, Double, TimeSpanType, LengthedObjectTarget, TempoMap) NotesMergerUtilities.MergeNotes(TrackChunk, TempoMap, NotesMergingSettings, Predicate<Note>) ChordsQuantizerUtilities.QuantizeChords(TrackChunk, IGrid, TempoMap, Int64, ChordsQuantizingSettings) NotesQuantizerUtilities.QuantizeNotes(TrackChunk, IGrid, TempoMap, NotesQuantizingSettings) TimedEventsQuantizerUtilities.QuantizeTimedEvents(TrackChunk, IGrid, TempoMap, TimedEventsQuantizingSettings) ChordsRandomizerUtilities.RandomizeChords(TrackChunk, IBounds, TempoMap, Int64, ChordsRandomizingSettings) NotesRandomizerUtilities.RandomizeNotes(TrackChunk, IBounds, TempoMap, NotesRandomizingSettings) TimedEventsRandomizerUtilities.RandomizeTimedEvents(TrackChunk, IBounds, TempoMap, TimedEventsRandomizingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.TooManyTrackChunksException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TooManyTrackChunksException.html",
    "title": "Class TooManyTrackChunksException | DryWetMIDI",
    "keywords": "Class TooManyTrackChunksException The exception that is thrown while writing a MIDI file when the ChunksCollection contains more than 4294967295 track chunks which is the maximum allowed count for chunks of this type. Inheritance Object Exception MidiException TooManyTrackChunksException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class TooManyTrackChunksException : MidiException, ISerializable Constructors TooManyTrackChunksException() Initializes a new instance of the TooManyTrackChunksException . Declaration public TooManyTrackChunksException() TooManyTrackChunksException(String, Int32) Initializes a new instance of the TooManyTrackChunksException with the specified error message and actual track chunks count. Declaration public TooManyTrackChunksException(string message, int trackChunksCount) Parameters Type Name Description String message The error message that explains the reason for the exception. Int32 trackChunksCount Actual track chunks count. Properties TrackChunksCount Gets the actual track chunks count. Declaration public int TrackChunksCount { get; } Property Value Type Description Int32 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.TimingClockEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TimingClockEvent.html",
    "title": "Class TimingClockEvent | DryWetMIDI",
    "keywords": "Class TimingClockEvent Represents Timing Clock event. Inheritance Object MidiEvent SystemRealTimeEvent TimingClockEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimingClockEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI clock message keeps a slave MIDI device synchronized with a master MIDI device. The MIDI clock message is a timing message that the master device sends at regular intervals to tell the slave device where it is in terms of time. Constructors TimingClockEvent() Initializes a new instance of the TimingClockEvent . Declaration public TimingClockEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.TimeSignatureEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TimeSignatureEvent.html",
    "title": "Class TimeSignatureEvent | DryWetMIDI",
    "keywords": "Class TimeSignatureEvent Represents a Time Signature meta event. Inheritance Object MidiEvent MetaEvent TimeSignatureEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimeSignatureEvent : MetaEvent Remarks The MIDI time signature meta message defines the musical time signature of a MIDI sequence. Constructors TimeSignatureEvent() Initializes a new instance of the TimeSignatureEvent . Declaration public TimeSignatureEvent() TimeSignatureEvent(Byte, Byte) Initializes a new instance of the TimeSignatureEvent with the specified numerator and denominator. Declaration public TimeSignatureEvent(byte numerator, byte denominator) Parameters Type Name Description Byte numerator Numerator of the time signature. Byte denominator Denominator of the time signature. TimeSignatureEvent(Byte, Byte, Byte, Byte) Initializes a new instance of the TimeSignatureEvent with the specified numerator, denominator, number of MIDI clocks per metronome click and number of 32nd notes per beat. Declaration public TimeSignatureEvent(byte numerator, byte denominator, byte clocksPerClick, byte thirtySecondNotesPerBeat) Parameters Type Name Description Byte numerator Numerator of the time signature. Byte denominator Denominator of the time signature. Byte clocksPerClick Number of MIDI clocks per metronome click. Byte thirtySecondNotesPerBeat Number of 32nd notes per beat. Fields DefaultClocksPerClick Default number of MIDI clock ticks per metronome click. Declaration public const byte DefaultClocksPerClick = 24 Field Value Type Description Byte DefaultDenominator Denominator of the default time signature. Declaration public const byte DefaultDenominator = 4 Field Value Type Description Byte DefaultNumerator Numerator of the default time signature. Declaration public const byte DefaultNumerator = 4 Field Value Type Description Byte DefaultThirtySecondNotesPerBeat Default number of 32nd notes per beat. Declaration public const byte DefaultThirtySecondNotesPerBeat = 8 Field Value Type Description Byte Properties ClocksPerClick Gets or sets number of MIDI clock ticks per metronome click. Declaration public byte ClocksPerClick { get; set; } Property Value Type Description Byte Denominator Gets or sets denominator of the time signature. Declaration public byte Denominator { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException Denominator is zero or is not a power of two. Numerator Gets or sets numerator of the time signature. Declaration public byte Numerator { get; set; } Property Value Type Description Byte ThirtySecondNotesPerBeat Gets or sets number of 32nd notes per beat. Declaration public byte ThirtySecondNotesPerBeat { get; set; } Property Value Type Description Byte Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.TimeDivision.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TimeDivision.html",
    "title": "Class TimeDivision | DryWetMIDI",
    "keywords": "Class TimeDivision MIDI file time division. Inheritance Object TimeDivision SmpteTimeDivision TicksPerQuarterNoteTimeDivision Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class TimeDivision Remarks Time division specifies the meaning of the delta-times of events. There are two types of the time division: ticks per quarter note and SMPTE. Time division of the first type has bit 15 set to 0. In this case bits 14 thru 0 represent the number of ticks which make up a quarter-note. Division of the second type has bit 15 set to 1. In this case bits 14 thru 8 contain one of the four values: -24, -25, -29, or -30, corresponding to the four standard SMPTE and MIDI Time Code formats (-29 corresponds to 30 drop frame), and represents the number of frames per second. Bits 7 thru 0 (which represent a byte stored positive) is the resolution within a frame: typical values may be 4 (MIDI Time Code resolution), 8, 10, 80 (bit resolution), or 100. Methods Clone() Clones time division by creating a copy of it. Declaration public abstract TimeDivision Clone() Returns Type Description TimeDivision Copy of the time division."
  },
  "api/Melanchall.DryWetMidi.Core.TicksPerQuarterNoteTimeDivision.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TicksPerQuarterNoteTimeDivision.html",
    "title": "Class TicksPerQuarterNoteTimeDivision | DryWetMIDI",
    "keywords": "Class TicksPerQuarterNoteTimeDivision Time division that represents number of delta-time \"ticks\" which make up a quarter-note. Inheritance Object TimeDivision TicksPerQuarterNoteTimeDivision Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TicksPerQuarterNoteTimeDivision : TimeDivision Constructors TicksPerQuarterNoteTimeDivision() Initializes a new instance of the TicksPerQuarterNoteTimeDivision . Declaration public TicksPerQuarterNoteTimeDivision() TicksPerQuarterNoteTimeDivision(Int16) Initializes a new instance of the TicksPerQuarterNoteTimeDivision with the specified ticks number per a quarter-note. Declaration public TicksPerQuarterNoteTimeDivision(short ticksPerQuarterNote) Parameters Type Name Description Int16 ticksPerQuarterNote Number of ticks which make up a quarter-note. Exceptions Type Condition ArgumentOutOfRangeException ticksPerQuarterNote is negative. Fields DefaultTicksPerQuarterNote Default number of ticks which make up a quarter-note. Declaration public const short DefaultTicksPerQuarterNote = 96 Field Value Type Description Int16 Properties TicksPerQuarterNote Gets or sets number of ticks which make up a quarter-note. Declaration public short TicksPerQuarterNote { get; } Property Value Type Description Int16 Methods Clone() Clones time division by creating a copy of it. Declaration public override TimeDivision Clone() Returns Type Description TimeDivision Copy of the time division. Overrides TimeDivision.Clone() Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(TicksPerQuarterNoteTimeDivision, TicksPerQuarterNoteTimeDivision) Determines if two TicksPerQuarterNoteTimeDivision objects are equal. Declaration public static bool operator ==(TicksPerQuarterNoteTimeDivision timeDivision1, TicksPerQuarterNoteTimeDivision timeDivision2) Parameters Type Name Description TicksPerQuarterNoteTimeDivision timeDivision1 The first TicksPerQuarterNoteTimeDivision to compare. TicksPerQuarterNoteTimeDivision timeDivision2 The second TicksPerQuarterNoteTimeDivision to compare. Returns Type Description Boolean true if the time divisions are equal, false otherwise. Inequality(TicksPerQuarterNoteTimeDivision, TicksPerQuarterNoteTimeDivision) Determines if two TicksPerQuarterNoteTimeDivision objects are not equal. Declaration public static bool operator !=(TicksPerQuarterNoteTimeDivision timeDivision1, TicksPerQuarterNoteTimeDivision timeDivision2) Parameters Type Name Description TicksPerQuarterNoteTimeDivision timeDivision1 The first TicksPerQuarterNoteTimeDivision to compare. TicksPerQuarterNoteTimeDivision timeDivision2 The second TicksPerQuarterNoteTimeDivision to compare. Returns Type Description Boolean false if the time divisions are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.Core.TextEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TextEvent.html",
    "title": "Class TextEvent | DryWetMIDI",
    "keywords": "Class TextEvent Represents a Text meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent TextEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TextEvent : BaseTextEvent Remarks The MIDI text meta message defines some text to be carried within a MIDI file. Constructors TextEvent() Initializes a new instance of the TextEvent . Declaration public TextEvent() TextEvent(String) Initializes a new instance of the TextEvent with the specified text. Declaration public TextEvent(string text) Parameters Type Name Description String text Text of the message. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.SystemRealTimeEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SystemRealTimeEvent.html",
    "title": "Class SystemRealTimeEvent | DryWetMIDI",
    "keywords": "Class SystemRealTimeEvent Represents a system real-time event. Inheritance Object MidiEvent SystemRealTimeEvent ActiveSensingEvent ContinueEvent ResetEvent StartEvent StopEvent TimingClockEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.CloneEvent() MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class SystemRealTimeEvent : MidiEvent Remarks MIDI system realtime messages are messages that are not specific to a MIDI channel but prompt all devices on the MIDI system to respond and to do so in real time. Constructors SystemRealTimeEvent(MidiEventType) Initializes a new instance of the SystemRealTimeEvent with the specified event type. Declaration protected SystemRealTimeEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType The type of event. Exceptions Type Condition InvalidEnumArgumentException eventType specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Core.SystemCommonEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SystemCommonEvent.html",
    "title": "Class SystemCommonEvent | DryWetMIDI",
    "keywords": "Class SystemCommonEvent Represents a system common event. Inheritance Object MidiEvent SystemCommonEvent MidiTimeCodeEvent SongPositionPointerEvent SongSelectEvent TuneRequestEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.CloneEvent() MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class SystemCommonEvent : MidiEvent Remarks MIDI system common messages are those MIDI messages that prompt all devices on the MIDI system to respond (are not specific to a MIDI channel), but do not require an immediate response from the receiving MIDI devices. Constructors SystemCommonEvent(MidiEventType) Initializes a new instance of the SystemCommonEvent with the specified event type. Declaration protected SystemCommonEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType The type of event. Exceptions Type Condition InvalidEnumArgumentException eventType specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Core.SysExEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SysExEvent.html",
    "title": "Class SysExEvent | DryWetMIDI",
    "keywords": "Class SysExEvent Represents a MIDI file system exclusive event. Inheritance Object MidiEvent SysExEvent EscapeSysExEvent NormalSysExEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class SysExEvent : MidiEvent Remarks System exclusive events are used to specify a MIDI system exclusive message, either as one unit or in packets, or as an \"escape\" to specify any arbitrary bytes to be transmitted. Constructors SysExEvent(MidiEventType) Initializes a new instance of the SysExEvent with the specified event type. Declaration protected SysExEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType The type of event. Exceptions Type Condition InvalidEnumArgumentException eventType specified an invalid value. Fields EndOfEventByte The value indicating the end of a system exclusive event. Declaration public const byte EndOfEventByte = 247 Field Value Type Description Byte Properties Completed Gets a value indicating whether this sytem exclusive event is completed or not. Declaration public bool Completed { get; } Property Value Type Description Boolean Data Gets or sets the event's data. Declaration public byte[] Data { get; set; } Property Value Type Description Byte [] Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override sealed MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent()"
  },
  "api/Melanchall.DryWetMidi.Core.StopEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.StopEvent.html",
    "title": "Class StopEvent | DryWetMIDI",
    "keywords": "Class StopEvent Represents Stop event. Inheritance Object MidiEvent SystemRealTimeEvent StopEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class StopEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI stop message tells a MIDI slave device to stop playback. Constructors StopEvent() Initializes a new instance of the StopEvent . Declaration public StopEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.StartEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.StartEvent.html",
    "title": "Class StartEvent | DryWetMIDI",
    "keywords": "Class StartEvent Represents Start event. Inheritance Object MidiEvent SystemRealTimeEvent StartEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class StartEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI start message tells a MIDI slave device to start playback. Constructors StartEvent() Initializes a new instance of the StartEvent . Declaration public StartEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.SongSelectEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SongSelectEvent.html",
    "title": "Class SongSelectEvent | DryWetMIDI",
    "keywords": "Class SongSelectEvent Represents Song Select event. Inheritance Object MidiEvent SystemCommonEvent SongSelectEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SongSelectEvent : SystemCommonEvent Remarks A MIDI event that carries the MIDI song request message (also known as a \"song select message\") tells a MIDI device to select a sequence for playback. Constructors SongSelectEvent() Initializes a new instance of the SongSelectEvent . Declaration public SongSelectEvent() SongSelectEvent(SevenBitNumber) Initializes a new instance of the SongSelectEvent with the specified song number. Declaration public SongSelectEvent(SevenBitNumber number) Parameters Type Name Description SevenBitNumber number Number of the song to be chosen. Properties Number Gets or sets number of the song to be chosen. Declaration public SevenBitNumber Number { get; set; } Property Value Type Description SevenBitNumber Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.SongPositionPointerEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SongPositionPointerEvent.html",
    "title": "Class SongPositionPointerEvent | DryWetMIDI",
    "keywords": "Class SongPositionPointerEvent Represents Song Position Pointer event. Inheritance Object MidiEvent SystemCommonEvent SongPositionPointerEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SongPositionPointerEvent : SystemCommonEvent Remarks A MIDI event that carries the MIDI song position pointer message tells a MIDI device to cue to a point in the MIDI sequence to be ready to play. Constructors SongPositionPointerEvent() Initializes a new instance of the SongPositionPointerEvent . Declaration public SongPositionPointerEvent() SongPositionPointerEvent(UInt16) Initializes a new instance of the SongPositionPointerEvent with the specified MSB and LSB parts of the pointer value. Declaration public SongPositionPointerEvent(ushort pointerValue) Parameters Type Name Description UInt16 pointerValue The value of a song position pointer. Properties PointerValue Gets the song position pointer value. Declaration public ushort PointerValue { get; set; } Property Value Type Description UInt16 Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.SmpteTimeDivision.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SmpteTimeDivision.html",
    "title": "Class SmpteTimeDivision | DryWetMIDI",
    "keywords": "Class SmpteTimeDivision Time division that represents subdivisions of a second, in a way consistent with SMPTE and MIDI time code. Inheritance Object TimeDivision SmpteTimeDivision Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SmpteTimeDivision : TimeDivision Constructors SmpteTimeDivision(SmpteFormat, Byte) Initializes a new instance of the SmpteTimeDivision with the specified format (frame rate) and resoltion. Declaration public SmpteTimeDivision(SmpteFormat format, byte resolution) Parameters Type Name Description SmpteFormat format SMPTE format representing the number of frames per second. Byte resolution Resoltuion within a frame. Exceptions Type Condition InvalidEnumArgumentException format specified an invalid value. Properties Format Gets SMPTE format (frame rate). Declaration public SmpteFormat Format { get; } Property Value Type Description SmpteFormat Resolution Gets resoltion within a frame. Declaration public byte Resolution { get; } Property Value Type Description Byte Methods Clone() Clones time division by creating a copy of it. Declaration public override TimeDivision Clone() Returns Type Description TimeDivision Copy of the time division. Overrides TimeDivision.Clone() Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(SmpteTimeDivision, SmpteTimeDivision) Determines if two SmpteTimeDivision objects are equal. Declaration public static bool operator ==(SmpteTimeDivision timeDivision1, SmpteTimeDivision timeDivision2) Parameters Type Name Description SmpteTimeDivision timeDivision1 The first SmpteTimeDivision to compare. SmpteTimeDivision timeDivision2 The second SmpteTimeDivision to compare. Returns Type Description Boolean true if the time divisions are equal, false otherwise. Inequality(SmpteTimeDivision, SmpteTimeDivision) Determines if two SmpteTimeDivision objects are not equal. Declaration public static bool operator !=(SmpteTimeDivision timeDivision1, SmpteTimeDivision timeDivision2) Parameters Type Name Description SmpteTimeDivision timeDivision1 The first SmpteTimeDivision to compare. SmpteTimeDivision timeDivision2 The second SmpteTimeDivision to compare. Returns Type Description Boolean false if the time divisions are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.Core.SmpteOffsetEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SmpteOffsetEvent.html",
    "title": "Class SmpteOffsetEvent | DryWetMIDI",
    "keywords": "Class SmpteOffsetEvent Represents a SMPTE Offset meta event. Inheritance Object MidiEvent MetaEvent SmpteOffsetEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SmpteOffsetEvent : MetaEvent Remarks The MIDI SMPTE offset meta message specifies an offset for the starting point of a MIDI track from the start of a sequence in terms of SMPTE time (hours:minutes:seconds:frames:subframes). Constructors SmpteOffsetEvent() Initializes a new instance of the SmpteOffsetEvent . Declaration public SmpteOffsetEvent() SmpteOffsetEvent(SmpteFormat, Byte, Byte, Byte, Byte, Byte) Initializes a new instance of the SmpteOffsetEvent with the specified SMPE format, hours, minutes, seconds, number of frames and sub-frames. Declaration public SmpteOffsetEvent(SmpteFormat format, byte hours, byte minutes, byte seconds, byte frames, byte subFrames) Parameters Type Name Description SmpteFormat format SMPTE format. Byte hours Number of hours. Byte minutes Number of minutes. Byte seconds Number of seconds. Byte frames Number of frames. Byte subFrames Number of sub-frames. Exceptions Type Condition InvalidEnumArgumentException format specified an invalid value. ArgumentOutOfRangeException Hours number is out of valid range. -or- Minutes number is out of valid range. -or- Seconds number is out of valid range. -or- Frames number is out of valid range. -or- Sub-frames number is out of valid range. Properties Format Gets or sets SMPTE format. Declaration public SmpteFormat Format { get; set; } Property Value Type Description SmpteFormat Frames Gets or sets number of frames. Declaration public byte Frames { get; set; } Property Value Type Description Byte Remarks Maximum valid value for the Frames depends on the frame rate specified by the Format : 23 for TwentyFour , 24 for TwentyFive , 28 for ThirtyDrop and 29 for Thirty . Exceptions Type Condition ArgumentOutOfRangeException Frames number is out of valid range. Hours Gets or sets number of hours. Declaration public byte Hours { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException Hours number is out of valid range (0-23). Minutes Gets or sets number of minutes. Declaration public byte Minutes { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException Minutes number is out of valid range (0-59). Seconds Gets or sets number of seconds. Declaration public byte Seconds { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException Seconds number is out of valid range (0-59). SubFrames Gets or sets number of sub-frames. Declaration public byte SubFrames { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException Sub-frames number is out of valid range (0-99). Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.SmfConstants.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SmfConstants.html",
    "title": "Class SmfConstants | DryWetMIDI",
    "keywords": "Class SmfConstants Constants related to Standard MIDI Files. Inheritance Object SmfConstants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public static class SmfConstants Properties DefaultTextEncoding Gets the default Encoding used by Standard MIDI File to encode/decode text data. Declaration public static Encoding DefaultTextEncoding { get; } Property Value Type Description Encoding"
  },
  "api/Melanchall.DryWetMidi.Core.SilentNoteOnPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SilentNoteOnPolicy.html",
    "title": "Enum SilentNoteOnPolicy | DryWetMIDI",
    "keywords": "Enum SilentNoteOnPolicy Specifies how reading engine should react on Note On events with velocity 0. The default is NoteOff . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum SilentNoteOnPolicy : byte Fields Name Description NoteOff Read the event as NoteOffEvent . NoteOn Read the event as NoteOnEvent ."
  },
  "api/Melanchall.DryWetMidi.Core.EventType.html": {
    "href": "api/Melanchall.DryWetMidi.Core.EventType.html",
    "title": "Class EventType | DryWetMIDI",
    "keywords": "Class EventType Represents an event's identity described by its type and corresponding status byte. Inheritance Object EventType Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class EventType Constructors EventType(Type, Byte) Initializes a new instance of the EventType with the specified type and status byte. Declaration public EventType(Type type, byte statusByte) Parameters Type Name Description Type type Type of an event. Byte statusByte Status byte of an event. Properties StatusByte Gets the status byte of events described by this instance of the EventType . Declaration public byte StatusByte { get; } Property Value Type Description Byte Type Gets the type of events described by this instance of the EventType . Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Melanchall.DryWetMidi.Core.EventsCollection.html": {
    "href": "api/Melanchall.DryWetMidi.Core.EventsCollection.html",
    "title": "Class EventsCollection | DryWetMIDI",
    "keywords": "Class EventsCollection Collection of MidiEvent objects. Inheritance Object EventsCollection Implements IEnumerable < MidiEvent > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class EventsCollection : IEnumerable<MidiEvent>, IEnumerable Properties Count Gets the number of events contained in the collection. Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Gets or sets the event at the specified index. Declaration public MidiEvent this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the event to get or set. Property Value Type Description MidiEvent The event at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0; or index is equal to or greater than Count . ArgumentNullException value is null. Methods Add(MidiEvent) Adds an event to the end of collection. Declaration public void Add(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent The event to be added to the end of the collection. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException midiEvent is null. AddRange(IEnumerable<MidiEvent>) Adds events to the end of collection. Declaration public void AddRange(IEnumerable<MidiEvent> events) Parameters Type Name Description IEnumerable < MidiEvent > events Events to be added to the end of the collection. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException events is null. Clear() Removes all events from the EventsCollection . Declaration public void Clear() GetEnumerator() Returns an enumerator that iterates through the EventsCollection . Declaration public IEnumerator<MidiEvent> GetEnumerator() Returns Type Description IEnumerator < MidiEvent > An enumerator for the EventsCollection . IndexOf(MidiEvent) Searches for the specified event and returns the zero-based index of the first occurrence within the entire EventsCollection . Declaration public int IndexOf(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent The event to locate in the EventsCollection . Returns Type Description Int32 The zero-based index of the first occurrence of event within the entire EventsCollection , if found; otherwise, –1. Exceptions Type Condition ArgumentNullException midiEvent is null. Insert(Int32, MidiEvent) Inserts an event into the collection at the specified index. Declaration public void Insert(int index, MidiEvent midiEvent) Parameters Type Name Description Int32 index The zero-based index at which the event should be inserted. MidiEvent midiEvent The event to insert. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on a MIDI file writing. Exceptions Type Condition ArgumentNullException midiEvent is null. ArgumentOutOfRangeException index is less than 0. -or- index is greater than Count . InsertRange(Int32, IEnumerable<MidiEvent>) Inserts a set of events into the collection at the specified index. Declaration public void InsertRange(int index, IEnumerable<MidiEvent> midiEvents) Parameters Type Name Description Int32 index The zero-based index at which the events should be inserted. IEnumerable < MidiEvent > midiEvents The events to insert. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on a MIDI file writing. Exceptions Type Condition ArgumentNullException midiEvents is null. ArgumentOutOfRangeException index is less than 0. -or- index is greater than Count . Remove(MidiEvent) Removes the first occurrence of a specific event from the collection. Declaration public bool Remove(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent The event to remove from the collection. The value cannot be null. Returns Type Description Boolean true if event is successfully removed; otherwise, false. This method also returns false if event was not found in the collection. Exceptions Type Condition ArgumentNullException midiEvent is null. RemoveAll(Predicate<MidiEvent>) Removes all the events that match the conditions defined by the specified predicate. Declaration public int RemoveAll(Predicate<MidiEvent> match) Parameters Type Name Description Predicate < MidiEvent > match The Predicate<T> delegate that defines the conditions of the events to remove. Returns Type Description Int32 The number of events removed from the EventsCollection . Exceptions Type Condition ArgumentNullException match is null. RemoveAt(Int32) Removes the event at the specified index of the collection. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the event to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0; or index is equal to or greater than Count . Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through the EventsCollection . Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An enumerator for the EventsCollection . Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ChordsManagingUtilities.ManageChords(EventsCollection, Int64, Comparison<MidiEvent>) ChordsManagingUtilities.GetChords(IEnumerable<MidiEvent>, Int64) ChordsManagingUtilities.GetChords(EventsCollection, Int64) ChordsManagingUtilities.ProcessChords(EventsCollection, Action<Chord>, Predicate<Chord>, Int64) ChordsManagingUtilities.RemoveChords(EventsCollection, Predicate<Chord>, Int64) ChordsManagingUtilities.AddChords(EventsCollection, IEnumerable<Chord>) NotesManagingUtilities.ManageNotes(EventsCollection, Comparison<MidiEvent>) NotesManagingUtilities.GetNotes(IEnumerable<MidiEvent>) NotesManagingUtilities.GetNotes(EventsCollection) NotesManagingUtilities.ProcessNotes(EventsCollection, Action<Note>, Predicate<Note>) NotesManagingUtilities.RemoveNotes(EventsCollection, Predicate<Note>) NotesManagingUtilities.AddNotes(EventsCollection, IEnumerable<Note>) TimedEventsManagingUtilities.ManageTimedEvents(EventsCollection, Comparison<MidiEvent>) TimedEventsManagingUtilities.GetTimedEvents(IEnumerable<MidiEvent>) TimedEventsManagingUtilities.GetTimedEvents(EventsCollection) TimedEventsManagingUtilities.ProcessTimedEvents(EventsCollection, Action<TimedEvent>, Predicate<TimedEvent>) TimedEventsManagingUtilities.RemoveTimedEvents(EventsCollection, Predicate<TimedEvent>) TimedEventsManagingUtilities.AddTimedEvents(EventsCollection, IEnumerable<TimedEvent>)"
  },
  "api/Melanchall.DryWetMidi.Core.DecodeTextCallback.html": {
    "href": "api/Melanchall.DryWetMidi.Core.DecodeTextCallback.html",
    "title": "Delegate DecodeTextCallback | DryWetMIDI",
    "keywords": "Delegate DecodeTextCallback Callback used to decode a string from the specified bytes during reading a text-based meta event. Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public delegate string DecodeTextCallback(byte[] bytes, ReadingSettings settings); Parameters Type Name Description Byte [] bytes Bytes to decode a string from. ReadingSettings settings Settings used to read MIDI data. Returns Type Description String A string decoded from given bytes."
  },
  "api/Melanchall.DryWetMidi.Core.CuePointEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.CuePointEvent.html",
    "title": "Class CuePointEvent | DryWetMIDI",
    "keywords": "Class CuePointEvent Represents a Cue Point meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent CuePointEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class CuePointEvent : BaseTextEvent Remarks The MIDI cue point meta message denotes a cue in a MIDI file, usually to signify the beginning of an action. It can describe something that happens within a film, video or stage production at that point in the musical score. E.g. 'Car crashes', 'Door opens', etc. Constructors CuePointEvent() Initializes a new instance of the CuePointEvent . Declaration public CuePointEvent() CuePointEvent(String) Initializes a new instance of the CuePointEvent with the specified text of cue. Declaration public CuePointEvent(string text) Parameters Type Name Description String text Text of the cue. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.ControlChangeEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ControlChangeEvent.html",
    "title": "Class ControlChangeEvent | DryWetMIDI",
    "keywords": "Class ControlChangeEvent Represents a Control Change message. Inheritance Object MidiEvent ChannelEvent ControlChangeEvent Inherited Members ChannelEvent.Channel ChannelEvent.Item[Int32] ChannelEvent.CloneEvent() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ControlChangeEvent : ChannelEvent Remarks This message is sent when a controller value changes. Controllers include devices such as pedals and levers. Constructors ControlChangeEvent() Initializes a new instance of the ControlChangeEvent . Declaration public ControlChangeEvent() ControlChangeEvent(SevenBitNumber, SevenBitNumber) Initializes a new instance of the ControlChangeEvent with the specified controller number and controller value. Declaration public ControlChangeEvent(SevenBitNumber controlNumber, SevenBitNumber controlValue) Parameters Type Name Description SevenBitNumber controlNumber Controller number. SevenBitNumber controlValue Controller value. Properties ControlNumber Gets or sets controller number. Declaration public SevenBitNumber ControlNumber { get; set; } Property Value Type Description SevenBitNumber ControlValue Gets or sets controller value. Declaration public SevenBitNumber ControlValue { get; set; } Property Value Type Description SevenBitNumber Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods ControlUtilities.GetControlName(ControlChangeEvent)"
  },
  "api/Melanchall.DryWetMidi.Core.ContinueEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ContinueEvent.html",
    "title": "Class ContinueEvent | DryWetMIDI",
    "keywords": "Class ContinueEvent Represents Continue event. Inheritance Object MidiEvent SystemRealTimeEvent ContinueEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ContinueEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI continue message tells a MIDI slave device to resume playback. Constructors ContinueEvent() Initializes a new instance of the ContinueEvent . Declaration public ContinueEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.ChunkType.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChunkType.html",
    "title": "Class ChunkType | DryWetMIDI",
    "keywords": "Class ChunkType Represents a chunk's identity described by its type and corresponding ID. Inheritance Object ChunkType Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChunkType Constructors ChunkType(Type, String) Initializes a new instance of the ChunkType with the specified type and ID. Declaration public ChunkType(Type type, string id) Parameters Type Name Description Type type Type of a chunk. String id 4-character ID of a chunk. Properties Id Gets the ID of chunks described by this instance of the ChunkType . Declaration public string Id { get; } Property Value Type Description String Type Gets the type of chunks described by this instance of the ChunkType . Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Melanchall.DryWetMidi.Core.ChunksCollection.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChunksCollection.html",
    "title": "Class ChunksCollection | DryWetMIDI",
    "keywords": "Class ChunksCollection Collection of MidiChunk objects. Inheritance Object ChunksCollection Implements IEnumerable < MidiChunk > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChunksCollection : IEnumerable<MidiChunk>, IEnumerable Properties Count Gets the number of chunks contained in the collection. Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Gets or sets the chunk at the specified index. Declaration public MidiChunk this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the chunk to get or set. Property Value Type Description MidiChunk The chunk at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0; or index is equal to or greater than Count . ArgumentNullException value is null. Methods Add(MidiChunk) Adds a chunk to the end of the collection. Declaration public void Add(MidiChunk chunk) Parameters Type Name Description MidiChunk chunk The chunk to be added to the end of the collection. Remarks Note that header chunks cannot be added into the collection since it may cause inconsistence in the file structure. Header chunk with appropriate information will be written to a file automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException chunk is null. AddRange(IEnumerable<MidiChunk>) Adds chunks the end of the collection. Declaration public void AddRange(IEnumerable<MidiChunk> chunks) Parameters Type Name Description IEnumerable < MidiChunk > chunks Chunks to add to the collection. Remarks Note that header chunks cannot be added into the collection since it may cause inconsistence in the file structure. Header chunk with appropriate information will be written to a file automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException chunks is null. Clear() Removes all chunks from the ChunksCollection . Declaration public void Clear() GetEnumerator() Returns an enumerator that iterates through the ChunksCollection . Declaration public IEnumerator<MidiChunk> GetEnumerator() Returns Type Description IEnumerator < MidiChunk > An enumerator for the ChunksCollection . IndexOf(MidiChunk) Searches for the specified chunk and returns the zero-based index of the first occurrence within the entire ChunksCollection . Declaration public int IndexOf(MidiChunk chunk) Parameters Type Name Description MidiChunk chunk The chunk to locate in the ChunksCollection . Returns Type Description Int32 The zero-based index of the first occurrence of chunk within the entire ChunksCollection , if found; otherwise, –1. Exceptions Type Condition ArgumentNullException chunk is null. Insert(Int32, MidiChunk) Inserts a chunk into the collection at the specified index. Declaration public void Insert(int index, MidiChunk chunk) Parameters Type Name Description Int32 index The zero-based index at which the chunk should be inserted. MidiChunk chunk The chunk to insert. Remarks Note that header chunks cannot be inserted into the collection since it may cause inconsistence in the file structure. Header chunk with appropriate information will be written to a file automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException chunk is null. ArgumentOutOfRangeException index is less than 0. -or- index is greater than Count . InsertRange(Int32, IEnumerable<MidiChunk>) Inserts a set of chunks into the collection at the specified index. Declaration public void InsertRange(int index, IEnumerable<MidiChunk> chunks) Parameters Type Name Description Int32 index The zero-based index at which the chunk should be inserted. IEnumerable < MidiChunk > chunks The chunk to insert. Remarks Note that header chunks cannot be inserted into the collection since it may cause inconsistence in the file structure. Header chunk with appropriate information will be written to a file automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException chunks is null. ArgumentOutOfRangeException index is less than 0. -or- index is greater than Count . Remove(MidiChunk) Removes the first occurrence of a specific chunk from the collection. Declaration public bool Remove(MidiChunk chunk) Parameters Type Name Description MidiChunk chunk The chunk to remove from the collection. The value cannot be null. Returns Type Description Boolean true if chunk is successfully removed; otherwise, false. This method also returns false if chunk was not found in the collection. Exceptions Type Condition ArgumentNullException chunk is null. RemoveAll(Predicate<MidiChunk>) Removes all the chunks that match the conditions defined by the specified predicate. Declaration public int RemoveAll(Predicate<MidiChunk> match) Parameters Type Name Description Predicate < MidiChunk > match The Predicate<T> delegate that defines the conditions of the chunks to remove. Returns Type Description Int32 The number of chunks removed from the ChunksCollection . Exceptions Type Condition ArgumentNullException match is null. RemoveAt(Int32) Removes the chunk at the specified index of the collection. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the chunk to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0; or index is equal to or greater than Count . Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through the ChunksCollection . Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An enumerator for the ChunksCollection . Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Melanchall.DryWetMidi.Core.ChannelPrefixEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChannelPrefixEvent.html",
    "title": "Class ChannelPrefixEvent | DryWetMIDI",
    "keywords": "Class ChannelPrefixEvent Represents a MIDI Channel Prefix meta event. Inheritance Object MidiEvent MetaEvent ChannelPrefixEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChannelPrefixEvent : MetaEvent Remarks The MIDI channel prefix meta message specifies a MIDI channel so that meta messages that follow are specific to a channel. Constructors ChannelPrefixEvent() Initializes a new instance of the ChannelPrefixEvent . Declaration public ChannelPrefixEvent() ChannelPrefixEvent(Byte) Initializes a new instance of the ChannelPrefixEvent with the specified MIDI channel. Declaration public ChannelPrefixEvent(byte channel) Parameters Type Name Description Byte channel MIDI channel. Properties Channel Gets or sets MIDI channel. Declaration public byte Channel { get; set; } Property Value Type Description Byte Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.ChannelEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChannelEvent.html",
    "title": "Class ChannelEvent | DryWetMIDI",
    "keywords": "Class ChannelEvent Represents a MIDI file channel event. Inheritance Object MidiEvent ChannelEvent ChannelAftertouchEvent ControlChangeEvent NoteAftertouchEvent NoteEvent PitchBendEvent ProgramChangeEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class ChannelEvent : MidiEvent Constructors ChannelEvent(MidiEventType, Int32) Initializes a new instance of the ChannelEvent with the specified parameters count. Declaration protected ChannelEvent(MidiEventType eventType, int parametersCount) Parameters Type Name Description MidiEventType eventType The type of event. Int32 parametersCount Count of the parameters for this channel event. Exceptions Type Condition ArgumentOutOfRangeException Parameters count is negative number which is unallowable. Properties Channel Gets or sets channel for this event. Declaration public FourBitNumber Channel { get; set; } Property Value Type Description FourBitNumber Item[Int32] Gets or sets the parameter's value at the specified index. Declaration protected SevenBitNumber this[int index] { get; set; } Parameters Type Name Description Int32 index Index of the parameter. Property Value Type Description SevenBitNumber Value of parameter at the specified index. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override sealed MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent()"
  },
  "api/Melanchall.DryWetMidi.Core.BaseTextEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.BaseTextEvent.html",
    "title": "Class BaseTextEvent | DryWetMIDI",
    "keywords": "Class BaseTextEvent Represents a text meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent CopyrightNoticeEvent CuePointEvent DeviceNameEvent InstrumentNameEvent LyricEvent MarkerEvent ProgramNameEvent SequenceTrackNameEvent TextEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.CloneEvent() MidiEvent.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class BaseTextEvent : MetaEvent Remarks There are several meta events that have text content and the same structure. All these events are derived from BaseTextEvent . Constructors BaseTextEvent(MidiEventType) Initializes a new instance of the BaseTextEvent . Declaration public BaseTextEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType BaseTextEvent(MidiEventType, String) Initializes a new instance of the BaseTextEvent with the specified text. Declaration public BaseTextEvent(MidiEventType eventType, string text) Parameters Type Name Description MidiEventType eventType The type of event. String text Text contained in the event. Exceptions Type Condition InvalidEnumArgumentException eventType specified an invalid value. Properties Text Gets or sets text contained in the event. Declaration public string Text { get; set; } Property Value Type Description String Methods GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override sealed int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override sealed void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) Exceptions Type Condition ArgumentOutOfRangeException Text event cannot be read since the size is negative number. WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override sealed void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Composing.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.html",
    "title": "Namespace Melanchall.DryWetMidi.Composing | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Composing Classes ChordDescriptor Represents an object that describes a chord. NoteDescriptor Represents an object that describes a note. Pattern Represents a musical pattern - set of notes with the specified times and lengths. PatternBuilder Provides a fluent interface to build an instance of the Pattern . PatternUtilities Utilities to process an instance of the Pattern . Delegates ChordTransformation Transforms a chord described by the specified ChordDescriptor and returns new ChordDescriptor that is result of transformation. NoteTransformation Transforms a note described by the specified NoteDescriptor and returns new NoteDescriptor that is result of transformation."
  },
  "api/Melanchall.DryWetMidi.Composing.PatternBuilder.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.PatternBuilder.html",
    "title": "Class PatternBuilder | DryWetMIDI",
    "keywords": "Class PatternBuilder Provides a fluent interface to build an instance of the Pattern . Inheritance Object PatternBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PatternBuilder Constructors PatternBuilder() Initializes a new instance of the PatternBuilder . Declaration public PatternBuilder() PatternBuilder(Pattern) Initializes a new instance of the PatternBuilder with the specified pattern. Declaration public PatternBuilder(Pattern pattern) Parameters Type Name Description Pattern pattern Pattern to initialize builder with. Remarks This constructor is equivalent to calling default one followed by ReplayPattern(Pattern) call. Using this constructor pattern builder's current position will be placed right after pattern so all further actions will be relative to the end of pattern rather than zero. To start with fresh pattern and place data starting from zero use PatternBuilder() constructor. Exceptions Type Condition ArgumentNullException pattern is null. Fields DefaultNoteLength Default length that will be applied to all further notes and chords if it's not specified explicitly. The length can be altered with SetNoteLength(ITimeSpan) . Declaration public static readonly ITimeSpan DefaultNoteLength Field Value Type Description ITimeSpan DefaultOctave Default octave further notes and chords will be relative to if it's not specified explicitly. Octave can be altered with SetOctave(Octave) . Declaration public static readonly Octave DefaultOctave Field Value Type Description Octave DefaultRootNote Default root note further notes will be based on if it's not specified explicitly. Root note can be altered with SetRootNote(Note) . Declaration public static readonly Note DefaultRootNote Field Value Type Description Note DefaultStep Default step size that will be applied to all further move operations if it's not specified explicitly. Step size can be altered with SetStep(ITimeSpan) . Declaration public static readonly ITimeSpan DefaultStep Field Value Type Description ITimeSpan DefaultVelocity Default velocity that will be applied to all further notes and chords if it's not specified explicitly. Velocity can be altered with SetVelocity(SevenBitNumber) . Declaration public static readonly SevenBitNumber DefaultVelocity Field Value Type Description SevenBitNumber Properties NoteLength Gets the length that will be applied to all further notes and chords if it's not specified explicitly. The length can be altered with SetNoteLength(ITimeSpan) . Declaration public ITimeSpan NoteLength { get; } Property Value Type Description ITimeSpan Remarks There are methods to add notes and chords that don't take length as an argument. In these cases the value of the NoteLength property will be used. For example, Note(Note) or Chord(IEnumerable<Interval>, Note) . Octave Gets the octave further notes and chords will be relative to if it's not specified explicitly. Octave can be altered with SetOctave(Octave) . Declaration public Octave Octave { get; } Property Value Type Description Octave Remarks There are methods to add notes and chords where octave is not specified explicitly. In these cases the value of the Octave property will be used. For example, Note(NoteName) or Chord(IEnumerable<Interval>, NoteName) . RootNote Gets the root note further notes will be based on if it's not specified explicitly. Root note can be altered with SetRootNote(Note) . Declaration public Note RootNote { get; } Property Value Type Description Note Remarks There are methods to add notes by interval where root note is not specified explicitly. In these cases the value of the RootNote property will be used. For example, Note(Interval) . Step Gets the step size that will be applied to all further move operations if it's not specified explicitly. Step size can be altered with SetStep(ITimeSpan) . Declaration public ITimeSpan Step { get; } Property Value Type Description ITimeSpan Remarks There are methods to move current builder's position that don't take step as an argument. In these cases the value of the Step property will be used. For example, StepForward() or StepBack() . Velocity Gets the velocity that will be applied to all further notes and chords if it's not specified explicitly. Velocity can be altered with SetVelocity(SevenBitNumber) . Declaration public SevenBitNumber Velocity { get; } Property Value Type Description SevenBitNumber Remarks There are methods to add notes and chords that don't take velocity as an argument. In these cases the value of the Velocity property will be used. For example, Note(Note) or Chord(IEnumerable<Interval>, Note) . Methods Anchor() Places an anchor at the current time. Declaration public PatternBuilder Anchor() Returns Type Description PatternBuilder The current PatternBuilder . Anchor(Object) Places the specified anchor at the current time. Declaration public PatternBuilder Anchor(object anchor) Parameters Type Name Description Object anchor Anchor to place. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException anchor is null. Build() Build an instance of the Pattern holding all actions defined via builder. Declaration public Pattern Build() Returns Type Description Pattern An instance of the Pattern that holds all actions defined by the current PatternBuilder . Chord(Chord) Adds a chord. Declaration public PatternBuilder Chord(Chord chord) Parameters Type Name Description Chord chord Chord to add. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentNullException chord is null. Chord(Chord, SevenBitNumber) Adds a chord with the specified velocity. Declaration public PatternBuilder Chord(Chord chord, SevenBitNumber velocity) Parameters Type Name Description Chord chord Chord to add. SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Exceptions Type Condition ArgumentNullException chord is null. Chord(Chord, ITimeSpan) Adds a chord with the specified length. Declaration public PatternBuilder Chord(Chord chord, ITimeSpan length) Parameters Type Name Description Chord chord Chord to add. ITimeSpan length Chord's notes length. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentNullException chord is null. -or- length is null. Chord(Chord, ITimeSpan, SevenBitNumber) Adds a chord with the specified notes length and velocity. Declaration public PatternBuilder Chord(Chord chord, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description Chord chord Chord to add. ITimeSpan length Chord's notes length. SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Exceptions Type Condition ArgumentNullException chord is null. -or- length is null. Chord(Chord, Octave) Adds a chord using the specified octave. Declaration public PatternBuilder Chord(Chord chord, Octave octave) Parameters Type Name Description Chord chord Chord to add. Octave octave Octave to resolve chord's notes. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentNullException chord is null. -or- octave is null. Chord(Chord, Octave, SevenBitNumber) Adds a chord using the specified octave and velocity. Declaration public PatternBuilder Chord(Chord chord, Octave octave, SevenBitNumber velocity) Parameters Type Name Description Chord chord Chord to add. Octave octave Octave to resolve chord's notes. SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Exceptions Type Condition ArgumentNullException chord is null. -or- octave is null. Chord(Chord, Octave, ITimeSpan) Adds a chord using the specified octave and notes length. Declaration public PatternBuilder Chord(Chord chord, Octave octave, ITimeSpan length) Parameters Type Name Description Chord chord Chord to add. Octave octave Octave to resolve chord's notes. ITimeSpan length Chord's notes length. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentNullException chord is null. -or- octave is null. -or- length is null. Chord(Chord, Octave, ITimeSpan, SevenBitNumber) Adds a chord using the specified octave, length and velocity. Declaration public PatternBuilder Chord(Chord chord, Octave octave, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description Chord chord Chord to add. Octave octave Octave to resolve chord's notes. ITimeSpan length Chord's notes length. SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException chord is null. -or- octave is null. -or- length is null. Chord(IEnumerable<Interval>, Note) Adds a chord by the specified intervals relative to the root note using default length and velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, Note rootNote) Parameters Type Name Description IEnumerable < Interval > intervals The Interval objects which define a numbers of half steps from the rootNote . Note rootNote The chord's root note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks The result chord will contain the specified root note and notes produced by transposing the rootNote by the intervals . To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException intervals is null. -or- rootNote is null. ArgumentOutOfRangeException The number of result chord's note is out of valid range. Chord(IEnumerable<Interval>, Note, SevenBitNumber) Adds a chord by the specified intervals relative to the root note using default length and specified velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, Note rootNote, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Interval > intervals The Interval objects which define a numbers of half steps from the rootNote . Note rootNote The chord's root note. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks The result chord will contain the specified root note and notes produced by transposing the rootNote by the intervals . To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException intervals is null. -or- rootNote is null. ArgumentOutOfRangeException The number of result chord's note is out of valid range. Chord(IEnumerable<Interval>, Note, ITimeSpan) Adds a chord by the specified intervals relative to the root note using specified length and default velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> interval, Note rootNote, ITimeSpan length) Parameters Type Name Description IEnumerable < Interval > interval The Interval objects which define a numbers of half steps from the rootNote . Note rootNote The chord's root note. ITimeSpan length The length of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks The result chord will contain the specified root note and notes produced by transposing the rootNote by the interval . To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException interval is null. -or- rootNote is null. -or- length is null. ArgumentOutOfRangeException The number of result chord's note is out of valid range. Chord(IEnumerable<Interval>, Note, ITimeSpan, SevenBitNumber) Adds a chord by the specified intervals relative to the root note using specified length and velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, Note rootNote, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Interval > intervals The Interval objects which define a numbers of half steps from the rootNote . Note rootNote The chord's root note. ITimeSpan length The length of a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks The result chord will contain the specified root note and notes produced by transposing the rootNote by the intervals . Exceptions Type Condition ArgumentNullException intervals is null. -or- rootNote is null. -or- length is null. ArgumentOutOfRangeException The number of result chord's note is out of valid range. Chord(IEnumerable<Interval>, NoteName) Adds a chord by the specified intervals and root note's name. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, NoteName rootNoteName) Parameters Type Name Description IEnumerable < Interval > intervals Intervals that represent the chord. NoteName rootNoteName The root note's name of the chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException intervals is null. InvalidEnumArgumentException rootNoteName specified an invalid value. Chord(IEnumerable<Interval>, NoteName, SevenBitNumber) Adds a chord by the specified intervals, root note's name and velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, NoteName rootNoteName, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Interval > intervals Intervals that represent the chord. NoteName rootNoteName The root note's name of the chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException intervals is null. InvalidEnumArgumentException rootNoteName specified an invalid value. Chord(IEnumerable<Interval>, NoteName, ITimeSpan) Adds a chord by the specified intervals, root note's name and length. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, NoteName rootNoteName, ITimeSpan length) Parameters Type Name Description IEnumerable < Interval > intervals Intervals that represent the chord. NoteName rootNoteName The root note's name of the chord. ITimeSpan length The length of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException intervals is null. -or- length is null. InvalidEnumArgumentException rootNoteName specified an invalid value. Chord(IEnumerable<Interval>, NoteName, ITimeSpan, SevenBitNumber) Adds a chord by the specified intervals, root note's name, length and velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, NoteName rootNoteName, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Interval > intervals Intervals that represent the chord. NoteName rootNoteName The root note's name of the chord. ITimeSpan length The length of a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException intervals is null. -or- length is null. InvalidEnumArgumentException rootNoteName specified an invalid value. Chord(IEnumerable<Note>) Adds a chord by the specified notes using default velocity and length. Declaration public PatternBuilder Chord(IEnumerable<Note> notes) Parameters Type Name Description IEnumerable < Note > notes Notes that represent a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException notes is null. Chord(IEnumerable<Note>, SevenBitNumber) Adds a chord by the specified notes using specified velocity and default length. Declaration public PatternBuilder Chord(IEnumerable<Note> notes, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Note > notes Notes that represent a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException notes is null. Chord(IEnumerable<Note>, ITimeSpan) Adds a chord by the specified notes using specified length and default velocity. Declaration public PatternBuilder Chord(IEnumerable<Note> notes, ITimeSpan length) Parameters Type Name Description IEnumerable < Note > notes Notes that represent a chord. ITimeSpan length The length of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException notes is null. -or- length is null. Chord(IEnumerable<Note>, ITimeSpan, SevenBitNumber) Adds a chord by the specified notes using specified velocity and length. Declaration public PatternBuilder Chord(IEnumerable<Note> notes, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Note > notes Notes that represent a chord. ITimeSpan length The length of a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException notes is null. -or- length is null. Chord(IEnumerable<NoteName>) Adds a chord by the specified notes names using default velocity, length and octave. Declaration public PatternBuilder Chord(IEnumerable<NoteName> noteNames) Parameters Type Name Description IEnumerable < NoteName > noteNames Names of notes that represent a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException noteNames is null. Chord(IEnumerable<NoteName>, SevenBitNumber) Adds a chord by the specified notes names using specified velocity and default length, and default octave. Declaration public PatternBuilder Chord(IEnumerable<NoteName> noteNames, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < NoteName > noteNames Names of notes that represent a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException noteNames is null. Chord(IEnumerable<NoteName>, ITimeSpan) Adds a chord by the specified notes names using specified length and default velocity, and default octave. Declaration public PatternBuilder Chord(IEnumerable<NoteName> noteNames, ITimeSpan length) Parameters Type Name Description IEnumerable < NoteName > noteNames Names of notes that represent a chord. ITimeSpan length The length of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException noteNames is null. -or- length is null. Chord(IEnumerable<NoteName>, ITimeSpan, SevenBitNumber) Adds a chord by the specified notes names using specified velocity and length, and default octave. Declaration public PatternBuilder Chord(IEnumerable<NoteName> noteNames, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < NoteName > noteNames Names of notes that represent a chord. ITimeSpan length The length of a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. Exceptions Type Condition ArgumentNullException noteNames is null. -or- length is null. Lyrics(String) Adds lyrics. Declaration public PatternBuilder Lyrics(string text) Parameters Type Name Description String text Text of lyrics. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException text is null. Marker(String) Adds a marker. Declaration public PatternBuilder Marker(string marker) Parameters Type Name Description String marker The text of marker. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException marker is null. MoveToFirstAnchor() Move to the first anchor. Declaration public PatternBuilder MoveToFirstAnchor() Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition InvalidOperationException There are no anchors. MoveToFirstAnchor(Object) Moves to the first specified anchor. Declaration public PatternBuilder MoveToFirstAnchor(object anchor) Parameters Type Name Description Object anchor Anchor to move to. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException anchor is null. ArgumentException There are no anchors with the anchor key. MoveToLastAnchor() Moves to the last anchor. Declaration public PatternBuilder MoveToLastAnchor() Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition InvalidOperationException The are no anchors. MoveToLastAnchor(Object) Moves to the last specified anchor. Declaration public PatternBuilder MoveToLastAnchor(object anchor) Parameters Type Name Description Object anchor Anchor to move to. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException anchor is null. ArgumentException There are no anchors with the anchor key. MoveToNthAnchor(Int32) Moves to the nth anchor. Declaration public PatternBuilder MoveToNthAnchor(int index) Parameters Type Name Description Int32 index Index of an anchor to move to. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentOutOfRangeException index is out of range. MoveToNthAnchor(Object, Int32) Moves to the nth specified anchor. Declaration public PatternBuilder MoveToNthAnchor(object anchor, int index) Parameters Type Name Description Object anchor Anchor to move to. Int32 index Index of an anchor to move to. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException anchor is null. ArgumentOutOfRangeException index is out of range. MoveToPreviousTime() Moves the current time to the previous one. Declaration public PatternBuilder MoveToPreviousTime() Returns Type Description PatternBuilder The current PatternBuilder . Remarks On every action current time is stored in the time history. To return to the last saved time you can call the MoveToPreviousTime() . MoveToTime(ITimeSpan) Moves the current time to the specified one. Declaration public PatternBuilder MoveToTime(ITimeSpan time) Parameters Type Name Description ITimeSpan time Time to move to. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException time is null. Note(Interval) Adds a note by the specified interval relative to the current root note using default length and velocity. Declaration public PatternBuilder Note(Interval interval) Parameters Type Name Description Interval interval The Interval which defines a number of half steps from the current root note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set root note use SetRootNote(Note) method. By default the root note is C4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException interval is null. ArgumentOutOfRangeException The number of result note is out of valid range. Note(Interval, SevenBitNumber) Adds a note by the specified interval relative to the current root note using default length and specified velocity. Declaration public PatternBuilder Note(Interval interval, SevenBitNumber velocity) Parameters Type Name Description Interval interval The Interval which defines a number of half steps from the current root note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set root note use SetRootNote(Note) method. By default the root note is C4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException interval is null. ArgumentOutOfRangeException The number of result note is out of valid range. Note(Interval, ITimeSpan) Adds a note by the specified interval relative to the current root note using specified length and default velocity. Declaration public PatternBuilder Note(Interval interval, ITimeSpan length) Parameters Type Name Description Interval interval The Interval which defines a number of half steps from the current root note. ITimeSpan length The length of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set root note use SetRootNote(Note) method. By default the root note is C4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException interval is null. -or- length is null. ArgumentOutOfRangeException The number of result note is out of valid range. Note(Interval, ITimeSpan, SevenBitNumber) Adds a note by the specified interval relative to the current root note using specified length and velocity. Declaration public PatternBuilder Note(Interval interval, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description Interval interval The Interval which defines a number of half steps from the current root note. ITimeSpan length The length of a note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set root note use SetRootNote(Note) method. By default the root note is C4. Exceptions Type Condition ArgumentNullException interval is null. -or- length is null. ArgumentOutOfRangeException The number of result note is out of valid range. Note(Note) Adds a note using default length and velocity. Declaration public PatternBuilder Note(Note note) Parameters Type Name Description Note note A note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException note is null. Note(Note, SevenBitNumber) Adds a note using specified velocity and default length. Declaration public PatternBuilder Note(Note note, SevenBitNumber velocity) Parameters Type Name Description Note note A note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException note is null. Note(Note, ITimeSpan) Adds a note using specified length and default velocity. Declaration public PatternBuilder Note(Note note, ITimeSpan length) Parameters Type Name Description Note note A note. ITimeSpan length The length of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException note is null. -or- length is null. Note(Note, ITimeSpan, SevenBitNumber) Adds a note using specified velocity and length. Declaration public PatternBuilder Note(Note note, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description Note note The note. ITimeSpan length The length of the note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException note is null. -or- length is null. Note(NoteName) Adds a note by the specified note name using default velocity, length and octave. Declaration public PatternBuilder Note(NoteName noteName) Parameters Type Name Description NoteName noteName The name of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. Note(NoteName, SevenBitNumber) Adds a note by the specified note name using specified velocity and default length and octave. Declaration public PatternBuilder Note(NoteName noteName, SevenBitNumber velocity) Parameters Type Name Description NoteName noteName The name of a note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. Note(NoteName, ITimeSpan) Adds a note by the specified note name using specified length and default velocity and octave. Declaration public PatternBuilder Note(NoteName noteName, ITimeSpan length) Parameters Type Name Description NoteName noteName The name of a note. ITimeSpan length The length of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentNullException length is null. Note(NoteName, ITimeSpan, SevenBitNumber) Adds a note by the specified note name using specified velocity and length, and default octave. Declaration public PatternBuilder Note(NoteName noteName, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description NoteName noteName The name of a note. ITimeSpan length The length of a note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentNullException length is null. Pattern(Pattern) Adds a pattern. Declaration public PatternBuilder Pattern(Pattern pattern) Parameters Type Name Description Pattern pattern Pattern to add. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException pattern is null. ProgramChange(SevenBitNumber) Inserts ProgramChangeEvent to specify an instrument that will be used by following notes. Declaration public PatternBuilder ProgramChange(SevenBitNumber programNumber) Parameters Type Name Description SevenBitNumber programNumber The number of a MIDI program. Returns Type Description PatternBuilder The current PatternBuilder . ProgramChange(GeneralMidi2Program) Inserts ProgramChangeEvent to specify an instrument that will be used by following notes. Declaration public PatternBuilder ProgramChange(GeneralMidi2Program program) Parameters Type Name Description GeneralMidi2Program program The General MIDI Level 2 program. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition InvalidEnumArgumentException program specified an invalid value. ProgramChange(GeneralMidiProgram) Inserts ProgramChangeEvent to specify an instrument that will be used by following notes. Declaration public PatternBuilder ProgramChange(GeneralMidiProgram program) Parameters Type Name Description GeneralMidiProgram program The General MIDI Level 1 program. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition InvalidEnumArgumentException program specified an invalid value. Repeat() Repeats the previous action one time. Declaration public PatternBuilder Repeat() Returns Type Description PatternBuilder The current PatternBuilder . Remarks Note that SetNoteLength(ITimeSpan) , SetOctave(Octave) , SetStep(ITimeSpan) and SetVelocity(SevenBitNumber) are not actions and will not be repeated since default values applies immidiately on next actions. Exceptions Type Condition InvalidOperationException There are no actions to repeat. Repeat(Int32) Repeats the previous action the specified number of times. Declaration public PatternBuilder Repeat(int repetitionsCount) Parameters Type Name Description Int32 repetitionsCount Count of repetitions. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Note that SetNoteLength(ITimeSpan) , SetOctave(Octave) , SetStep(ITimeSpan) and SetVelocity(SevenBitNumber) are not actions and will not be repeated since default values applies immidiately on next actions. Exceptions Type Condition ArgumentOutOfRangeException repetitionsCount is negative. InvalidOperationException There are no actions to repeat. Repeat(Int32, Int32) Repeats the specified number of previous actions. Declaration public PatternBuilder Repeat(int actionsCount, int repetitionsCount) Parameters Type Name Description Int32 actionsCount Number of previous actions to repeat. Int32 repetitionsCount Count of repetitions. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Note that SetNoteLength(ITimeSpan) , SetOctave(Octave) , SetStep(ITimeSpan) and SetVelocity(SevenBitNumber) are not actions and will not be repeated since default values applies immidiately on next actions. Exceptions Type Condition ArgumentOutOfRangeException actionsCount is negative. -or- actionsCount is greater than count of existing actions. -or- repetitionsCount is negative. ReplayPattern(Pattern) Replays all actions contained in the specified pattern. Declaration public PatternBuilder ReplayPattern(Pattern pattern) Parameters Type Name Description Pattern pattern Pattern to replay actions of. Returns Type Description PatternBuilder The current PatternBuilder . Remarks ReplayPattern(Pattern) inserts all actions from pattern that were added by using methods of PatternBuilder to produce the specified pattern. These actions will be added as separate ones unlike Pattern(Pattern) which adds pattern as one single action. Exceptions Type Condition ArgumentNullException pattern is null. SetNoteLength(ITimeSpan) Sets default note length that will be used by next actions of the builder. Declaration public PatternBuilder SetNoteLength(ITimeSpan length) Parameters Type Name Description ITimeSpan length New default note length. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Setting default note length is not an action and thus will not be stored in a pattern. Exceptions Type Condition ArgumentNullException length is null. SetOctave(Octave) Sets default note octave that will be used by next actions of the builder. Declaration public PatternBuilder SetOctave(Octave octave) Parameters Type Name Description Octave octave New default octave. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Setting default octave is not an action and thus will not be stored in a pattern. Exceptions Type Condition ArgumentNullException octave is null. SetRootNote(Note) Sets a root note that will be used by next actions of the builder using Interval objects. Declaration public PatternBuilder SetRootNote(Note rootNote) Parameters Type Name Description Note rootNote The root note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Setting a root note is not an action and thus will not be stored in a pattern. Exceptions Type Condition ArgumentNullException rootNote is null. SetStep(ITimeSpan) Sets default step for step back and step forward actions of the builder. Declaration public PatternBuilder SetStep(ITimeSpan step) Parameters Type Name Description ITimeSpan step New default step. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Setting default step is not an action and thus will not be stored in a pattern. Exceptions Type Condition ArgumentNullException step is null. SetVelocity(SevenBitNumber) Sets default velocity that will be used by next actions of the builder. Declaration public PatternBuilder SetVelocity(SevenBitNumber velocity) Parameters Type Name Description SevenBitNumber velocity New default velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Setting default velocity is not an action and thus will not be stored in a pattern. StepBack() Moves the current time by the default step back. Declaration public PatternBuilder StepBack() Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default step use SetStep(ITimeSpan) method. By default the step is 1/4. StepBack(ITimeSpan) Moves the current time by the specified step back. Declaration public PatternBuilder StepBack(ITimeSpan step) Parameters Type Name Description ITimeSpan step Step to move by. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException step is null. StepForward() Moves the current time by the default step forward. Declaration public PatternBuilder StepForward() Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default step use SetStep(ITimeSpan) method. By default the step is 1/4. StepForward(ITimeSpan) Moves the current time by the specified step forward. Declaration public PatternBuilder StepForward(ITimeSpan step) Parameters Type Name Description ITimeSpan step Step to move by. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException step is null."
  },
  "api/Melanchall.DryWetMidi.Composing.NoteTransformation.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.NoteTransformation.html",
    "title": "Delegate NoteTransformation | DryWetMIDI",
    "keywords": "Delegate NoteTransformation Transforms a note described by the specified NoteDescriptor and returns new NoteDescriptor that is result of transformation. Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public delegate NoteDescriptor NoteTransformation(NoteDescriptor noteDescriptor); Parameters Type Name Description NoteDescriptor noteDescriptor Descriptor of a note to transform. Returns Type Description NoteDescriptor NoteDescriptor that is result of transformation."
  },
  "api/Melanchall.DryWetMidi.Composing.ChordTransformation.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.ChordTransformation.html",
    "title": "Delegate ChordTransformation | DryWetMIDI",
    "keywords": "Delegate ChordTransformation Transforms a chord described by the specified ChordDescriptor and returns new ChordDescriptor that is result of transformation. Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public delegate ChordDescriptor ChordTransformation(ChordDescriptor chordDescriptor); Parameters Type Name Description ChordDescriptor chordDescriptor Descriptor of a chord to transform. Returns Type Description ChordDescriptor ChordDescriptor that is result of transformation."
  },
  "api/Melanchall.DryWetMidi.Common.html": {
    "href": "api/Melanchall.DryWetMidi.Common.html",
    "title": "Namespace Melanchall.DryWetMidi.Common | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Common Classes DataTypesUtilities Internal utilities to manipulate MIDI data types. Structs FourBitNumber Type that is used to represent a four-bit number (0-15). SevenBitNumber Type that is used to represent a seven-bit number (0-127). Enums ControlName Name and function of a MIDI controller. SmpteFormat SMPTE format which represents the frame rate."
  },
  "api/Melanchall.DryWetMidi.Common.SevenBitNumber.html": {
    "href": "api/Melanchall.DryWetMidi.Common.SevenBitNumber.html",
    "title": "Struct SevenBitNumber | DryWetMIDI",
    "keywords": "Struct SevenBitNumber Type that is used to represent a seven-bit number (0-127). Implements IComparable < SevenBitNumber > IConvertible Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Common Assembly : Melanchall.DryWetMidi.dll Syntax public struct SevenBitNumber : IComparable<SevenBitNumber>, IConvertible Remarks Seven-bit numbers widely used by MIDI protocol as parameters of MIDI events. So instead of manipulating built-in C# numeric types (like byte or int) and checking for out-of-range errors all validation of numbers in the [0; 127] range happens on data type level via casting C# integer values to the SevenBitNumber . Constructors SevenBitNumber(Byte) Initializes a new instance of the SevenBitNumber with the specified value. Declaration public SevenBitNumber(byte value) Parameters Type Name Description Byte value Value representing seven-bit number. Exceptions Type Condition ArgumentOutOfRangeException value is out of [ MinValue ; MaxValue ] range. Fields MaxValue The largest possible value of a SevenBitNumber . Declaration public static readonly SevenBitNumber MaxValue Field Value Type Description SevenBitNumber MinValue The smallest possible value of a SevenBitNumber . Declaration public static readonly SevenBitNumber MinValue Field Value Type Description SevenBitNumber Values All possible values of SevenBitNumber . Declaration public static readonly SevenBitNumber[] Values Field Value Type Description SevenBitNumber [] Methods CompareTo(SevenBitNumber) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(SevenBitNumber other) Parameters Type Name Description SevenBitNumber other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: - Less than zero: This instance precedes other in the sort order. - Zero: This instance occurs in the same position in the sort order as other. - Greater than zero: This instance follows other in the sort order. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides ValueType.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() GetTypeCode() Returns the TypeCode for value type SevenBitNumber . Declaration public TypeCode GetTypeCode() Returns Type Description TypeCode The enumerated constant, Byte . Parse(String) Converts the string representation of a seven-bit number to its SevenBitNumber equivalent. Declaration public static SevenBitNumber Parse(string input) Parameters Type Name Description String input A string containing a number to convert. Returns Type Description SevenBitNumber A SevenBitNumber equivalent to the seven-bit number contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() TryParse(String, out SevenBitNumber) Converts the string representation of a seven-bit number to its SevenBitNumber equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out SevenBitNumber sevenBitNumber) Parameters Type Name Description String input A string containing a number to convert. SevenBitNumber sevenBitNumber When this method returns, contains the SevenBitNumber equivalent of the seven-bit number contained in input , if the conversion succeeded, or zero if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Operators Explicit(Byte to SevenBitNumber) Converts the value of a Byte to a SevenBitNumber . Declaration public static explicit operator SevenBitNumber(byte number) Parameters Type Name Description Byte number Byte value to convert to a SevenBitNumber object. Returns Type Description SevenBitNumber Implicit(SevenBitNumber to Byte) Converts the value of a SevenBitNumber to a Byte . Declaration public static implicit operator byte (SevenBitNumber number) Parameters Type Name Description SevenBitNumber number SevenBitNumber object to convert to a byte value. Returns Type Description Byte Explicit Interface Implementations IConvertible.ToBoolean(IFormatProvider) Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information. Declaration bool IConvertible.ToBoolean(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Boolean A Boolean value equivalent to the value of this instance. IConvertible.ToByte(IFormatProvider) Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information. Declaration byte IConvertible.ToByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Byte An 8-bit unsigned integer equivalent to the value of this instance. IConvertible.ToChar(IFormatProvider) Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information. Declaration char IConvertible.ToChar(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Char A Unicode character equivalent to the value of this instance. IConvertible.ToDateTime(IFormatProvider) Converts the value of this instance to an equivalent DateTime using the specified culture-specific formatting information. Declaration DateTime IConvertible.ToDateTime(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description DateTime A DateTime instance equivalent to the value of this instance. IConvertible.ToDecimal(IFormatProvider) Converts the value of this instance to an equivalent Decimal number using the specified culture-specific formatting information. Declaration decimal IConvertible.ToDecimal(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Decimal A Decimal number equivalent to the value of this instance. IConvertible.ToDouble(IFormatProvider) Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information. Declaration double IConvertible.ToDouble(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Double A double-precision floating-point number equivalent to the value of this instance. IConvertible.ToInt16(IFormatProvider) Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information. Declaration short IConvertible.ToInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int16 An 16-bit signed integer equivalent to the value of this instance. IConvertible.ToInt32(IFormatProvider) Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information. Declaration int IConvertible.ToInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int32 An 32-bit signed integer equivalent to the value of this instance. IConvertible.ToInt64(IFormatProvider) Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information. Declaration long IConvertible.ToInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int64 An 64-bit signed integer equivalent to the value of this instance. IConvertible.ToSByte(IFormatProvider) Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information. Declaration sbyte IConvertible.ToSByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description SByte An 8-bit signed integer equivalent to the value of this instance. IConvertible.ToSingle(IFormatProvider) Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information. Declaration float IConvertible.ToSingle(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Single A single-precision floating-point number equivalent to the value of this instance. IConvertible.ToString(IFormatProvider) Converts the value of this instance to an equivalent String using the specified culture-specific formatting information. Declaration string IConvertible.ToString(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description String A String instance equivalent to the value of this instance. IConvertible.ToType(Type, IFormatProvider) Converts the value of this instance to an System.Object of the specified Type that has an equivalent value, using the specified culture-specific formatting information. Declaration object IConvertible.ToType(Type conversionType, IFormatProvider provider) Parameters Type Name Description Type conversionType The Type to which the value of this instance is converted. IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Object An Object instance of type conversionType whose value is equivalent to the value of this instance. IConvertible.ToUInt16(IFormatProvider) Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information. Declaration ushort IConvertible.ToUInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt16 An 16-bit unsigned integer equivalent to the value of this instance. IConvertible.ToUInt32(IFormatProvider) Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information. Declaration uint IConvertible.ToUInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt32 An 32-bit unsigned integer equivalent to the value of this instance. IConvertible.ToUInt64(IFormatProvider) Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information. Declaration ulong IConvertible.ToUInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt64 An 64-bit unsigned integer equivalent to the value of this instance. Implements System.IComparable<T> System.IConvertible"
  },
  "api/Melanchall.DryWetMidi.Common.ControlName.html": {
    "href": "api/Melanchall.DryWetMidi.Common.ControlName.html",
    "title": "Enum ControlName | DryWetMIDI",
    "keywords": "Enum ControlName Name and function of a MIDI controller. Namespace : Melanchall.DryWetMidi.Common Assembly : Melanchall.DryWetMidi.dll Syntax public enum ControlName : byte Fields Name Description AllNotesOff Channel Mode Message: All Notes Off. AllSoundOff Channel Mode Message: All Sound Off. Balance Balance. BankSelect Bank Select. BreathController Breath Controller. ChannelVolume Channel Volume (formerly Main Volume). DamperPedal Damper Pedal On/Off (Sustain). DataDecrement Data Decrement (Data Entry -1; see MMA RP-018). DataEntryMsb Data Entry MSB. DataIncrement Data Increment (Data Entry +1; see MMA RP-018). EffectControl1 Effect Control 1. EffectControl2 Effect Control 2. Effects1Depth Effects 1 Depth (default: Reverb Send Level - see MMA RP-023; formerly External Effects Depth). Effects2Depth Effects 2 Depth (formerly Tremolo Depth). Effects3Depth Effects 3 Depth (default: Chorus Send Level - see MMA RP-023; formerly Chorus Depth). Effects4Depth Effects 4 Depth (formerly Celeste [Detune] Depth). Effects5Depth Effects 5 Depth (formerly Phaser Depth). ExpressionController Expression Controller. FootController Foot Controller. GeneralPurposeController1 General Purpose Controller 1. GeneralPurposeController2 General Purpose Controller 2. GeneralPurposeController3 General Purpose Controller 3. GeneralPurposeController4 General Purpose Controller 4. GeneralPurposeController5 General Purpose Controller 5. GeneralPurposeController6 General Purpose Controller 6. GeneralPurposeController7 General Purpose Controller 7. GeneralPurposeController8 General Purpose Controller 8. HighResolutionVelocityPrefix High Resolution Velocity Prefix. Hold2 Hold 2. LegatoFootswitch Legato Footswitch. LocalControl Channel Mode Message: Local Control On/Off. LsbForBalance LSB for Balance. LsbForBankSelect LSB for Bank Select. LsbForBreathController LSB for Breath Controller. LsbForChannelVolume LSB for Channel Volume (formerly Main Volume). LsbForController14 LSB for Control 14 (Undefined). LsbForController15 LSB for Control 15 (Undefined). LsbForController20 LSB for Control 20 (Undefined). LsbForController21 LSB for Control 21 (Undefined). LsbForController22 LSB for Control 22 (Undefined). LsbForController23 LSB for Control 23 (Undefined). LsbForController24 LSB for Control 24 (Undefined). LsbForController25 LSB for Control 25 (Undefined). LsbForController26 LSB for Control 26 (Undefined). LsbForController27 LSB for Control 27 (Undefined). LsbForController28 LSB for Control 28 (Undefined). LsbForController29 LSB for Control 29 (Undefined). LsbForController3 LSB for Control 3 (Undefined). LsbForController30 LSB for Control 30 (Undefined). LsbForController31 LSB for Control 31 (Undefined). LsbForController9 LSB for Control 9 (Undefined). LsbForDataEntry LSB for Data Entry. LsbForEffectControl1 LSB for Effect Control 1. LsbForEffectControl2 LSB for Effect Control 2. LsbForExpressionController LSB for Expression Controller. LsbForFootController LSB for Foot Controller. LsbForGeneralPurposeController1 LSB for General Purpose Controller 1. LsbForGeneralPurposeController2 LSB for General Purpose Controller 2. LsbForGeneralPurposeController3 LSB for General Purpose Controller 3. LsbForGeneralPurposeController4 LSB for General Purpose Controller 4. LsbForModulation LSB for Modulation. LsbForPan LSB for Pan. LsbForPortamentoTime LSB for Portamento Time. Modulation Modulation Wheel or Lever. MonoModeOn Channel Mode Message: Mono Mode On (+ poly off, + all notes off). NonRegisteredParameterNumberLsb Non-Registered Parameter Number (NRPN) - LSB. NonRegisteredParameterNumberMsb Non-Registered Parameter Number (NRPN) - MSB. OmniModeOff Channel Mode Message: Omni Mode Off (+ all notes off). OmniModeOn Channel Mode Message: Omni Mode On (+ all notes off). Pan Pan. PolyModeOn Channel Mode Message: Poly Mode On (+ mono off, +all notes off). Portamento Portamento On/Off. PortamentoControl Portamento Control. PortamentoTime Portamento Time. RegisteredParameterNumberLsb Registered Parameter Number (RPN) - LSB. RegisteredParameterNumberMsb Registered Parameter Number (RPN) - MSB. ResetAllControllers Channel Mode Message: Reset All Controllers (See MMA RP-015). SoftPedal Soft Pedal On/Off. Sostenuto Sostenuto On/Off. SoundController1 Sound Controller 1 (default: Sound Variation). SoundController10 Sound Controller 10 (default undefined - see MMA RP-021). SoundController2 Sound Controller 2 (default: Timbre/Harmonic Intens.). SoundController3 Sound Controller 3 (default: Release Time). SoundController4 Sound Controller 4 (default: Attack Time). SoundController5 Sound Controller 5 (default: Brightness). SoundController6 Sound Controller 6 (default: Decay Time - see MMA RP-021). SoundController7 Sound Controller 7 (default: Vibrato Rate - see MMA RP-021). SoundController8 Sound Controller 8 (default: Vibrato Depth - see MMA RP-021). SoundController9 Sound Controller 9 (default: Vibrato Delay - see MMA RP-021). Undefined Undefined Controller. Extension Methods ControlUtilities.AsSevenBitNumber() ControlUtilities.GetControlChangeEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Tools.TimedEventsQuantizer.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimedEventsQuantizer.html",
    "title": "Class TimedEventsQuantizer | DryWetMIDI",
    "keywords": "Class TimedEventsQuantizer Provides methods to quantize timed events time. Inheritance Object Quantizer < TimedEvent , TimedEventsQuantizingSettings > TimedEventsQuantizer Inherited Members Quantizer<TimedEvent, TimedEventsQuantizingSettings>.QuantizeInternal(IEnumerable<TimedEvent>, IGrid, TempoMap, TimedEventsQuantizingSettings) Quantizer<TimedEvent, TimedEventsQuantizingSettings>.GetObjectTime(TimedEvent, TimedEventsQuantizingSettings) Quantizer<TimedEvent, TimedEventsQuantizingSettings>.SetObjectTime(TimedEvent, Int64, TimedEventsQuantizingSettings) Quantizer<TimedEvent, TimedEventsQuantizingSettings>.OnObjectQuantizing(TimedEvent, QuantizedTime, IGrid, TempoMap, TimedEventsQuantizingSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public class TimedEventsQuantizer : Quantizer<TimedEvent, TimedEventsQuantizingSettings> Methods GetObjectTime(TimedEvent, TimedEventsQuantizingSettings) Gets the time of an object that should be quantized. Declaration protected override sealed long GetObjectTime(TimedEvent obj, TimedEventsQuantizingSettings settings) Parameters Type Name Description TimedEvent obj Object to get time of. TimedEventsQuantizingSettings settings Settings according to which the object's time should be gotten. Returns Type Description Int64 The time of obj that should be quantized. Overrides Melanchall.DryWetMidi.Tools.Quantizer<Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings>.GetObjectTime(Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings) OnObjectQuantizing(TimedEvent, QuantizedTime, IGrid, TempoMap, TimedEventsQuantizingSettings) Performs additional actions before the new time will be set to an object. Declaration protected override TimeProcessingInstruction OnObjectQuantizing(TimedEvent obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings) Parameters Type Name Description TimedEvent obj Object to quantize. QuantizedTime quantizedTime Holds information about new time for an object. IGrid grid Grid to quantize object by. TempoMap tempoMap Tempo map used to quantize object. TimedEventsQuantizingSettings settings Settings according to which object should be quantized. Returns Type Description TimeProcessingInstruction An object indicating whether the new time should be set to the object or not. Also returned object contains that new time. Overrides Melanchall.DryWetMidi.Tools.Quantizer<Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings>.OnObjectQuantizing(Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.QuantizedTime, Melanchall.DryWetMidi.Interaction.IGrid, Melanchall.DryWetMidi.Interaction.TempoMap, Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings) Remarks Inside this method the new time can be changed or quantizing of an object can be cancelled. Quantize(IEnumerable<TimedEvent>, IGrid, TempoMap, TimedEventsQuantizingSettings) Quantizes objects time using the specified grid and settings. Declaration public void Quantize(IEnumerable<TimedEvent> objects, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings = null) Parameters Type Name Description IEnumerable < TimedEvent > objects Objects to quantize. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. TimedEventsQuantizingSettings settings Settings according to which objects should be quantized. Exceptions Type Condition ArgumentNullException objects is null. -or- grid is null. -or- tempoMap is null. SetObjectTime(TimedEvent, Int64, TimedEventsQuantizingSettings) Sets the new time of an object. Declaration protected override sealed void SetObjectTime(TimedEvent obj, long time, TimedEventsQuantizingSettings settings) Parameters Type Name Description TimedEvent obj Object to set time for. Int64 time New time after quantizing. TimedEventsQuantizingSettings settings Settings according to which the object's time should be set. Overrides Melanchall.DryWetMidi.Tools.Quantizer<Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings>.SetObjectTime(Melanchall.DryWetMidi.Interaction.TimedEvent, System.Int64, Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings)"
  },
  "api/Melanchall.DryWetMidi.Tools.SliceMidiFileSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.SliceMidiFileSettings.html",
    "title": "Class SliceMidiFileSettings | DryWetMIDI",
    "keywords": "Class SliceMidiFileSettings Settings according to which a MidiFile should be splitted. Inheritance Object SliceMidiFileSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public class SliceMidiFileSettings Properties PreserveTimes Gets or sets a value indicating whether original times of events should be saved or not. The default value is false. Declaration public bool PreserveTimes { get; set; } Property Value Type Description Boolean Remarks If false used, events will be moved to the start of a new file. If true used, events will be placed in new files at the same times as in the input file. PreserveTrackChunks Gets or sets a value indicating whether track chunks in new files should correspond to those in the input file or not, so empty track chunks can be presented in new files. The default value is false. Declaration public bool PreserveTrackChunks { get; set; } Property Value Type Description Boolean Remarks If false used, track chunks without events will be removed from the result. SplitNotes Gets or sets a value indicating whether notes should be splitted in points of grid intersection or not. The default value is true. Declaration public bool SplitNotes { get; set; } Property Value Type Description Boolean Remarks False means notes treated as just Note On / Note Off events rather than note objects for true. Splitting notes produces new Note On / Note Off events at points of grid intersecting notes."
  },
  "api/Melanchall.DryWetMidi.Tools.RandomizingSettings-1.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.RandomizingSettings-1.html",
    "title": "Class RandomizingSettings<TObject> | DryWetMIDI",
    "keywords": "Class RandomizingSettings<TObject> Settings according to which objects should be randomized. Inheritance Object RandomizingSettings<TObject> LengthedObjectsRandomizingSettings<TObject> TimedEventsRandomizingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class RandomizingSettings<TObject> Type Parameters Name Description TObject Properties Filter Gets or sets a predicate to filter objects that should be randomized. Use null if all objects should be processed. Declaration public Predicate<TObject> Filter { get; set; } Property Value Type Description Predicate <TObject>"
  },
  "api/Melanchall.DryWetMidi.Tools.Randomizer-2.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.Randomizer-2.html",
    "title": "Class Randomizer<TObject, TSettings> | DryWetMIDI",
    "keywords": "Class Randomizer<TObject, TSettings> Provides methods to randomize objects time. Inheritance Object Randomizer<TObject, TSettings> LengthedObjectsRandomizer<TObject, TSettings> TimedEventsRandomizer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class Randomizer<TObject, TSettings> where TSettings : RandomizingSettings<TObject>, new() Type Parameters Name Description TObject The type of objects to quantize. TSettings The type of quantizer's settings. Methods GetObjectTime(TObject, TSettings) Gets the time of an object that should be randomized. Declaration protected abstract long GetObjectTime(TObject obj, TSettings settings) Parameters Type Name Description TObject obj Object to get time of. TSettings settings Settings according to which the object's time should be gotten. Returns Type Description Int64 The time of obj that should be randomized. OnObjectRandomizing(TObject, Int64, TSettings) Performs additional actions before the new time will be set to an object. Declaration protected abstract TimeProcessingInstruction OnObjectRandomizing(TObject obj, long time, TSettings settings) Parameters Type Name Description TObject obj Object to randomize. Int64 time The new time that is going to be set to the object. Can be changed inside this method. TSettings settings Settings according to which object should be randomized. Returns Type Description TimeProcessingInstruction An object indicating whether the new time should be set to the object or not. Also returned object contains that new time. Remarks Inside this method the new time can be changed or randomizing of an object can be cancelled. RandomizeInternal(IEnumerable<TObject>, IBounds, TempoMap, TSettings) Randomizes objects time using the specified bounds and settings. Declaration protected void RandomizeInternal(IEnumerable<TObject> objects, IBounds bounds, TempoMap tempoMap, TSettings settings) Parameters Type Name Description IEnumerable <TObject> objects Objects to randomize. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. TSettings settings Settings according to which objects should be randomized. SetObjectTime(TObject, Int64, TSettings) Sets the new time of an object. Declaration protected abstract void SetObjectTime(TObject obj, long time, TSettings settings) Parameters Type Name Description TObject obj Object to set time for. Int64 time New time after randomizing. TSettings settings Settings according to which the object's time should be set."
  },
  "api/Melanchall.DryWetMidi.Tools.QuantizingSettings-1.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.QuantizingSettings-1.html",
    "title": "Class QuantizingSettings<TObject> | DryWetMIDI",
    "keywords": "Class QuantizingSettings<TObject> Settings according to which quantizing should be performed. Inheritance Object QuantizingSettings<TObject> LengthedObjectsQuantizingSettings<TObject> TimedEventsQuantizingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class QuantizingSettings<TObject> Type Parameters Name Description TObject Properties DistanceCalculationType Gets or sets the type of distance calculation used to find a time to snap an object to. The default value is Midi . Declaration public TimeSpanType DistanceCalculationType { get; set; } Property Value Type Description TimeSpanType Filter Gets or sets a predicate to filter objects that should be quantized. Use null if all objects should be processed. Declaration public Predicate<TObject> Filter { get; set; } Property Value Type Description Predicate <TObject> QuantizingLevel Gets or sets the level of quantizing from 0.0 (no quantizing) to 1.0 (full quantizng). Declaration public double QuantizingLevel { get; set; } Property Value Type Description Double Remarks This setting specifies how close an object should be moved to nearest grid time. For example, 0.5 will lead to an object will be moved half the distance between its time and the nearest grid time. Exceptions Type Condition ArgumentOutOfRangeException value is out of valid range."
  },
  "api/Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy.html",
    "title": "Enum QuantizingBeyondZeroPolicy | DryWetMIDI",
    "keywords": "Enum QuantizingBeyondZeroPolicy Policy which defines how a quantizer should act in case of an object is going to be moved beyond zero. The default value is FixAtZero . Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum QuantizingBeyondZeroPolicy Fields Name Description Abort Throw an exception aborting quantizing. FixAtZero Object will be shrinked due to end time quantizing and fixed at zero. Skip Object will be skipped so quantizing will not be applied to it."
  },
  "api/Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy.html",
    "title": "Enum QuantizingBeyondFixedEndPolicy | DryWetMIDI",
    "keywords": "Enum QuantizingBeyondFixedEndPolicy Policy which defines how a quantizer should act in case of object's side is going to be moved beyond an opposite one that is fixed. The default value is CollapseAndFix . Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum QuantizingBeyondFixedEndPolicy Fields Name Description Abort Throw an exception aborting quantizing. CollapseAndFix Object will be collapsed and fixed at fixed end's time. CollapseAndMove Object will be collapsed and moved to the new time calculated by a quantizer. Skip Object will be skipped so quantizing will not be applied to it. SwapEnds Ends of an object will be swapped."
  },
  "api/Melanchall.DryWetMidi.Tools.Quantizer-2.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.Quantizer-2.html",
    "title": "Class Quantizer<TObject, TSettings> | DryWetMIDI",
    "keywords": "Class Quantizer<TObject, TSettings> Provides methods to quantize objects time. Inheritance Object Quantizer<TObject, TSettings> LengthedObjectsQuantizer<TObject, TSettings> TimedEventsQuantizer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class Quantizer<TObject, TSettings> where TSettings : QuantizingSettings<TObject>, new() Type Parameters Name Description TObject The type of objects to quantize. TSettings The type of quantizer's settings. Methods GetObjectTime(TObject, TSettings) Gets the time of an object that should be quantized. Declaration protected abstract long GetObjectTime(TObject obj, TSettings settings) Parameters Type Name Description TObject obj Object to get time of. TSettings settings Settings according to which the object's time should be gotten. Returns Type Description Int64 The time of obj that should be quantized. OnObjectQuantizing(TObject, QuantizedTime, IGrid, TempoMap, TSettings) Performs additional actions before the new time will be set to an object. Declaration protected abstract TimeProcessingInstruction OnObjectQuantizing(TObject obj, QuantizedTime quantizedTime, IGrid grid, TempoMap tempoMap, TSettings settings) Parameters Type Name Description TObject obj Object to quantize. QuantizedTime quantizedTime Holds information about new time for an object. IGrid grid Grid to quantize object by. TempoMap tempoMap Tempo map used to quantize object. TSettings settings Settings according to which object should be quantized. Returns Type Description TimeProcessingInstruction An object indicating whether the new time should be set to the object or not. Also returned object contains that new time. Remarks Inside this method the new time can be changed or quantizing of an object can be cancelled. QuantizeInternal(IEnumerable<TObject>, IGrid, TempoMap, TSettings) Quantizes objects time using the specified grid and settings. Declaration protected void QuantizeInternal(IEnumerable<TObject> objects, IGrid grid, TempoMap tempoMap, TSettings settings) Parameters Type Name Description IEnumerable <TObject> objects Objects to quantize. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. TSettings settings Settings according to which objects should be quantized. SetObjectTime(TObject, Int64, TSettings) Sets the new time of an object. Declaration protected abstract void SetObjectTime(TObject obj, long time, TSettings settings) Parameters Type Name Description TObject obj Object to set time for. Int64 time New time after quantizing. TSettings settings Settings according to which the object's time should be set."
  },
  "api/Melanchall.DryWetMidi.Tools.QuantizedTime.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.QuantizedTime.html",
    "title": "Class QuantizedTime | DryWetMIDI",
    "keywords": "Class QuantizedTime Holds information about new time for an object that was calculated during quantizing. Inheritance Object QuantizedTime Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class QuantizedTime Properties ConvertedDistanceToGridTime Gets the distance between an object's current time and the nearest grid time as time span of the type specified by DistanceCalculationType . Declaration public ITimeSpan ConvertedDistanceToGridTime { get; } Property Value Type Description ITimeSpan DistanceToGridTime Gets the distance between an object's current time and the nearest grid time. Declaration public long DistanceToGridTime { get; } Property Value Type Description Int64 GridTime Gets a grid time that was selected for an object as the nearest one. Declaration public long GridTime { get; } Property Value Type Description Int64 NewTime Gets the new time of an object. Declaration public long NewTime { get; } Property Value Type Description Int64 Shift Gets the distance an object is going to be moved toward the new time. Declaration public ITimeSpan Shift { get; } Property Value Type Description ITimeSpan"
  },
  "api/Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.html",
    "title": "Class NotesSplitterUtilities | DryWetMIDI",
    "keywords": "Class NotesSplitterUtilities Provides methods for splitting notes. Inheritance Object NotesSplitterUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class NotesSplitterUtilities Methods SplitNotesAtDistance(MidiFile, ITimeSpan, LengthedObjectTarget) Splits notes contained in the specified MidiFile at the specified distance from a note's start or end. Declaration public static void SplitNotesAtDistance(this MidiFile midiFile, ITimeSpan distance, LengthedObjectTarget from) Parameters Type Name Description MidiFile midiFile MidiFile to split notes in. ITimeSpan distance Distance to split notes at. LengthedObjectTarget from Point of a note distance should be measured from. Exceptions Type Condition ArgumentNullException midiFile is null. -or- distance is null. InvalidEnumArgumentException from specified an invalid value. SplitNotesAtDistance(MidiFile, Double, TimeSpanType, LengthedObjectTarget) Splits notes contained in the specified MidiFile by the specified ratio of a note's length measuring it from the note's start or end. For example, 0.5 means splitting at the center of a note. Declaration public static void SplitNotesAtDistance(this MidiFile midiFile, double ratio, TimeSpanType lengthType, LengthedObjectTarget from) Parameters Type Name Description MidiFile midiFile MidiFile to split notes in. Double ratio Ratio of a note's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a note's length should be processed according to. LengthedObjectTarget from Point of a note distance should be measured from. Exceptions Type Condition ArgumentNullException midiFile is null. ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException lengthType specified an invalid value. -or- from specified an invalid value. SplitNotesAtDistance(TrackChunk, ITimeSpan, LengthedObjectTarget, TempoMap) Splits notes contained in the specified TrackChunk at the specified distance from a note's start or end. Declaration public static void SplitNotesAtDistance(this TrackChunk trackChunk, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split notes in. ITimeSpan distance Distance to split notes at. LengthedObjectTarget from Point of a note distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- distance is null. -or- tempoMap is null. InvalidEnumArgumentException from specified an invalid value. SplitNotesAtDistance(TrackChunk, Double, TimeSpanType, LengthedObjectTarget, TempoMap) Splits notes contained in the specified TrackChunk by the specified ratio of a note's length measuring it from the note's start or end. For example, 0.5 means splitting at the center of a note. Declaration public static void SplitNotesAtDistance(this TrackChunk trackChunk, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split notes in. Double ratio Ratio of a note's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a note's length should be processed according to. LengthedObjectTarget from Point of a note distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- tempoMap is null. ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException lengthType specified an invalid value. -or- from specified an invalid value. SplitNotesAtDistance(IEnumerable<TrackChunk>, ITimeSpan, LengthedObjectTarget, TempoMap) Splits notes contained in the specified collection of TrackChunk at the specified distance from a note's start or end. Declaration public static void SplitNotesAtDistance(this IEnumerable<TrackChunk> trackChunks, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split notes in. ITimeSpan distance Distance to split notes at. LengthedObjectTarget from Point of a note distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- distance is null. -or- tempoMap is null. InvalidEnumArgumentException from specified an invalid value. SplitNotesAtDistance(IEnumerable<TrackChunk>, Double, TimeSpanType, LengthedObjectTarget, TempoMap) Splits notes contained in the specified collection of TrackChunk by the specified ratio of a note's length measuring it from the note's start or end. For example, 0.5 means splitting at the center of a note. Declaration public static void SplitNotesAtDistance(this IEnumerable<TrackChunk> trackChunks, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split notes in. Double ratio Ratio of a note's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a note's length should be processed according to. LengthedObjectTarget from Point of a note distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- tempoMap is null. ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException lengthType specified an invalid value. -or- from specified an invalid value. SplitNotesByGrid(MidiFile, IGrid) Splits notes contained in the specified MidiFile by the specified grid. Declaration public static void SplitNotesByGrid(this MidiFile midiFile, IGrid grid) Parameters Type Name Description MidiFile midiFile MidiFile to split notes in. IGrid grid Grid to split notes by. Exceptions Type Condition ArgumentNullException grid is null. SplitNotesByGrid(TrackChunk, IGrid, TempoMap) Splits notes contained in the specified TrackChunk by the specified grid. Declaration public static void SplitNotesByGrid(this TrackChunk trackChunk, IGrid grid, TempoMap tempoMap) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split notes in. IGrid grid Grid to split notes by. TempoMap tempoMap Tempo map used to calculate times to split by. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- grid is null. -or- tempoMap is null. SplitNotesByGrid(IEnumerable<TrackChunk>, IGrid, TempoMap) Splits notes contained in the specified collection of TrackChunk by the specified grid. Declaration public static void SplitNotesByGrid(this IEnumerable<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split notes in. IGrid grid Grid to split notes by. TempoMap tempoMap Tempo map used to calculate times to split by. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- grid is null. -or- tempoMap is null. SplitNotesByPartsNumber(MidiFile, Int32, TimeSpanType) Splits notes contained in the specified MidiFile into the specified number of parts of the equal length. Declaration public static void SplitNotesByPartsNumber(this MidiFile midiFile, int partsNumber, TimeSpanType lengthType) Parameters Type Name Description MidiFile midiFile MidiFile to split notes in. Int32 partsNumber The number of parts to split notes into. TimeSpanType lengthType Type of a part's length. Remarks If a note has zero length, it will be splitted into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException midiFile is null. ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitNotesByPartsNumber(TrackChunk, Int32, TimeSpanType, TempoMap) Splits notes contained in the specified TrackChunk into the specified number of parts of the equal length. Declaration public static void SplitNotesByPartsNumber(this TrackChunk trackChunk, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split notes in. Int32 partsNumber The number of parts to split notes into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. Remarks If a note has zero length, it will be splitted into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- tempoMap is null. ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitNotesByPartsNumber(IEnumerable<TrackChunk>, Int32, TimeSpanType, TempoMap) Splits notes contained in the specified collection of TrackChunk into the specified number of parts of the equal length. Declaration public static void SplitNotesByPartsNumber(this IEnumerable<TrackChunk> trackChunks, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split notes in. Int32 partsNumber The number of parts to split notes into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. Remarks If a note has zero length, it will be splitted into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- tempoMap is null. ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitNotesByStep(MidiFile, ITimeSpan) Splits notes contained in the specified MidiFile by the specified step so every note will be splitted at points equally distanced from each other starting from the note's start time. Declaration public static void SplitNotesByStep(this MidiFile midiFile, ITimeSpan step) Parameters Type Name Description MidiFile midiFile MidiFile to split notes in. ITimeSpan step Step to split notes by. Remarks Notes with zero length and notes with length smaller than step will not be splitted. Exceptions Type Condition ArgumentNullException midiFile is null. -or- step is null. SplitNotesByStep(TrackChunk, ITimeSpan, TempoMap) Splits notes contained in the specified TrackChunk by the specified step so every note will be splitted at points equally distanced from each other starting from the note's start time. Declaration public static void SplitNotesByStep(this TrackChunk trackChunk, ITimeSpan step, TempoMap tempoMap) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split notes in. ITimeSpan step Step to split notes by. TempoMap tempoMap Tempo map used to calculate times to split by. Remarks Notes with zero length and notes with length smaller than step will not be splitted. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- step is null. -or- tempoMap is null. SplitNotesByStep(IEnumerable<TrackChunk>, ITimeSpan, TempoMap) Splits notes contained in the specified collection of TrackChunk by the specified step so every note will be splitted at points equally distanced from each other starting from the note's start time. Declaration public static void SplitNotesByStep(this IEnumerable<TrackChunk> trackChunks, ITimeSpan step, TempoMap tempoMap) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split notes in. ITimeSpan step Step to split notes by. TempoMap tempoMap Tempo map used to calculate times to split by. Remarks Notes with zero length and notes with length smaller than step will not be splitted. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- step is null. -or- tempoMap is null."
  },
  "api/Melanchall.DryWetMidi.Tools.NotesSplitter.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesSplitter.html",
    "title": "Class NotesSplitter | DryWetMIDI",
    "keywords": "Class NotesSplitter Provides methods for splitting notes. Inheritance Object LengthedObjectsSplitter < Note > NotesSplitter Inherited Members LengthedObjectsSplitter<Note>.SplitByStep(IEnumerable<Note>, ITimeSpan, TempoMap) LengthedObjectsSplitter<Note>.SplitByPartsNumber(IEnumerable<Note>, Int32, TimeSpanType, TempoMap) LengthedObjectsSplitter<Note>.SplitByGrid(IEnumerable<Note>, IGrid, TempoMap) LengthedObjectsSplitter<Note>.SplitAtDistance(IEnumerable<Note>, ITimeSpan, LengthedObjectTarget, TempoMap) LengthedObjectsSplitter<Note>.SplitAtDistance(IEnumerable<Note>, Double, TimeSpanType, LengthedObjectTarget, TempoMap) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotesSplitter : LengthedObjectsSplitter<Note> Methods CloneObject(Note) Clones an object by creating a copy of it. Declaration protected override Note CloneObject(Note obj) Parameters Type Name Description Note obj Object to clone. Returns Type Description Note Copy of the obj . Overrides Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter<Melanchall.DryWetMidi.Interaction.Note>.CloneObject(Melanchall.DryWetMidi.Interaction.Note) SplitObject(Note, Int64) Splits an object by the specified time. Declaration protected override SplittedLengthedObject<Note> SplitObject(Note obj, long time) Parameters Type Name Description Note obj Object to split. Int64 time Time to split obj by. Returns Type Description SplittedLengthedObject < Note > An object containing left and right parts of the splitted object. Overrides Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter<Melanchall.DryWetMidi.Interaction.Note>.SplitObject(Melanchall.DryWetMidi.Interaction.Note, System.Int64)"
  },
  "api/Melanchall.DryWetMidi.Tools.NotesRandomizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesRandomizingSettings.html",
    "title": "Class NotesRandomizingSettings | DryWetMIDI",
    "keywords": "Class NotesRandomizingSettings Settings according to which notes should be randomized. Inheritance Object RandomizingSettings < Note > LengthedObjectsRandomizingSettings < Note > NotesRandomizingSettings Inherited Members LengthedObjectsRandomizingSettings<Note>.RandomizingTarget LengthedObjectsRandomizingSettings<Note>.FixOppositeEnd RandomizingSettings<Note>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotesRandomizingSettings : LengthedObjectsRandomizingSettings<Note>"
  },
  "api/Melanchall.DryWetMidi.Tools.NotesRandomizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesRandomizerUtilities.html",
    "title": "Class NotesRandomizerUtilities | DryWetMIDI",
    "keywords": "Class NotesRandomizerUtilities Provides methods to randomize notes time. Inheritance Object NotesRandomizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class NotesRandomizerUtilities Methods RandomizeNotes(MidiFile, IBounds, NotesRandomizingSettings) Randomizes notes contained in the specified MidiFile . Declaration public static void RandomizeNotes(this MidiFile midiFile, IBounds bounds, NotesRandomizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to randomize notes in. IBounds bounds Bounds to randomize time within. NotesRandomizingSettings settings Settings according to which notes should be randomized. Exceptions Type Condition ArgumentNullException midiFile is null. -or- bounds is null. RandomizeNotes(TrackChunk, IBounds, TempoMap, NotesRandomizingSettings) Randomizes notes contained in the specified TrackChunk . Declaration public static void RandomizeNotes(this TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, NotesRandomizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to randomize notes in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. NotesRandomizingSettings settings Settings according to which notes should be randomized. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- bounds is null. -or- tempoMap is null. RandomizeNotes(IEnumerable<TrackChunk>, IBounds, TempoMap, NotesRandomizingSettings) Randomizes notes contained in the specified collection of TrackChunk . Declaration public static void RandomizeNotes(this IEnumerable<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, NotesRandomizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to randomize notes in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. NotesRandomizingSettings settings Settings according to which notes should be randomized. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- bounds is null. -or- tempoMap is null."
  },
  "api/Melanchall.DryWetMidi.Tools.NotesRandomizer.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesRandomizer.html",
    "title": "Class NotesRandomizer | DryWetMIDI",
    "keywords": "Class NotesRandomizer Provides methods to randomize notes time. Inheritance Object Randomizer < Note , NotesRandomizingSettings > LengthedObjectsRandomizer < Note , NotesRandomizingSettings > NotesRandomizer Inherited Members LengthedObjectsRandomizer<Note, NotesRandomizingSettings>.Randomize(IEnumerable<Note>, IBounds, TempoMap, NotesRandomizingSettings) LengthedObjectsRandomizer<Note, NotesRandomizingSettings>.GetObjectTime(Note, NotesRandomizingSettings) LengthedObjectsRandomizer<Note, NotesRandomizingSettings>.SetObjectTime(Note, Int64, NotesRandomizingSettings) LengthedObjectsRandomizer<Note, NotesRandomizingSettings>.OnObjectRandomizing(Note, Int64, NotesRandomizingSettings) Randomizer<Note, NotesRandomizingSettings>.RandomizeInternal(IEnumerable<Note>, IBounds, TempoMap, NotesRandomizingSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotesRandomizer : LengthedObjectsRandomizer<Note, NotesRandomizingSettings>"
  },
  "api/Melanchall.DryWetMidi.Tools.NotesQuantizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesQuantizingSettings.html",
    "title": "Class NotesQuantizingSettings | DryWetMIDI",
    "keywords": "Class NotesQuantizingSettings Settings according to which notes should be quantized. Inheritance Object QuantizingSettings < Note > LengthedObjectsQuantizingSettings < Note > NotesQuantizingSettings Inherited Members LengthedObjectsQuantizingSettings<Note>.LengthType LengthedObjectsQuantizingSettings<Note>.QuantizingTarget LengthedObjectsQuantizingSettings<Note>.QuantizingBeyondZeroPolicy LengthedObjectsQuantizingSettings<Note>.QuantizingBeyondFixedEndPolicy LengthedObjectsQuantizingSettings<Note>.FixOppositeEnd QuantizingSettings<Note>.DistanceCalculationType QuantizingSettings<Note>.QuantizingLevel QuantizingSettings<Note>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public class NotesQuantizingSettings : LengthedObjectsQuantizingSettings<Note>"
  },
  "api/Melanchall.DryWetMidi.Tools.NotesQuantizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesQuantizerUtilities.html",
    "title": "Class NotesQuantizerUtilities | DryWetMIDI",
    "keywords": "Class NotesQuantizerUtilities Provides methods to quantize notes time. Inheritance Object NotesQuantizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class NotesQuantizerUtilities Methods QuantizeNotes(MidiFile, IGrid, NotesQuantizingSettings) Quantizes notes contained in the specified MidiFile . Declaration public static void QuantizeNotes(this MidiFile midiFile, IGrid grid, NotesQuantizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to quantize notes in. IGrid grid Grid to quantize objects by. NotesQuantizingSettings settings Settings according to which notes should be quantized. Exceptions Type Condition ArgumentNullException midiFile is null. -or- grid is null. InvalidOperationException Note is going to be moved beyond zero. -or- Note's end is going to be moved beyond the note's fixed end. QuantizeNotes(TrackChunk, IGrid, TempoMap, NotesQuantizingSettings) Quantizes notes contained in the specified TrackChunk . Declaration public static void QuantizeNotes(this TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, NotesQuantizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to quantize notes in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. NotesQuantizingSettings settings Settings according to which notes should be quantized. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- grid is null. -or- tempoMap is null. InvalidOperationException Note is going to be moved beyond zero. -or- Note's end is going to be moved beyond the note's fixed end. QuantizeNotes(IEnumerable<TrackChunk>, IGrid, TempoMap, NotesQuantizingSettings) Quantizes notes contained in the specified collection of TrackChunk . Declaration public static void QuantizeNotes(this IEnumerable<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, NotesQuantizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to quantize notes in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. NotesQuantizingSettings settings Settings according to which notes should be quantized. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- grid is null. -or- tempoMap is null. InvalidOperationException Note is going to be moved beyond zero. -or- Note's end is going to be moved beyond the note's fixed end."
  },
  "api/Melanchall.DryWetMidi.Tools.NotesQuantizer.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesQuantizer.html",
    "title": "Class NotesQuantizer | DryWetMIDI",
    "keywords": "Class NotesQuantizer Provides methods to quantize notes time. Inheritance Object Quantizer < Note , NotesQuantizingSettings > LengthedObjectsQuantizer < Note , NotesQuantizingSettings > NotesQuantizer Inherited Members LengthedObjectsQuantizer<Note, NotesQuantizingSettings>.Quantize(IEnumerable<Note>, IGrid, TempoMap, NotesQuantizingSettings) LengthedObjectsQuantizer<Note, NotesQuantizingSettings>.GetObjectTime(Note, NotesQuantizingSettings) LengthedObjectsQuantizer<Note, NotesQuantizingSettings>.SetObjectTime(Note, Int64, NotesQuantizingSettings) LengthedObjectsQuantizer<Note, NotesQuantizingSettings>.OnObjectQuantizing(Note, QuantizedTime, IGrid, TempoMap, NotesQuantizingSettings) Quantizer<Note, NotesQuantizingSettings>.QuantizeInternal(IEnumerable<Note>, IGrid, TempoMap, NotesQuantizingSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public class NotesQuantizer : LengthedObjectsQuantizer<Note, NotesQuantizingSettings>"
  },
  "api/Melanchall.DryWetMidi.Tools.NotesMergingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesMergingSettings.html",
    "title": "Class NotesMergingSettings | DryWetMIDI",
    "keywords": "Class NotesMergingSettings Settings according to which nearby notes should be merged. Inheritance Object NotesMergingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotesMergingSettings Properties OffVelocityMergingPolicy Gets or sets a policy which determines how OffVelocity of notes should be merged. The default value is Last . Declaration public VelocityMergingPolicy OffVelocityMergingPolicy { get; set; } Property Value Type Description VelocityMergingPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. Tolerance Gets or sets maximum distance between two notes to consider them as nearby. The default value is time span of zero length. Declaration public ITimeSpan Tolerance { get; set; } Property Value Type Description ITimeSpan Exceptions Type Condition ArgumentNullException value is null. VelocityMergingPolicy Gets or sets a policy which determines how Velocity of notes should be merged. The default value is First . Declaration public VelocityMergingPolicy VelocityMergingPolicy { get; set; } Property Value Type Description VelocityMergingPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Tools.NotesMergerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesMergerUtilities.html",
    "title": "Class NotesMergerUtilities | DryWetMIDI",
    "keywords": "Class NotesMergerUtilities Provides methods to merge nearby notes. Inheritance Object NotesMergerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class NotesMergerUtilities Methods MergeNotes(MidiFile, NotesMergingSettings, Predicate<Note>) Merges nearby notes in the specified MidiFile . Declaration public static void MergeNotes(this MidiFile midiFile, NotesMergingSettings settings = null, Predicate<Note> filter = null) Parameters Type Name Description MidiFile midiFile MidiFile to merge nearby notes in. NotesMergingSettings settings Settings according to which notes should be merged. Predicate < Note > filter Filter for notes to merge. Exceptions Type Condition ArgumentNullException midiFile is null. MergeNotes(TrackChunk, TempoMap, NotesMergingSettings, Predicate<Note>) Merges nearby notes in the specified TrackChunk . Declaration public static void MergeNotes(this TrackChunk trackChunk, TempoMap tempoMap, NotesMergingSettings settings = null, Predicate<Note> filter = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to merge nearby notes in. TempoMap tempoMap Tempo map used to calculate distances between notes. NotesMergingSettings settings Settings according to which notes should be merged. Predicate < Note > filter Filter for notes to merge. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- tempoMap is null. MergeNotes(IEnumerable<TrackChunk>, TempoMap, NotesMergingSettings, Predicate<Note>) Merges nearby notes in the specified collection of TrackChunk . Declaration public static void MergeNotes(this IEnumerable<TrackChunk> trackChunks, TempoMap tempoMap, NotesMergingSettings settings = null, Predicate<Note> filter = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to merge nearby notes in. TempoMap tempoMap Tempo map used to calculate distances between notes. NotesMergingSettings settings Settings according to which notes should be merged. Predicate < Note > filter Filter for notes to merge. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- tempoMap is null."
  },
  "api/Melanchall.DryWetMidi.Tools.NotesMerger.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesMerger.html",
    "title": "Class NotesMerger | DryWetMIDI",
    "keywords": "Class NotesMerger Provides methods to merge nearby notes. Inheritance Object NotesMerger Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotesMerger Methods Merge(IEnumerable<Note>, TempoMap, NotesMergingSettings) Merges nearby notes in the specified collection of notes. Declaration public IEnumerable<Note> Merge(IEnumerable<Note> notes, TempoMap tempoMap, NotesMergingSettings settings = null) Parameters Type Name Description IEnumerable < Note > notes Collection of notes to merge notes in. TempoMap tempoMap Tempo map used to calculate distances between notes. NotesMergingSettings settings Settings according to which notes should be merged. Returns Type Description IEnumerable < Note > Collection of notes which produced from the input one by merging nearby notes. Exceptions Type Condition ArgumentNullException notes is null."
  },
  "api/Melanchall.DryWetMidi.Tools.NoteNumberFormat.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NoteNumberFormat.html",
    "title": "Enum NoteNumberFormat | DryWetMIDI",
    "keywords": "Enum NoteNumberFormat Defines how a note's number is presented in CSV representation: either a number or a letter (for example, A#5). Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum NoteNumberFormat Fields Name Description Letter A note's number is presented as a letter. NoteNumber A note's number is presented as just a number."
  },
  "api/Melanchall.DryWetMidi.Tools.NoteFormat.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NoteFormat.html",
    "title": "Enum NoteFormat | DryWetMIDI",
    "keywords": "Enum NoteFormat The format which should be used to write notes to or read them from CSV. Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum NoteFormat Fields Name Description Events Notes are presented in CSV as Note On/Note Off events. Note Notes are presented in CSV as note objects."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedObjectUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedObjectUtilities.html",
    "title": "Class TimedObjectUtilities | DryWetMIDI",
    "keywords": "Class TimedObjectUtilities Extension methods for objects that implement the ITimedObject interface. Inheritance Object TimedObjectUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TimedObjectUtilities Methods AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap) Filters collection of ITimedObject to return objects at the specified time. Declaration public static IEnumerable<TObject> AtTime<TObject>(this IEnumerable<TObject> objects, ITimeSpan time, TempoMap tempoMap) where TObject : ITimedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. ITimeSpan time Time to filter objects by. TempoMap tempoMap Tempo map to filter objects by time . Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that are at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of timed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException objects is null. -or- time is null. -or- tempoMap is null. AtTime<TObject>(IEnumerable<TObject>, Int64) Filters collection of ITimedObject to return objects at the specified time. Declaration public static IEnumerable<TObject> AtTime<TObject>(this IEnumerable<TObject> objects, long time) where TObject : ITimedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. Int64 time Time to filter objects by. Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that are at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of timed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException objects is null. ArgumentOutOfRangeException time is negative. TimeAs(ITimedObject, TimeSpanType, TempoMap) Gets time of an ITimedObject as an instance of time span defined by the specified time span type. Declaration public static ITimeSpan TimeAs(this ITimedObject obj, TimeSpanType timeType, TempoMap tempoMap) Parameters Type Name Description ITimedObject obj Object to get time of. TimeSpanType timeType The type of time span to convert the time of obj to. TempoMap tempoMap Tempo map to calculate time of the obj . Returns Type Description ITimeSpan Time of the specified object as an instance of time span defined by the timeType . Exceptions Type Condition ArgumentNullException obj is null. -or- tempoMap is null. InvalidEnumArgumentException timeType specified an invalid value. TimeAs<TTime>(ITimedObject, TempoMap) Gets time of an ITimedObject as an instance of type that implements the ITimeSpan interface. Declaration public static TTime TimeAs<TTime>(this ITimedObject obj, TempoMap tempoMap) where TTime : ITimeSpan Parameters Type Name Description ITimedObject obj Object to get time of. TempoMap tempoMap Tempo map to calculate time of the obj . Returns Type Description TTime Time of the specified object as an instance of TTime . Type Parameters Name Description TTime Type that will represent the time of the obj . Exceptions Type Condition ArgumentNullException obj is null. -or- tempoMap is null. NotSupportedException TTime is not supported."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedObjectsCollection-1.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedObjectsCollection-1.html",
    "title": "Class TimedObjectsCollection<TObject> | DryWetMIDI",
    "keywords": "Class TimedObjectsCollection<TObject> Represents a basic collection of the ITimedObject . Inheritance Object TimedObjectsCollection<TObject> ChordsCollection NotesCollection TimedEventsCollection Implements IEnumerable <TObject> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class TimedObjectsCollection<TObject> : IEnumerable<TObject>, IEnumerable where TObject : ITimedObject Type Parameters Name Description TObject The type of elements in the collection. Fields _objects Internal list of timed objects. Declaration protected readonly List<TObject> _objects Field Value Type Description List <TObject> Methods Add(TObject[]) Adds objects to this collection. Declaration public void Add(params TObject[] objects) Parameters Type Name Description TObject[] objects Objects to add to the collection. Exceptions Type Condition ArgumentNullException objects is null. Add(IEnumerable<TObject>) Adds objects to this collection. Declaration public void Add(IEnumerable<TObject> objects) Parameters Type Name Description IEnumerable <TObject> objects Objects to add to the collection. Exceptions Type Condition ArgumentNullException objects is null. Clear() Removes all objects from this collection. Declaration public void Clear() GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public virtual IEnumerator<TObject> GetEnumerator() Returns Type Description IEnumerator <TObject> An enumerator that can be used to iterate through the collection. OnObjectsAdded(IEnumerable<TObject>) Performs an action when objects are added to the collection. Declaration protected virtual void OnObjectsAdded(IEnumerable<TObject> addedObjects) Parameters Type Name Description IEnumerable <TObject> addedObjects Collection of added objects. OnObjectsRemoved(IEnumerable<TObject>) Performs an action when objects are removed from the collection. Declaration protected virtual void OnObjectsRemoved(IEnumerable<TObject> removedObjects) Parameters Type Name Description IEnumerable <TObject> removedObjects Collection of removed objects. Remove(TObject[]) Removes objects from this collection. Declaration public void Remove(params TObject[] objects) Parameters Type Name Description TObject[] objects Objects to remove from the collection. Exceptions Type Condition ArgumentNullException objects is null. Remove(IEnumerable<TObject>) Removes objects from this collection. Declaration public void Remove(IEnumerable<TObject> objects) Parameters Type Name Description IEnumerable <TObject> objects Objects to remove from the collection. Exceptions Type Condition ArgumentNullException objects is null. RemoveAll(Predicate<TObject>) Removes all the objects that match the conditions defined by the specified predicate. Declaration public void RemoveAll(Predicate<TObject> match) Parameters Type Name Description Predicate <TObject> match The Predicate<T> delegate that defines the conditions of the objects to remove. Exceptions Type Condition ArgumentNullException match is null. Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through the collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An enumerator that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, Int64) TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedEventsManagingUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedEventsManagingUtilities.html",
    "title": "Class TimedEventsManagingUtilities | DryWetMIDI",
    "keywords": "Class TimedEventsManagingUtilities Extension methods for managing MIDI events by their absolute time. Inheritance Object TimedEventsManagingUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TimedEventsManagingUtilities Methods AddEvent(TimedEventsCollection, MidiEvent, ITimeSpan, TempoMap) Adds a MidiEvent into a TimedEventsCollection with the specified absolute time. Declaration public static void AddEvent(this TimedEventsCollection eventsCollection, MidiEvent midiEvent, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description TimedEventsCollection eventsCollection TimedEventsCollection to add an event into. MidiEvent midiEvent Event to add into the eventsCollection . ITimeSpan time Absolute time that will be assigned to the midiEvent when it will be placed into the eventsCollection . TempoMap tempoMap Tempo map used to place midiEvent into the eventsCollection with the specified time. Exceptions Type Condition ArgumentNullException eventsCollection is null. -or- midiEvent is null. -or- time is null. -or- tempoMap is null. AddEvent(TimedEventsCollection, MidiEvent, Int64) Adds a MidiEvent into a TimedEventsCollection with the specified absolute time. Declaration public static void AddEvent(this TimedEventsCollection eventsCollection, MidiEvent midiEvent, long time) Parameters Type Name Description TimedEventsCollection eventsCollection TimedEventsCollection to add an event into. MidiEvent midiEvent Event to add into the eventsCollection . Int64 time Absolute time that will be assigned to the midiEvent when it will be placed into the eventsCollection . Exceptions Type Condition ArgumentNullException eventsCollection is null. -or- midiEvent is null. ArgumentOutOfRangeException time is negative. AddTimedEvents(EventsCollection, IEnumerable<TimedEvent>) Adds collection of timed events to the specified EventsCollection . Declaration public static void AddTimedEvents(this EventsCollection eventsCollection, IEnumerable<TimedEvent> events) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to add timed events to. IEnumerable < TimedEvent > events Timed events to add to the eventsCollection . Exceptions Type Condition ArgumentNullException eventsCollection is null. -or- events is null. AddTimedEvents(TrackChunk, IEnumerable<TimedEvent>) Adds collection of timed events to the specified TrackChunk . Declaration public static void AddTimedEvents(this TrackChunk trackChunk, IEnumerable<TimedEvent> events) Parameters Type Name Description TrackChunk trackChunk TrackChunk to add timed events to. IEnumerable < TimedEvent > events Timed events to add to the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null. -or- events is null. GetTimedEvents(EventsCollection) Gets timed events contained in the specified EventsCollection . Declaration public static IEnumerable<TimedEvent> GetTimedEvents(this EventsCollection eventsCollection) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for events. Returns Type Description IEnumerable < TimedEvent > Collection of timed events contained in eventsCollection ordered by time. Exceptions Type Condition ArgumentNullException eventsCollection is null. GetTimedEvents(MidiFile) Gets timed events contained in the specified MidiFile . Declaration public static IEnumerable<TimedEvent> GetTimedEvents(this MidiFile file) Parameters Type Name Description MidiFile file MidiFile to search for events. Returns Type Description IEnumerable < TimedEvent > Collection of timed events contained in file ordered by time. Exceptions Type Condition ArgumentNullException file is null. GetTimedEvents(TrackChunk) Gets timed events contained in the specified TrackChunk . Declaration public static IEnumerable<TimedEvent> GetTimedEvents(this TrackChunk trackChunk) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for events. Returns Type Description IEnumerable < TimedEvent > Collection of timed events contained in trackChunk ordered by time. Exceptions Type Condition ArgumentNullException trackChunk is null. GetTimedEvents(IEnumerable<MidiEvent>) Gets collection of MidiEvent as a collection of timed events. Declaration public static IEnumerable<TimedEvent> GetTimedEvents(this IEnumerable<MidiEvent> events) Parameters Type Name Description IEnumerable < MidiEvent > events Collection of MidiEvent to get timed events for. Returns Type Description IEnumerable < TimedEvent > Collection of timed events contained in events ordered by time. Exceptions Type Condition ArgumentNullException events is null. GetTimedEvents(IEnumerable<TrackChunk>) Gets timed events contained in the specified collection of TrackChunk . Declaration public static IEnumerable<TimedEvent> GetTimedEvents(this IEnumerable<TrackChunk> trackChunks) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Track chunks to search for events. Returns Type Description IEnumerable < TimedEvent > Collection of timed events contained in trackChunks ordered by time. Exceptions Type Condition ArgumentNullException trackChunks is null. ManageTimedEvents(EventsCollection, Comparison<MidiEvent>) Creates an instance of the TimedEventsManager initializing it with the specified events collection and comparison delegate for events that have same time. Declaration public static TimedEventsManager ManageTimedEvents(this EventsCollection eventsCollection, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds events to manage. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Returns Type Description TimedEventsManager An instance of the TimedEventsManager that can be used to manage events represented by the eventsCollection . Exceptions Type Condition ArgumentNullException eventsCollection is null. ManageTimedEvents(TrackChunk, Comparison<MidiEvent>) Creates an instance of the TimedEventsManager initializing it with the events collection of the specified track chunk and comparison delegate for events that have same time. Declaration public static TimedEventsManager ManageTimedEvents(this TrackChunk trackChunk, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk that holds events to manage. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Returns Type Description TimedEventsManager An instance of the TimedEventsManager that can be used to manage events represented by the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null. ProcessTimedEvents(EventsCollection, Action<TimedEvent>, Predicate<TimedEvent>) Performs the specified action on each TimedEvent contained in the EventsCollection . Declaration public static void ProcessTimedEvents(this EventsCollection eventsCollection, Action<TimedEvent> action, Predicate<TimedEvent> match = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the eventsCollection . Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to process. Exceptions Type Condition ArgumentNullException eventsCollection is null. -or- action is null. ProcessTimedEvents(MidiFile, Action<TimedEvent>, Predicate<TimedEvent>) Performs the specified action on each TimedEvent contained in the MidiFile . Declaration public static void ProcessTimedEvents(this MidiFile file, Action<TimedEvent> action, Predicate<TimedEvent> match = null) Parameters Type Name Description MidiFile file MidiFile to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the file . Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to process. Exceptions Type Condition ArgumentNullException file is null. -or- action is null. ProcessTimedEvents(TrackChunk, Action<TimedEvent>, Predicate<TimedEvent>) Performs the specified action on each TimedEvent contained in the TrackChunk . Declaration public static void ProcessTimedEvents(this TrackChunk trackChunk, Action<TimedEvent> action, Predicate<TimedEvent> match = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the trackChunk . Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to process. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- action is null. ProcessTimedEvents(IEnumerable<TrackChunk>, Action<TimedEvent>, Predicate<TimedEvent>) Performs the specified action on each TimedEvent contained in the collection of TrackChunk . Declaration public static void ProcessTimedEvents(this IEnumerable<TrackChunk> trackChunks, Action<TimedEvent> action, Predicate<TimedEvent> match = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the trackChunks . Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to process. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- action is null. RemoveTimedEvents(EventsCollection, Predicate<TimedEvent>) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static void RemoveTimedEvents(this EventsCollection eventsCollection, Predicate<TimedEvent> match = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for events to remove. Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to remove. Exceptions Type Condition ArgumentNullException eventsCollection is null. RemoveTimedEvents(MidiFile, Predicate<TimedEvent>) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static void RemoveTimedEvents(this MidiFile file, Predicate<TimedEvent> match = null) Parameters Type Name Description MidiFile file MidiFile to search for events to remove. Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to remove. Exceptions Type Condition ArgumentNullException file is null. RemoveTimedEvents(TrackChunk, Predicate<TimedEvent>) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static void RemoveTimedEvents(this TrackChunk trackChunk, Predicate<TimedEvent> match = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for events to remove. Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to remove. Exceptions Type Condition ArgumentNullException trackChunk is null. RemoveTimedEvents(IEnumerable<TrackChunk>, Predicate<TimedEvent>) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static void RemoveTimedEvents(this IEnumerable<TrackChunk> trackChunks, Predicate<TimedEvent> match = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for events to remove. Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to remove. Exceptions Type Condition ArgumentNullException trackChunks is null. SetTime(TimedEvent, ITimeSpan, TempoMap) Sets time of the specified timed event. Declaration public static TimedEvent SetTime(this TimedEvent timedEvent, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description TimedEvent timedEvent Timed event to set time to. ITimeSpan time Time to set to timedEvent . TempoMap tempoMap Tempo map that will be used for time conversion. Returns Type Description TimedEvent An input timedEvent with new time. Exceptions Type Condition ArgumentNullException timedEvent is null. -or- time is null. -or- tempoMap is null. ToFile(IEnumerable<TimedEvent>) Creates a MIDI file with the specified timed events. Declaration public static MidiFile ToFile(this IEnumerable<TimedEvent> events) Parameters Type Name Description IEnumerable < TimedEvent > events Collection of timed events to create a MIDI file. Returns Type Description MidiFile MidiFile containing the specified timed events. Exceptions Type Condition ArgumentNullException events is null. ToTrackChunk(IEnumerable<TimedEvent>) Creates a track chunk with the specified timed events. Declaration public static TrackChunk ToTrackChunk(this IEnumerable<TimedEvent> events) Parameters Type Name Description IEnumerable < TimedEvent > events Collection of timed events to create a track chunk. Returns Type Description TrackChunk TrackChunk containing the specified timed events. Exceptions Type Condition ArgumentNullException events is null."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedEventsManager.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedEventsManager.html",
    "title": "Class TimedEventsManager | DryWetMIDI",
    "keywords": "Class TimedEventsManager Provides a way to manage events of a MIDI file by their absolute time. Inheritance Object TimedEventsManager Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimedEventsManager : IDisposable Remarks To start manage events you need to get an instance of the TimedEventsManager . To finish managing you need to call the SaveChanges() or Dispose() method. Since the manager implements IDisposable it is recommended to manage events within using block. Constructors TimedEventsManager(EventsCollection, Comparison<MidiEvent>) Initializes a new instance of the TimedEventsManager with the specified events collection and comparison delegate for events that have same time. Declaration public TimedEventsManager(EventsCollection eventsCollection, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds events to manage. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Remarks If the sameTimeEventsComparison is not specified events with the same time will be placed into the underlying events collection in order of adding them through the manager. If you want to specify custom order of such events you need to specify appropriate comparison delegate. Exceptions Type Condition ArgumentNullException eventsCollection is null. Properties Events Gets current collection of timed events reflecting all changes made by the current TimedEventsManager . Declaration public TimedEventsCollection Events { get; } Property Value Type Description TimedEventsCollection Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() SaveChanges() Saves all events that were managed with the current TimedEventsManager updating underlying events collection. Declaration public void SaveChanges() Remarks This method will rewrite content of the events collection was used to construct the current TimedEventsManager with events were managed by this manager. Also all delta-times of wrapped events will be recalculated according to the Time of event wrappers. Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedEventsCollection.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedEventsCollection.html",
    "title": "Class TimedEventsCollection | DryWetMIDI",
    "keywords": "Class TimedEventsCollection Collection of the TimedEvent objects that wrap MIDI events providing a way to manage their absolute time. Inheritance Object TimedObjectsCollection < TimedEvent > TimedEventsCollection Implements IEnumerable < TimedEvent > IEnumerable Inherited Members TimedObjectsCollection<TimedEvent>._objects TimedObjectsCollection<TimedEvent>.Add(IEnumerable<TimedEvent>) TimedObjectsCollection<TimedEvent>.Add(TimedEvent[]) TimedObjectsCollection<TimedEvent>.Remove(IEnumerable<TimedEvent>) TimedObjectsCollection<TimedEvent>.Remove(TimedEvent[]) TimedObjectsCollection<TimedEvent>.RemoveAll(Predicate<TimedEvent>) TimedObjectsCollection<TimedEvent>.Clear() TimedObjectsCollection<TimedEvent>.OnObjectsAdded(IEnumerable<TimedEvent>) TimedObjectsCollection<TimedEvent>.OnObjectsRemoved(IEnumerable<TimedEvent>) TimedObjectsCollection<TimedEvent>.IEnumerable.GetEnumerator() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimedEventsCollection : TimedObjectsCollection<TimedEvent>, IEnumerable<TimedEvent>, IEnumerable Remarks TimedEventsCollection can be enumerated returning timed events in order of increasing Time . Methods GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<TimedEvent> GetEnumerator() Returns Type Description IEnumerator < TimedEvent > An enumerator that can be used to iterate through the collection. Overrides Melanchall.DryWetMidi.Interaction.TimedObjectsCollection<Melanchall.DryWetMidi.Interaction.TimedEvent>.GetEnumerator() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods GetTimedEventsAndNotesUtilities.GetTimedEventsAndNotes(IEnumerable<TimedEvent>) TimedEventsManagingUtilities.AddEvent(TimedEventsCollection, MidiEvent, Int64) TimedEventsManagingUtilities.AddEvent(TimedEventsCollection, MidiEvent, ITimeSpan, TempoMap) TimedEventsManagingUtilities.ToTrackChunk(IEnumerable<TimedEvent>) TimedEventsManagingUtilities.ToFile(IEnumerable<TimedEvent>) TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, Int64) TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedEvent.html",
    "title": "Class TimedEvent | DryWetMIDI",
    "keywords": "Class TimedEvent Represents wrapper for the MidiEvent that provides absolute time of an event. Inheritance Object TimedEvent Implements ITimedObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimedEvent : ITimedObject Constructors TimedEvent(MidiEvent) Initializes a new instance of the TimedEvent with the specified MIDI event. Declaration public TimedEvent(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent An event to wrap into TimedEvent . TimedEvent(MidiEvent, Int64) Initializes a new instance of the TimedEvent with the specified MIDI event and absolute time. Declaration public TimedEvent(MidiEvent midiEvent, long time) Parameters Type Name Description MidiEvent midiEvent An event to wrap into TimedEvent . Int64 time Absolute time of an event in units defined by the time division of a MIDI file. Properties Event Gets wrapped MIDI event. Declaration public MidiEvent Event { get; } Property Value Type Description MidiEvent Time Gets absolute time of the event in units defined by the time division of a MIDI file. Declaration public long Time { get; set; } Property Value Type Description Int64 Exceptions Type Condition ArgumentOutOfRangeException Value is negative. Methods Clone() Clones timed event by creating a copy of it. Declaration public TimedEvent Clone() Returns Type Description TimedEvent Copy of the timed event. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Implements ITimedObject Extension Methods TimedEventsManagingUtilities.SetTime(TimedEvent, ITimeSpan, TempoMap) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeConverter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeConverter.html",
    "title": "Class TimeConverter | DryWetMIDI",
    "keywords": "Class TimeConverter Provides a way to convert the time of an object from one representation to another. Inheritance Object TimeConverter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TimeConverter Methods ConvertFrom(ITimeSpan, TempoMap) Converts time from the specified time type to Int64 . Declaration public static long ConvertFrom(ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan time Time to convert. TempoMap tempoMap Tempo map used to convert time . Returns Type Description Int64 Time as Int64 . Exceptions Type Condition ArgumentNullException time is null. -or- tempoMap is null. ConvertTo(ITimeSpan, TimeSpanType, TempoMap) Converts time from one time type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan time, TimeSpanType timeType, TempoMap tempoMap) Parameters Type Name Description ITimeSpan time Time to convert. TimeSpanType timeType Type that will represent the time of an object. TempoMap tempoMap Tempo map used to convert time . Returns Type Description ITimeSpan Time as an instance of time span defined by timeType . Exceptions Type Condition ArgumentNullException time is null. -or- tempoMap is null. InvalidEnumArgumentException timeType specified an invalid value. ConvertTo(ITimeSpan, Type, TempoMap) Converts time from one time type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan time, Type timeType, TempoMap tempoMap) Parameters Type Name Description ITimeSpan time Time to convert. Type timeType Type to convert time to. TempoMap tempoMap Tempo map used to convert time . Returns Type Description ITimeSpan Time as an instance of timeType . Exceptions Type Condition ArgumentNullException time is null. -or- timeType is null. -or- tempoMap is null. NotSupportedException timeType is not supported. ConvertTo(Int64, TimeSpanType, TempoMap) Converts time from Int64 to the specified time type. Declaration public static ITimeSpan ConvertTo(long time, TimeSpanType timeType, TempoMap tempoMap) Parameters Type Name Description Int64 time Time to convert. TimeSpanType timeType Type that will represent the time of an object. TempoMap tempoMap Tempo map used to convert time . Returns Type Description ITimeSpan Time as an instance of time span defined by timeType . Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException tempoMap is null. InvalidEnumArgumentException timeType specified an invalid value. ConvertTo<TTimeSpan>(ITimeSpan, TempoMap) Converts time from one time type to another one. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(ITimeSpan time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description ITimeSpan time Time to convert. TempoMap tempoMap Tempo map used to convert time . Returns Type Description TTimeSpan Time as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the time of an object. Exceptions Type Condition ArgumentNullException time is null. -or- tempoMap is null. NotSupportedException TTimeSpan is not supported. ConvertTo<TTimeSpan>(Int64, TempoMap) Converts time from Int64 to the specified time type. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(long time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description Int64 time Time to convert. TempoMap tempoMap Tempo map used to convert time . Returns Type Description TTimeSpan Time as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the time of an object. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException tempoMap is null. NotSupportedException TTimeSpan is not supported."
  },
  "api/Melanchall.DryWetMidi.Interaction.TempoMapManagingUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TempoMapManagingUtilities.html",
    "title": "Class TempoMapManagingUtilities | DryWetMIDI",
    "keywords": "Class TempoMapManagingUtilities Extension methods for managing tempo map. Inheritance Object TempoMapManagingUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TempoMapManagingUtilities Methods GetTempoMap(MidiFile) Gets tempo map of the specified MIDI file. Declaration public static TempoMap GetTempoMap(this MidiFile file) Parameters Type Name Description MidiFile file MIDI file to get tempo map of. Returns Type Description TempoMap Tempo map of the file . Exceptions Type Condition ArgumentNullException file is null. GetTempoMap(IEnumerable<EventsCollection>, TimeDivision) Gets tempo map represented by the specified events collections and time division. Declaration public static TempoMap GetTempoMap(this IEnumerable<EventsCollection> eventsCollections, TimeDivision timeDivision) Parameters Type Name Description IEnumerable < EventsCollection > eventsCollections Collection of EventsCollection which hold events that represent tempo map of a MIDI file. TimeDivision timeDivision MIDI file time division which specifies the meaning of the time used by events of the file. Returns Type Description TempoMap Tempo map represented by the eventsCollections and timeDivision . Exceptions Type Condition ArgumentNullException eventsCollections is null. -or- timeDivision is null. GetTempoMap(IEnumerable<TrackChunk>, TimeDivision) Gets tempo map represented by the specified time division and events collections of the specified track chunks. Declaration public static TempoMap GetTempoMap(this IEnumerable<TrackChunk> trackChunks, TimeDivision timeDivision) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk which hold events that represent tempo map of a MIDI file. TimeDivision timeDivision MIDI file time division which specifies the meaning of the time used by events of the file. Returns Type Description TempoMap Tempo map represented by the trackChunks and timeDivision . Exceptions Type Condition ArgumentNullException trackChunks is null. -or- timeDivision is null. ManageTempoMap(MidiFile) Creates an instance of the TempoMapManager initializing it with the events collections of the specified MIDI file. Declaration public static TempoMapManager ManageTempoMap(this MidiFile file) Parameters Type Name Description MidiFile file MIDI file to manage tempo map of. Returns Type Description TempoMapManager An instance of the TempoMapManager that can be used to manage tempo map of the file . Exceptions Type Condition ArgumentNullException file is null. ManageTempoMap(IEnumerable<EventsCollection>, TimeDivision) Creates an instance of the TempoMapManager initializing it with the specified events collections and time division. Declaration public static TempoMapManager ManageTempoMap(this IEnumerable<EventsCollection> eventsCollections, TimeDivision timeDivision) Parameters Type Name Description IEnumerable < EventsCollection > eventsCollections Collection of EventsCollection which hold events that represent tempo map of a MIDI file. TimeDivision timeDivision MIDI file time division which specifies the meaning of the time used by events of the file. Returns Type Description TempoMapManager An instance of the TempoMapManager that can be used to manage tempo map represented by the eventsCollections and timeDivision . Exceptions Type Condition ArgumentNullException eventsCollections is null. -or- timeDivision is null. ManageTempoMap(IEnumerable<TrackChunk>, TimeDivision) Creates an instance of the TempoMapManager initializing it with the specified time division and events collections of the specified track chunks. Declaration public static TempoMapManager ManageTempoMap(this IEnumerable<TrackChunk> trackChunks, TimeDivision timeDivision) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk which hold events that represent tempo map of a MIDI file. TimeDivision timeDivision MIDI file time division which specifies the meaning of the time used by events of the file. Returns Type Description TempoMapManager An instance of the TempoMapManager that can be used to manage tempo map represented by the trackChunks and timeDivision . Exceptions Type Condition ArgumentNullException trackChunks is null. -or- timeDivision is null. ReplaceTempoMap(MidiFile, TempoMap) Replaces tempo map contained in the specified MidiFile with another one. Declaration public static void ReplaceTempoMap(this MidiFile file, TempoMap tempoMap) Parameters Type Name Description MidiFile file MidiFile holding a tempo map to replace. TempoMap tempoMap Tempo map to replace the one contained in the file . Exceptions Type Condition ArgumentNullException file is null. -or- tempoMap is null. ArgumentException file is empty. ReplaceTempoMap(IEnumerable<EventsCollection>, TempoMap) Replaces tempo map contained in the specified collection of the EventsCollection with another one. Declaration public static void ReplaceTempoMap(this IEnumerable<EventsCollection> eventsCollections, TempoMap tempoMap) Parameters Type Name Description IEnumerable < EventsCollection > eventsCollections Collection of the EventsCollection holding a tempo map to replace. TempoMap tempoMap Tempo map to replace the one contained in the eventsCollections . Exceptions Type Condition ArgumentNullException eventsCollections is null. -or- tempoMap is null. ArgumentException eventsCollections is empty. ReplaceTempoMap(IEnumerable<TrackChunk>, TempoMap) Replaces tempo map contained in the specified collection of the TrackChunk with another one. Declaration public static void ReplaceTempoMap(this IEnumerable<TrackChunk> trackChunks, TempoMap tempoMap) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of the TrackChunk holding a tempo map to replace. TempoMap tempoMap Tempo map to replace the one contained in the trackChunks . Exceptions Type Condition ArgumentNullException trackChunks is null. -or- tempoMap is null. ArgumentException trackChunks is empty."
  },
  "api/Melanchall.DryWetMidi.Interaction.TempoMapManager.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TempoMapManager.html",
    "title": "Class TempoMapManager | DryWetMIDI",
    "keywords": "Class TempoMapManager Provides a way to manage tempo map of a MIDI file. Inheritance Object TempoMapManager Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TempoMapManager : IDisposable Remarks This manager is wrapper for the TimedEventsManager that provides easy manipulation of specific MIDI events: SetTempoEvent and TimeSignature . Also it provides TempoMap that can be used to calculate custom representations of time and length of an object. To start manage tempo map you need to get an instance of the TempoMapManager . To finish managing you need to call the SaveChanges() or Dispose() method. Since the manager implements IDisposable it is recommended to manage tempo map within using block. Constructors TempoMapManager() Initializes a new instance of the TempoMapManager that can be used to manage new tempo map with the default time division (96 ticks per quarter note). Declaration public TempoMapManager() TempoMapManager(TimeDivision) Initializes a new instance of the TempoMapManager with the specified time division. Declaration public TempoMapManager(TimeDivision timeDivision) Parameters Type Name Description TimeDivision timeDivision Time division of a new tempo that will be managed by this manager. Exceptions Type Condition ArgumentNullException timeDivision is null. TempoMapManager(TimeDivision, IEnumerable<EventsCollection>) Initializes a new instance of the TempoMapManager with the specified time division and events collections. Declaration public TempoMapManager(TimeDivision timeDivision, IEnumerable<EventsCollection> eventsCollections) Parameters Type Name Description TimeDivision timeDivision MIDI file time division which specifies the meaning of the time used by events of the file. IEnumerable < EventsCollection > eventsCollections Collection of EventsCollection which hold events that represent tempo map of a MIDI file. Exceptions Type Condition ArgumentNullException timeDivision is null. -or- eventsCollections is null. ArgumentException eventsCollections is empty. Properties TempoMap Gets current tempo map built by the TempoMapManager . Declaration public TempoMap TempoMap { get; } Property Value Type Description TempoMap Methods ClearTempo(ITimeSpan) Removes all changes of tempo that occured since the specified time. Declaration public void ClearTempo(ITimeSpan startTime) Parameters Type Name Description ITimeSpan startTime Time to remove changes of tempo since. Exceptions Type Condition ArgumentNullException startTime is null. ClearTempo(ITimeSpan, ITimeSpan) Removes all changes of tempo that occured between the specified times. Declaration public void ClearTempo(ITimeSpan startTime, ITimeSpan endTime) Parameters Type Name Description ITimeSpan startTime Start of time range to remove changes of tempo in. ITimeSpan endTime End of time range to remove changes of tempo in. Exceptions Type Condition ArgumentNullException startTime is null. -or- endTime is null. ClearTempo(Int64) Removes all changes of tempo that occured since the specified time. Declaration public void ClearTempo(long startTime) Parameters Type Name Description Int64 startTime Time to remove changes of tempo since. Exceptions Type Condition ArgumentOutOfRangeException startTime is negative. ClearTempo(Int64, Int64) Removes all changes of tempo that occured between the specified times. Declaration public void ClearTempo(long startTime, long endTime) Parameters Type Name Description Int64 startTime Start of time range to remove changes of tempo in. Int64 endTime End of time range to remove changes of tempo in. Exceptions Type Condition ArgumentOutOfRangeException startTime is negative. -or- endTime is negative. ClearTempoMap() Clears current tempo map removing all changes of tempo and time signature. Declaration public void ClearTempoMap() ClearTimeSignature(ITimeSpan) Removes all changes of time signature that occured since the specified time. Declaration public void ClearTimeSignature(ITimeSpan startTime) Parameters Type Name Description ITimeSpan startTime Time to remove changes of time signature since. Exceptions Type Condition ArgumentNullException startTime is null. ClearTimeSignature(ITimeSpan, ITimeSpan) Removes all changes of time signature that occured between the specified times. Declaration public void ClearTimeSignature(ITimeSpan startTime, ITimeSpan endTime) Parameters Type Name Description ITimeSpan startTime Start of time range to remove changes of time signature in. ITimeSpan endTime End of time range to remove changes of time signature in. Exceptions Type Condition ArgumentNullException startTime is null. -or- endTime is null. ClearTimeSignature(Int64) Removes all changes of time signature that occured since the specified time. Declaration public void ClearTimeSignature(long startTime) Parameters Type Name Description Int64 startTime Time to remove changes of time signature since. Exceptions Type Condition ArgumentOutOfRangeException startTime is negative. ClearTimeSignature(Int64, Int64) Removes all changes of time signature that occured between the specified times. Declaration public void ClearTimeSignature(long startTime, long endTime) Parameters Type Name Description Int64 startTime Start of time range to remove changes of time signature in. Int64 endTime End of time range to remove changes of time signature in. Exceptions Type Condition ArgumentOutOfRangeException startTime is negative. -or- endTime is negative. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() ReplaceTempoMap(TempoMap) Replaces current tempo map with the specified one. Declaration public void ReplaceTempoMap(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map to replace the current one. Exceptions Type Condition ArgumentNullException tempoMap is null. SaveChanges() Saves tempo map changes that were made with the TempoMapManager updating underlying events collections. Declaration public void SaveChanges() Remarks This method will rewrite content of all events collections were used to construct the current TempoMapManager with events were managed by underlying TimedEventsManager objects of this manager. Also all delta-times of wrapped events will be recalculated according to the Time of event wrappers. SetTempo(ITimeSpan, Tempo) Sets new tempo that will last from the specified time until next change of tempo. Declaration public void SetTempo(ITimeSpan time, Tempo tempo) Parameters Type Name Description ITimeSpan time Time to set the new tempo at. Tempo tempo New tempo that will last from the specified time until next change of tempo. Exceptions Type Condition ArgumentNullException time is null. -or- tempo is null. SetTempo(Int64, Tempo) Sets new tempo that will last from the specified time until next change of tempo. Declaration public void SetTempo(long time, Tempo tempo) Parameters Type Name Description Int64 time Time to set the new tempo at. Tempo tempo New tempo that will last from the specified time until next change of tempo. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException tempo is null. SetTimeSignature(ITimeSpan, TimeSignature) Sets new time signature that will last from the specified time until next change of time signature. Declaration public void SetTimeSignature(ITimeSpan time, TimeSignature timeSignature) Parameters Type Name Description ITimeSpan time Time to set the new time signature at. TimeSignature timeSignature New time signature that will last from the specified time until next change of time signature. Exceptions Type Condition ArgumentNullException time is null. -or- timeSignature is null. SetTimeSignature(Int64, TimeSignature) Sets new time signature that will last from the specified time until next change of time signature. Declaration public void SetTimeSignature(long time, TimeSignature timeSignature) Parameters Type Name Description Int64 time Time to set the new time signature at. TimeSignature timeSignature New time signature that will last from the specified time until next change of time signature. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException timeSignature is null. Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Interaction.TempoMap.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TempoMap.html",
    "title": "Class TempoMap | DryWetMIDI",
    "keywords": "Class TempoMap Represents a tempo map of a MIDI file. Inheritance Object TempoMap Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TempoMap Fields Default The default tempo map which uses 4/4 time signature and tempo of 500,000 microseconds per quarter note. Declaration public static readonly TempoMap Default Field Value Type Description TempoMap Properties Tempo Gets an object that holds changes of the tempo through the time. Declaration public ValueLine<Tempo> Tempo { get; } Property Value Type Description ValueLine < Tempo > TimeDivision Gets the time division used by a tempo map. Declaration public TimeDivision TimeDivision { get; } Property Value Type Description TimeDivision TimeSignature Gets an object that holds changes of the time signature through the time. Declaration public ValueLine<TimeSignature> TimeSignature { get; } Property Value Type Description ValueLine < TimeSignature > Methods Clone() Clones the current TempoMap . Declaration public TempoMap Clone() Returns Type Description TempoMap An instance of the TempoMap which is a clone of the current one. Create(TimeDivision) Creates an instance of the TempoMap with the specified time division using default tempo (120 BPM) and default time signature (4/4). Declaration public static TempoMap Create(TimeDivision timeDivision) Parameters Type Name Description TimeDivision timeDivision Time division of the tempo map. Returns Type Description TempoMap TempoMap with the specified time division. Exceptions Type Condition ArgumentNullException timeDivision is null. Create(TimeDivision, Tempo) Creates an instance of the TempoMap with the specified time division and tempo using default time signature (4/4). Declaration public static TempoMap Create(TimeDivision timeDivision, Tempo tempo) Parameters Type Name Description TimeDivision timeDivision Time division of the tempo map. Tempo tempo Tempo of the tempo map. Returns Type Description TempoMap TempoMap with the specified time division and tempo. Exceptions Type Condition ArgumentNullException timeDivision is null. -or- tempo is null. Create(TimeDivision, Tempo, TimeSignature) Creates an instance of the TempoMap with the specified time division, tempo and time signature. Declaration public static TempoMap Create(TimeDivision timeDivision, Tempo tempo, TimeSignature timeSignature) Parameters Type Name Description TimeDivision timeDivision Time division of the tempo map. Tempo tempo Tempo of the tempo map. TimeSignature timeSignature Time signature of the tempo map. Returns Type Description TempoMap TempoMap with the specified time division, tempoand time signature. Exceptions Type Condition ArgumentNullException timeDivision is null. -or- tempo is null. -or- timeSignature is null. Create(TimeDivision, TimeSignature) Creates an instance of the TempoMap with the specified time division and time signature using default tempo (120 BPM). Declaration public static TempoMap Create(TimeDivision timeDivision, TimeSignature timeSignature) Parameters Type Name Description TimeDivision timeDivision Time division of the tempo map. TimeSignature timeSignature Time signature of the tempo map. Returns Type Description TempoMap TempoMap with the specified time division and time signature. Exceptions Type Condition ArgumentNullException timeDivision is null. -or- timeSignature is null. Create(Tempo) Creates an instance of the TempoMap with the specified tempo using default time division (96 ticks per quarter note). Declaration public static TempoMap Create(Tempo tempo) Parameters Type Name Description Tempo tempo Tempo of the tempo map. Returns Type Description TempoMap TempoMap with the specified tempo. Exceptions Type Condition ArgumentNullException tempo is null. Create(Tempo, TimeSignature) Creates an instance of the TempoMap with the specified tempo and time signature using default time division (96 ticks per quarter note). Declaration public static TempoMap Create(Tempo tempo, TimeSignature timeSignature) Parameters Type Name Description Tempo tempo Tempo of the tempo map. TimeSignature timeSignature Time signature of the tempo map. Returns Type Description TempoMap TempoMap with the specified tempo and time signature. Exceptions Type Condition ArgumentNullException tempo is null. -or- timeSignature is null. Create(TimeSignature) Creates an instance of the TempoMap with the specified time signature using default time division (96 ticks per quarter note). Declaration public static TempoMap Create(TimeSignature timeSignature) Parameters Type Name Description TimeSignature timeSignature Time signature of the tempo map. Returns Type Description TempoMap TempoMap with the specified time signature. Exceptions Type Condition ArgumentNullException timeSignature is null."
  },
  "api/Melanchall.DryWetMidi.Interaction.MidiFileUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MidiFileUtilities.html",
    "title": "Class MidiFileUtilities | DryWetMIDI",
    "keywords": "Class MidiFileUtilities Utility methods for MidiFile . Inheritance Object MidiFileUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class MidiFileUtilities Methods GetDuration(MidiFile, TimeSpanType) Gets the duration of the specified MidiFile . Duration is defined by the time of last MIDI event of the file. Declaration public static ITimeSpan GetDuration(this MidiFile midiFile, TimeSpanType durationType) Parameters Type Name Description MidiFile midiFile MidiFile to get duration of. TimeSpanType durationType The type of time span representing the duration of midiFile . Returns Type Description ITimeSpan An implementation of ITimeSpan representing duration of midiFile . Exceptions Type Condition ArgumentNullException midiFile is null. InvalidEnumArgumentException durationType specified an invalid value. GetDuration<TTimeSpan>(MidiFile) Gets the duration of the specified MidiFile . Duration is defined by the time of last MIDI event of the file. Declaration public static TTimeSpan GetDuration<TTimeSpan>(this MidiFile midiFile) where TTimeSpan : class, ITimeSpan Parameters Type Name Description MidiFile midiFile MidiFile to get duration of. Returns Type Description TTimeSpan An instance of TTimeSpan representing duration of midiFile . Type Parameters Name Description TTimeSpan The type of time span representing the duration of midiFile . Exceptions Type Condition ArgumentNullException midiFile is null. NotSupportedException TTimeSpan is not supported. IsEmpty(MidiFile) Checks whether the specified MidiFile is empty or not. MidiFile is empty when it doesn't contain MIDI events. Declaration public static bool IsEmpty(this MidiFile midiFile) Parameters Type Name Description MidiFile midiFile MidiFile to check emptiness of. Returns Type Description Boolean A value indicating whether midiFile is empty or not. Exceptions Type Condition ArgumentNullException midiFile is null. Resize(MidiFile, ITimeSpan) Resizes MidiFile to the specified length. Declaration public static void Resize(this MidiFile midiFile, ITimeSpan length) Parameters Type Name Description MidiFile midiFile MidiFile to resize. ITimeSpan length New length of the midiFile . Exceptions Type Condition ArgumentNullException midiFile is null. -or- length is null. Resize(MidiFile, Double) Resizes MidiFile by the specified ratio. Declaration public static void Resize(this MidiFile midiFile, double ratio) Parameters Type Name Description MidiFile midiFile MidiFile to resize. Double ratio Ratio to resize midiFile by. Exceptions Type Condition ArgumentNullException midiFile is null. ArgumentOutOfRangeException ratio is negative. ShiftEvents(MidiFile, ITimeSpan) Shifts events forward inside MidiFile by the specified distance. Declaration public static void ShiftEvents(this MidiFile midiFile, ITimeSpan distance) Parameters Type Name Description MidiFile midiFile MidiFile containing events to shift. ITimeSpan distance Distance to shift events by. Exceptions Type Condition ArgumentNullException midiFile is null. -or- distance is null."
  },
  "api/Melanchall.DryWetMidi.Interaction.MetricTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MetricTimeSpan.html",
    "title": "Class MetricTimeSpan | DryWetMIDI",
    "keywords": "Class MetricTimeSpan Represents metric time span which represents hours, minutes and seconds. Inheritance Object MetricTimeSpan Implements ITimeSpan IComparable IComparable < MetricTimeSpan > IEquatable < MetricTimeSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MetricTimeSpan : ITimeSpan, IComparable, IComparable<MetricTimeSpan>, IEquatable<MetricTimeSpan> Constructors MetricTimeSpan() Initializes a new instance of the MetricTimeSpan . Declaration public MetricTimeSpan() MetricTimeSpan(Int32, Int32, Int32) Initializes a new instance of the MetricTimeSpan with the specified numbers of hours, minutes and seconds. Declaration public MetricTimeSpan(int hours, int minutes, int seconds) Parameters Type Name Description Int32 hours Number of hours. Int32 minutes Number of minutes. Int32 seconds Number of seconds. Exceptions Type Condition ArgumentOutOfRangeException hours is negative. -or- minutes is negative. -or- seconds is negative. MetricTimeSpan(Int32, Int32, Int32, Int32) Initializes a new instance of the MetricTimeSpan with the specified numbers of hours, minutes, seconds and milliseconds. Declaration public MetricTimeSpan(int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description Int32 hours Number of hours. Int32 minutes Number of minutes. Int32 seconds Number of seconds. Int32 milliseconds Number of milliseconds. Exceptions Type Condition ArgumentOutOfRangeException hours is negative. -or- minutes is negative. -or- seconds is negative. -or- milliseconds is negative. MetricTimeSpan(Int64) Initializes a new instance of the MetricTimeSpan with the specified number of microseconds. Declaration public MetricTimeSpan(long totalMicroseconds) Parameters Type Name Description Int64 totalMicroseconds Number of microseconds which represents metric time span. Exceptions Type Condition ArgumentOutOfRangeException totalMicroseconds is negative. MetricTimeSpan(TimeSpan) Initializes a new instance of the MetricTimeSpan with the specified TimeSpan object. Declaration public MetricTimeSpan(TimeSpan timeSpan) Parameters Type Name Description TimeSpan timeSpan Time interval to initialize the MetricTimeSpan . Properties Hours Gets the hours component of the time represented by the current MetricTimeSpan . Declaration public int Hours { get; } Property Value Type Description Int32 Milliseconds Gets the milliseconds component of the time represented by the current MetricTimeSpan . Declaration public int Milliseconds { get; } Property Value Type Description Int32 Minutes Gets the minutes component of the time represented by the current MetricTimeSpan . Declaration public int Minutes { get; } Property Value Type Description Int32 Seconds Gets the seconds component of the time represented by the current MetricTimeSpan . Declaration public int Seconds { get; } Property Value Type Description Int32 TotalMicroseconds Gets the value of the current MetricTimeSpan expressed in microseconds. Declaration public long TotalMicroseconds { get; } Property Value Type Description Int64 Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(MetricTimeSpan) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(MetricTimeSpan other) Parameters Type Name Description MetricTimeSpan other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions Type Condition ArgumentException obj is not the same type as this instance. Divide(MetricTimeSpan) Divides the current time span by the specified MetricTimeSpan returning ration between them. Declaration public double Divide(MetricTimeSpan timeSpan) Parameters Type Name Description MetricTimeSpan timeSpan MetricTimeSpan to divide the current time span by. Returns Type Description Double Rayion between the current MetricTimeSpan and timeSpan . Exceptions Type Condition ArgumentNullException timeSpan is null. DivideByZeroException timeSpan represents a time span of zero length. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Equals(MetricTimeSpan) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MetricTimeSpan other) Parameters Type Name Description MetricTimeSpan other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Parse(String) Converts the string representation of a metric time span to its MetricTimeSpan equivalent. Declaration public static MetricTimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description MetricTimeSpan A MetricTimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out MetricTimeSpan) Converts the string representation of a metric time span to its MetricTimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out MetricTimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. MetricTimeSpan timeSpan When this method returns, contains the MetricTimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Operators Addition(MetricTimeSpan, MetricTimeSpan) Adds two specified MetricTimeSpan instances. Declaration public static MetricTimeSpan operator +(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to add. MetricTimeSpan timeSpan2 The second MetricTimeSpan to add. Returns Type Description MetricTimeSpan An object whose value is the sum of the values of timeSpan1 and timeSpan2 . Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Equality(MetricTimeSpan, MetricTimeSpan) Determines if two MetricTimeSpan objects are equal. Declaration public static bool operator ==(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. GreaterThan(MetricTimeSpan, MetricTimeSpan) Indicates whether a specified MetricTimeSpan is greater than another one. Declaration public static bool operator>(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. GreaterThanOrEqual(MetricTimeSpan, MetricTimeSpan) Indicates whether a specified MetricTimeSpan is greater than or equal to another one. Declaration public static bool operator >=(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than or equal to the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Implicit(MetricTimeSpan to TimeSpan) Converts MetricTimeSpan to TimeSpan . Declaration public static implicit operator TimeSpan(MetricTimeSpan timeSpan) Parameters Type Name Description MetricTimeSpan timeSpan MetricTimeSpan to convert to TimeSpan . Returns Type Description TimeSpan Implicit(TimeSpan to MetricTimeSpan) Converts TimeSpan to MetricTimeSpan . Declaration public static implicit operator MetricTimeSpan(TimeSpan timeSpan) Parameters Type Name Description TimeSpan timeSpan TimeSpan to convert to MetricTimeSpan . Returns Type Description MetricTimeSpan Inequality(MetricTimeSpan, MetricTimeSpan) Determines if two MetricTimeSpan objects are not equal. Declaration public static bool operator !=(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. LessThan(MetricTimeSpan, MetricTimeSpan) Indicates whether a specified MetricTimeSpan is less than another one. Declaration public static bool operator <(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. LessThanOrEqual(MetricTimeSpan, MetricTimeSpan) Indicates whether a specified MetricTimeSpan is less than or equal to another one. Declaration public static bool operator <=(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than or equal to the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Subtraction(MetricTimeSpan, MetricTimeSpan) Subtracts a specified MetricTimeSpan from another one. Declaration public static MetricTimeSpan operator -(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The minuend. MetricTimeSpan timeSpan2 The subtrahend. Returns Type Description MetricTimeSpan An object whose value is the result of the value of timeSpan1 minus the value of timeSpan2 . Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. ArgumentException timeSpan1 is less than timeSpan2 . Implements ITimeSpan System.IComparable System.IComparable<T> System.IEquatable<T>"
  },
  "api/Melanchall.DryWetMidi.Interaction.MathTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MathTimeSpan.html",
    "title": "Class MathTimeSpan | DryWetMIDI",
    "keywords": "Class MathTimeSpan Represents a result of summation or subtraction of two ITimeSpan . Inheritance Object MathTimeSpan Implements ITimeSpan IComparable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MathTimeSpan : ITimeSpan, IComparable Properties Mode Get the mode of the mathematical operation represented by the current MathTimeSpan . Declaration public TimeSpanMode Mode { get; } Property Value Type Description TimeSpanMode Operation Gets the mathematical operation between TimeSpan1 and TimeSpan2 . Declaration public MathOperation Operation { get; } Property Value Type Description MathOperation TimeSpan1 Gets the first ITimeSpan . Declaration public ITimeSpan TimeSpan1 { get; } Property Value Type Description ITimeSpan TimeSpan2 Gets the second ITimeSpan . Declaration public ITimeSpan TimeSpan2 { get; } Property Value Type Description ITimeSpan Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions Type Condition ArgumentException obj is not the same type as this instance. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(MathTimeSpan, MathTimeSpan) Determines if two MathTimeSpan objects are equal. Declaration public static bool operator ==(MathTimeSpan timeSpan1, MathTimeSpan timeSpan2) Parameters Type Name Description MathTimeSpan timeSpan1 The first MathTimeSpan to compare. MathTimeSpan timeSpan2 The second MathTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. Inequality(MathTimeSpan, MathTimeSpan) Determines if two MathTimeSpan objects are not equal. Declaration public static bool operator !=(MathTimeSpan timeSpan1, MathTimeSpan timeSpan2) Parameters Type Name Description MathTimeSpan timeSpan1 The first MathTimeSpan to compare. MathTimeSpan timeSpan2 The second MathTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. Implements ITimeSpan System.IComparable"
  },
  "api/Melanchall.DryWetMidi.Interaction.MathOperation.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MathOperation.html",
    "title": "Enum MathOperation | DryWetMIDI",
    "keywords": "Enum MathOperation Represents a simple math operation used by the MathTimeSpan . The default is Add . Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum MathOperation Fields Name Description Add Addition. Subtract Subtraction."
  },
  "api/Melanchall.DryWetMidi.Interaction.LengthedObjectUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.LengthedObjectUtilities.html",
    "title": "Class LengthedObjectUtilities | DryWetMIDI",
    "keywords": "Class LengthedObjectUtilities Extension methods for objects that implement the ILengthedObject interface. Inheritance Object LengthedObjectUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class LengthedObjectUtilities Methods AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap, LengthedObjectPart) Filters collection of ILengthedObject to return objects at the specified time. Declaration public static IEnumerable<TObject> AtTime<TObject>(this IEnumerable<TObject> objects, ITimeSpan time, TempoMap tempoMap, LengthedObjectPart matchBy) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. ITimeSpan time Time to filter objects by. TempoMap tempoMap Tempo map to filter objects by time . LengthedObjectPart matchBy Part of an object which have to be at time . Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that are at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException objects is null. -or- time is null. -or- tempoMap is null. -or- One of the objects is null. InvalidEnumArgumentException matchBy specified an invalid value. AtTime<TObject>(IEnumerable<TObject>, Int64, LengthedObjectPart) Filters collection of ILengthedObject to return objects at the specified time. Declaration public static IEnumerable<TObject> AtTime<TObject>(this IEnumerable<TObject> objects, long time, LengthedObjectPart matchBy) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. Int64 time Time to filter objects by. LengthedObjectPart matchBy Part of an object which have to be at time . Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that are at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException objects is null. -or- One of the objects is null. ArgumentOutOfRangeException time is negative. InvalidEnumArgumentException matchBy specified an invalid value. EndAtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap) Filters collection of ILengthedObject to return objects that end at the specified time. Declaration public static IEnumerable<TObject> EndAtTime<TObject>(this IEnumerable<TObject> objects, ITimeSpan time, TempoMap tempoMap) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. ITimeSpan time End time to filter objects by. TempoMap tempoMap Tempo map to filter objects by time . Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that end at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException objects is null. -or- time is null. -or- tempoMap is null. -or- One of the objects is null. EndAtTime<TObject>(IEnumerable<TObject>, Int64) Filters collection of ILengthedObject to return objects that end at the specified time. Declaration public static IEnumerable<TObject> EndAtTime<TObject>(this IEnumerable<TObject> objects, long time) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. Int64 time End time to filter objects by. Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that end at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException objects is null. -or- One of the objects is null. ArgumentOutOfRangeException time is negative. EndTimeAs(ILengthedObject, TimeSpanType, TempoMap) Gets end time of an ITimedObject as an instance of time span defined by the specified time span type. Declaration public static ITimeSpan EndTimeAs(this ILengthedObject obj, TimeSpanType timeType, TempoMap tempoMap) Parameters Type Name Description ILengthedObject obj Object to get end time of. TimeSpanType timeType The type of time span to convert the end time of obj to. TempoMap tempoMap Tempo map to calculate end time of the obj . Returns Type Description ITimeSpan End time of the specified object as an instance of time span defined by the timeType . Exceptions Type Condition ArgumentNullException obj is null. -or- tempoMap is null. InvalidEnumArgumentException timeType specified an invalid value. EndTimeAs<TTime>(ILengthedObject, TempoMap) Gets end time of an ITimedObject as an instance of type that implements the ITimeSpan interface. Declaration public static TTime EndTimeAs<TTime>(this ILengthedObject obj, TempoMap tempoMap) where TTime : ITimeSpan Parameters Type Name Description ILengthedObject obj Object to get end time of. TempoMap tempoMap Tempo map to calculate end time of the obj . Returns Type Description TTime End time of the specified object as an instance of TTime . Type Parameters Name Description TTime Type that will represent the end time of the obj . Exceptions Type Condition ArgumentNullException obj is null. -or- tempoMap is null. NotSupportedException TTime is not supported. LengthAs(ILengthedObject, TimeSpanType, TempoMap) Gets length of an ILengthedObject as an instance of type defined by the specified time span type. Declaration public static ITimeSpan LengthAs(this ILengthedObject obj, TimeSpanType lengthType, TempoMap tempoMap) Parameters Type Name Description ILengthedObject obj Object to get length of. TimeSpanType lengthType The type of time span to convert the length of obj to. TempoMap tempoMap Tempo map to calculate length of the obj . Returns Type Description ITimeSpan Time of the specified object as an instance of time span defined by the lengthType . Exceptions Type Condition ArgumentNullException obj is null. -or- tempoMap is null. InvalidEnumArgumentException lengthType specified an invalid value. LengthAs<TLength>(ILengthedObject, TempoMap) Gets length of an ILengthedObject as an instance of type that implements the ITimeSpan interface. Declaration public static TLength LengthAs<TLength>(this ILengthedObject obj, TempoMap tempoMap) where TLength : ITimeSpan Parameters Type Name Description ILengthedObject obj Object to get length of. TempoMap tempoMap Tempo map to calculate length of the obj . Returns Type Description TLength Length of the specified object as an instance of TLength . Type Parameters Name Description TLength Type that will represent the length of the obj . Exceptions Type Condition ArgumentNullException obj is null. -or- tempoMap is null. NotSupportedException TLength is not supported. StartAtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap) Filters collection of ILengthedObject to return objects that start at the specified time. Declaration public static IEnumerable<TObject> StartAtTime<TObject>(this IEnumerable<TObject> objects, ITimeSpan time, TempoMap tempoMap) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. ITimeSpan time Start time to filter objects by. TempoMap tempoMap Tempo map to filter objects by time . Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that start at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException objects is null. -or- time is null. -or- tempoMap is null. -or- One of the objects is null. StartAtTime<TObject>(IEnumerable<TObject>, Int64) Filters collection of ILengthedObject to return objects that start at the specified time. Declaration public static IEnumerable<TObject> StartAtTime<TObject>(this IEnumerable<TObject> objects, long time) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. Int64 time Start time to filter objects by. Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that start at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException objects is null. -or- One of the objects is null. ArgumentOutOfRangeException time is negative."
  },
  "api/Melanchall.DryWetMidi.Interaction.LengthedObjectPart.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.LengthedObjectPart.html",
    "title": "Enum LengthedObjectPart | DryWetMIDI",
    "keywords": "Enum LengthedObjectPart Part of an ILengthedObject . Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum LengthedObjectPart Fields Name Description End End of an object. Entire Entire object from its start to its end. Start Start of an object."
  },
  "api/Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpan.html",
    "title": "Class BarBeatFractionTimeSpan | DryWetMIDI",
    "keywords": "Class BarBeatFractionTimeSpan Represents bar/beat time span which represents bars and fractional beats. Inheritance Object BarBeatFractionTimeSpan Implements ITimeSpan IComparable IComparable < BarBeatFractionTimeSpan > IEquatable < BarBeatFractionTimeSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class BarBeatFractionTimeSpan : ITimeSpan, IComparable, IComparable<BarBeatFractionTimeSpan>, IEquatable<BarBeatFractionTimeSpan> Constructors BarBeatFractionTimeSpan() Initializes a new instance of the BarBeatFractionTimeSpan . Declaration public BarBeatFractionTimeSpan() BarBeatFractionTimeSpan(Int64) Initializes a new instance of the BarBeatFractionTimeSpan with the specified number of bars. Declaration public BarBeatFractionTimeSpan(long bars) Parameters Type Name Description Int64 bars The number of bars. Exceptions Type Condition ArgumentOutOfRangeException bars is negative. BarBeatFractionTimeSpan(Int64, Double) Initializes a new instance of the BarBeatFractionTimeSpan with the specified number of bars and beats. Declaration public BarBeatFractionTimeSpan(long bars, double beats) Parameters Type Name Description Int64 bars The number of bars. Double beats The number of beats. Exceptions Type Condition ArgumentOutOfRangeException bars is negative. -or- beats is negative. Properties Bars Gets the bars component of the time represented by the current BarBeatFractionTimeSpan . Declaration public long Bars { get; } Property Value Type Description Int64 Beats Gets the beats component of the time represented by the current BarBeatFractionTimeSpan . Declaration public double Beats { get; } Property Value Type Description Double Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(BarBeatFractionTimeSpan) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(BarBeatFractionTimeSpan other) Parameters Type Name Description BarBeatFractionTimeSpan other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions Type Condition ArgumentException obj is not the same type as this instance. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Equals(BarBeatFractionTimeSpan) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(BarBeatFractionTimeSpan other) Parameters Type Name Description BarBeatFractionTimeSpan other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Parse(String) Converts the string representation of a bar/beat time span to its BarBeatFractionTimeSpan equivalent. Declaration public static BarBeatFractionTimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description BarBeatFractionTimeSpan A BarBeatFractionTimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out BarBeatFractionTimeSpan) Converts the string representation of a bar/beat time span to its BarBeatFractionTimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out BarBeatFractionTimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. BarBeatFractionTimeSpan timeSpan When this method returns, contains the BarBeatFractionTimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false. Operators Addition(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Adds two specified BarBeatFractionTimeSpan instances. Declaration public static BarBeatFractionTimeSpan operator +(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to add. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to add. Returns Type Description BarBeatFractionTimeSpan An object whose value is the sum of the values of timeSpan1 and timeSpan2 . Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Equality(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Determines if two BarBeatFractionTimeSpan objects are equal. Declaration public static bool operator ==(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. GreaterThan(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Indicates whether a specified BarBeatFractionTimeSpan is greater than another one. Declaration public static bool operator>(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. GreaterThanOrEqual(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Indicates whether a specified BarBeatFractionTimeSpan is greater than or equal to another one. Declaration public static bool operator >=(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than or equal to the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Inequality(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Determines if two BarBeatFractionTimeSpan objects are not equal. Declaration public static bool operator !=(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. LessThan(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Indicates whether a specified BarBeatFractionTimeSpan is less than another one. Declaration public static bool operator <(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. LessThanOrEqual(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Indicates whether a specified BarBeatFractionTimeSpan is less than or equal to another one. Declaration public static bool operator <=(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than or equal to the value of timeSpan2 ; otherwise, false. Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. Subtraction(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Subtracts a specified BarBeatFractionTimeSpan from another one. Declaration public static BarBeatFractionTimeSpan operator -(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The minuend. BarBeatFractionTimeSpan timeSpan2 The subtrahend. Returns Type Description BarBeatFractionTimeSpan An object whose value is the result of the value of timeSpan1 minus the value of timeSpan2 . Exceptions Type Condition ArgumentNullException timeSpan1 is null. -or- timeSpan2 is null. ArgumentException timeSpan1 is less than timeSpan2 . Implements ITimeSpan System.IComparable System.IComparable<T> System.IEquatable<T>"
  },
  "api/Melanchall.DryWetMidi.Interaction.ArbitraryGrid.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ArbitraryGrid.html",
    "title": "Class ArbitraryGrid | DryWetMIDI",
    "keywords": "Class ArbitraryGrid Grid where points in time are distributed arbitrarily according to provided collection of times. Inheritance Object ArbitraryGrid Implements IGrid Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ArbitraryGrid : IGrid Constructors ArbitraryGrid(ITimeSpan[]) Initializes a new instance of the ArbitraryGrid with the specified collection of times. Declaration public ArbitraryGrid(params ITimeSpan[] times) Parameters Type Name Description ITimeSpan [] times Grid's times. Exceptions Type Condition ArgumentNullException times is null. ArgumentException times contains null. ArbitraryGrid(IEnumerable<ITimeSpan>) Initializes a new instance of the ArbitraryGrid with the specified collection of times. Declaration public ArbitraryGrid(IEnumerable<ITimeSpan> times) Parameters Type Name Description IEnumerable < ITimeSpan > times Grid's times. Exceptions Type Condition ArgumentNullException times is null. ArgumentException times contains null. Properties Times Times of the current grid. Declaration public IEnumerable<ITimeSpan> Times { get; } Property Value Type Description IEnumerable < ITimeSpan > Methods GetTimes(TempoMap) Gets points in time of the current grid. Declaration public IEnumerable<long> GetTimes(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map used to get grid's times. Returns Type Description IEnumerable < Int64 > Collection of points in time of the current grid. Exceptions Type Condition ArgumentNullException tempoMap is null. Implements IGrid"
  },
  "api/Melanchall.DryWetMidi.Devices.PlaybackUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.PlaybackUtilities.html",
    "title": "Class PlaybackUtilities | DryWetMIDI",
    "keywords": "Class PlaybackUtilities Contains methods to play MIDI data and retrieving an instance of the Playback which provides advanced features for MIDI data playing. Inheritance Object PlaybackUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public static class PlaybackUtilities Methods GetPlayback(Pattern, TempoMap, FourBitNumber, IOutputDevice, MidiClockSettings) Retrieves an instance of the Playback for playing MIDI events that will be produced by specified Pattern . Declaration public static Playback GetPlayback(this Pattern pattern, TempoMap tempoMap, FourBitNumber channel, IOutputDevice outputDevice, MidiClockSettings clockSettings = null) Parameters Type Name Description Pattern pattern Pattern producing events to play. TempoMap tempoMap Tempo map used to calculate events times. FourBitNumber channel MIDI channel to play channel events on. IOutputDevice outputDevice Output MIDI device to play events through. MidiClockSettings clockSettings Settings of the internal playback's clock. Returns Type Description Playback An instance of the Playback for playing MIDI events that will be produced by the pattern . Exceptions Type Condition ArgumentNullException pattern is null. -or- tempoMap is null. -or- outputDevice is null. GetPlayback(Pattern, TempoMap, FourBitNumber, MidiClockSettings) Retrieves an instance of the Playback for playing MIDI events that will be produced by specified Pattern . Declaration public static Playback GetPlayback(this Pattern pattern, TempoMap tempoMap, FourBitNumber channel, MidiClockSettings clockSettings = null) Parameters Type Name Description Pattern pattern Pattern producing events to play. TempoMap tempoMap Tempo map used to calculate events times. FourBitNumber channel MIDI channel to play channel events on. MidiClockSettings clockSettings Settings of the internal playback's clock. Returns Type Description Playback An instance of the Playback for playing MIDI events that will be produced by the pattern . Exceptions Type Condition ArgumentNullException pattern is null. -or- tempoMap is null. GetPlayback(MidiFile, IOutputDevice, MidiClockSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified MidiFile . Declaration public static Playback GetPlayback(this MidiFile midiFile, IOutputDevice outputDevice, MidiClockSettings clockSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile containing events to play. IOutputDevice outputDevice Output MIDI device to play events through. MidiClockSettings clockSettings Settings of the internal playback's clock. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the midiFile . Exceptions Type Condition ArgumentNullException midiFile is null. -or- outputDevice is null. GetPlayback(MidiFile, MidiClockSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified MidiFile . Declaration public static Playback GetPlayback(this MidiFile midiFile, MidiClockSettings clockSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile containing events to play. MidiClockSettings clockSettings Settings of the internal playback's clock. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the midiFile . Exceptions Type Condition ArgumentNullException midiFile is null. GetPlayback(TrackChunk, TempoMap, IOutputDevice, MidiClockSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified TrackChunk . Declaration public static Playback GetPlayback(this TrackChunk trackChunk, TempoMap tempoMap, IOutputDevice outputDevice, MidiClockSettings clockSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play events through. MidiClockSettings clockSettings Settings of the internal playback's clock. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null. -or- tempoMap is null. -or- outputDevice is null. GetPlayback(TrackChunk, TempoMap, MidiClockSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified TrackChunk . Declaration public static Playback GetPlayback(this TrackChunk trackChunk, TempoMap tempoMap, MidiClockSettings clockSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. MidiClockSettings clockSettings Settings of the internal playback's clock. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null. -or- tempoMap is null. GetPlayback(IEnumerable<TrackChunk>, TempoMap, IOutputDevice, MidiClockSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified collection of TrackChunk . Declaration public static Playback GetPlayback(this IEnumerable<TrackChunk> trackChunks, TempoMap tempoMap, IOutputDevice outputDevice, MidiClockSettings clockSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play events through. MidiClockSettings clockSettings Settings of the internal playback's clock. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the trackChunks . Exceptions Type Condition ArgumentNullException trackChunks is null. -or- tempoMap is null. -or- outputDevice is null. GetPlayback(IEnumerable<TrackChunk>, TempoMap, MidiClockSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified collection of TrackChunk . Declaration public static Playback GetPlayback(this IEnumerable<TrackChunk> trackChunks, TempoMap tempoMap, MidiClockSettings clockSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. MidiClockSettings clockSettings Settings of the internal playback's clock. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the trackChunks . Exceptions Type Condition ArgumentNullException trackChunks is null. -or- tempoMap is null. GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, SevenBitNumber, MidiClockSettings) Retrieves an instance of the Playback for playing musical objects using the specified program. Declaration public static Playback GetPlayback<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, SevenBitNumber programNumber, MidiClockSettings clockSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. SevenBitNumber programNumber Program that should be used to play objects . MidiClockSettings clockSettings Settings of the internal playback's clock. Returns Type Description Playback An instance of the Playback for playing objects . Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException objects is null. -or- tempoMap is null. -or- outputDevice is null. GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidi2Program, MidiClockSettings) Retrieves an instance of the Playback for playing musical objects using the specified General MIDI 2 program. Declaration public static Playback GetPlayback<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidi2Program generalMidi2Program, MidiClockSettings clockSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. GeneralMidi2Program generalMidi2Program Program that should be used to play objects . MidiClockSettings clockSettings Settings of the internal playback's clock. Returns Type Description Playback An instance of the Playback for playing objects . Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException objects is null. -or- tempoMap is null. -or- outputDevice is null. InvalidEnumArgumentException generalMidi2Program specified an invalid value. GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidiProgram, MidiClockSettings) Retrieves an instance of the Playback for playing musical objects using the specified General MIDI 1 program. Declaration public static Playback GetPlayback<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidiProgram generalMidiProgram, MidiClockSettings clockSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. GeneralMidiProgram generalMidiProgram Program that should be used to play objects . MidiClockSettings clockSettings Settings of the internal playback's clock. Returns Type Description Playback An instance of the Playback for playing objects . Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException objects is null. -or- tempoMap is null. -or- outputDevice is null. InvalidEnumArgumentException generalMidiProgram specified an invalid value. Play(Pattern, TempoMap, FourBitNumber, IOutputDevice, MidiClockSettings) Plays MIDI events that will be produced by specified Pattern . Declaration public static void Play(this Pattern pattern, TempoMap tempoMap, FourBitNumber channel, IOutputDevice outputDevice, MidiClockSettings clockSettings = null) Parameters Type Name Description Pattern pattern Pattern producing events to play. TempoMap tempoMap Tempo map used to calculate events times. FourBitNumber channel MIDI channel to play channel events on. IOutputDevice outputDevice Output MIDI device to play events through. MidiClockSettings clockSettings Settings of the internal playback's clock. Exceptions Type Condition ArgumentNullException pattern is null. -or- tempoMap is null. -or- outputDevice is null. Play(MidiFile, IOutputDevice, MidiClockSettings) Plays MIDI events contained in the specified MidiFile . Declaration public static void Play(this MidiFile midiFile, IOutputDevice outputDevice, MidiClockSettings clockSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile containing events to play. IOutputDevice outputDevice Output MIDI device to play events through. MidiClockSettings clockSettings Settings of the internal playback's clock. Exceptions Type Condition ArgumentNullException midiFile is null. -or- outputDevice is null. Play(TrackChunk, TempoMap, IOutputDevice, MidiClockSettings) Plays MIDI events contained in the specified TrackChunk . Declaration public static void Play(this TrackChunk trackChunk, TempoMap tempoMap, IOutputDevice outputDevice, MidiClockSettings clockSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play events through. MidiClockSettings clockSettings Settings of the internal playback's clock. Exceptions Type Condition ArgumentNullException trackChunk is null. -or- tempoMap is null. -or- outputDevice is null. Play(IEnumerable<TrackChunk>, TempoMap, IOutputDevice, MidiClockSettings) Plays MIDI events contained in the specified collection of TrackChunk . Declaration public static void Play(this IEnumerable<TrackChunk> trackChunks, TempoMap tempoMap, IOutputDevice outputDevice, MidiClockSettings clockSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play events through. MidiClockSettings clockSettings Settings of the internal playback's clock. Exceptions Type Condition ArgumentNullException trackChunks is null. -or- tempoMap is null. -or- outputDevice is null. Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, SevenBitNumber, MidiClockSettings) Plays musical objects using the specified program. Declaration public static void Play<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, SevenBitNumber programNumber, MidiClockSettings clockSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. SevenBitNumber programNumber Program that should be used to play objects . MidiClockSettings clockSettings Settings of the internal playback's clock. Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException objects is null. -or- tempoMap is null. -or- outputDevice is null. Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidi2Program, MidiClockSettings) Plays musical objects using the specified General MIDI 2 program. Declaration public static void Play<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidi2Program generalMidi2Program, MidiClockSettings clockSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. GeneralMidi2Program generalMidi2Program Program that should be used to play objects . MidiClockSettings clockSettings Settings of the internal playback's clock. Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException objects is null. -or- tempoMap is null. -or- outputDevice is null. InvalidEnumArgumentException generalMidi2Program specified an invalid value. Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidiProgram, MidiClockSettings) Plays musical objects using the specified General MIDI 1 program. Declaration public static void Play<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidiProgram generalMidiProgram, MidiClockSettings clockSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. GeneralMidiProgram generalMidiProgram Program that should be used to play objects . MidiClockSettings clockSettings Settings of the internal playback's clock. Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException objects is null. -or- tempoMap is null. -or- outputDevice is null. InvalidEnumArgumentException generalMidiProgram specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Devices.PlaybackSnapping.html": {
    "href": "api/Melanchall.DryWetMidi.Devices.PlaybackSnapping.html",
    "title": "Class PlaybackSnapping | DryWetMIDI",
    "keywords": "Class PlaybackSnapping Provides a way to manage snap points for Playback . Inheritance Object PlaybackSnapping Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Devices Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PlaybackSnapping Properties SnapPoints Gets all snap points. Declaration public IEnumerable<SnapPoint> SnapPoints { get; } Property Value Type Description IEnumerable < SnapPoint > Methods AddSnapPoint(ITimeSpan) Adds a snap point at the specified time. Declaration public SnapPoint<Guid> AddSnapPoint(ITimeSpan time) Parameters Type Name Description ITimeSpan time Time to add snap point at. Returns Type Description SnapPoint < Guid > An instance of the SnapPoint<TData> representing a snap point at time . Exceptions Type Condition ArgumentNullException time is null. AddSnapPoint<TData>(ITimeSpan, TData) Adds a snap point with the specified data at given time. Declaration public SnapPoint<TData> AddSnapPoint<TData>(ITimeSpan time, TData data) Parameters Type Name Description ITimeSpan time Time to add snap point at. TData data Data to attach to snap point. Returns Type Description SnapPoint <TData> An instance of the SnapPoint<TData> representing a snap point with data at time . Type Parameters Name Description TData Type of data that will be attached to a snap point. Exceptions Type Condition ArgumentNullException time is null. RemoveSnapPoint<TData>(SnapPoint<TData>) Removes a snap point. Declaration public void RemoveSnapPoint<TData>(SnapPoint<TData> snapPoint) Parameters Type Name Description SnapPoint <TData> snapPoint Snap point to remove. Type Parameters Name Description TData Type of data attached to snapPoint . Exceptions Type Condition ArgumentNullException snapPoint is null. RemoveSnapPointsByData<TData>(Predicate<TData>) Removes all snap points that match the conditions defined by the specified predicate. Declaration public void RemoveSnapPointsByData<TData>(Predicate<TData> predicate) Parameters Type Name Description Predicate <TData> predicate The Predicate<T> delegate that defines the conditions of snap points to remove. Type Parameters Name Description TData Type of data attached to snap points to remove. Exceptions Type Condition ArgumentNullException predicate is null. SnapToGrid(IGrid) Adds snap points at times defined by the specified grid. Declaration public SnapPointsGroup SnapToGrid(IGrid grid) Parameters Type Name Description IGrid grid The grid that defines times to add snap points to. Returns Type Description SnapPointsGroup An instance of the SnapPointsGroup added snap points belong to. Exceptions Type Condition ArgumentNullException grid is null. SnapToNotesEnds() Adds snap points at end times of notes. Declaration public SnapPointsGroup SnapToNotesEnds() Returns Type Description SnapPointsGroup An instance of the SnapPointsGroup added snap points belong to. SnapToNotesStarts() Adds snap points at start times of notes. Declaration public SnapPointsGroup SnapToNotesStarts() Returns Type Description SnapPointsGroup An instance of the SnapPointsGroup added snap points belong to."
  },
  "api/Melanchall.DryWetMidi.Core.MidiFileFormat.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiFileFormat.html",
    "title": "Enum MidiFileFormat | DryWetMIDI",
    "keywords": "Enum MidiFileFormat Format of a Standard MIDI file which specifies overall structure of the file. Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum MidiFileFormat : ushort Fields Name Description MultiSequence The file contains one or more sequentially independent single-track patterns. MultiTrack The file contains one or more simultaneous tracks (or MIDI outputs) of a sequence. SingleTrack The file contains a single multi-channel track."
  }
}